
QuedamosEmbebidos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cab8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  0800cbc8  0800cbc8  0000dbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d710  0800d710  00010080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d710  0800d710  0000e710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d718  0800d718  00010080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d718  0800d718  0000e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d71c  0800d71c  0000e71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001080  20000000  0800d720  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b4  20001080  0800e7a0  00010080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004134  0800e7a0  00010134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e027  00000000  00000000  000100a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004188  00000000  00000000  0002e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  00032258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001432  00000000  00000000  00033c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa77  00000000  00000000  00035042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204a9  00000000  00000000  0004fab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d11a  00000000  00000000  0006ff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007810  00000000  00000000  0010d0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001148d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20001080 	.word	0x20001080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cbb0 	.word	0x0800cbb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20001084 	.word	0x20001084
 800014c:	0800cbb0 	.word	0x0800cbb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <FFT>:
#include "twid256.h" /*header file with twiddle constants*/
#include "fft.h"


void FFT(struct cmpx *Y, int N) /*FFT de vector de N puntos*/
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b090      	sub	sp, #64	@ 0x40
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	struct cmpx temp1, temp2; /*temporary storage variables */
	int i, j, k; /*loop counter variables */
	int upper_leg, lower_leg; /*index of upper/lower butterfly leg*/
	int leg_diff; /*difference between upper/lower leg*/
	int num_stages = 0; /*number of FFT stages, or iterations*/
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	int index, step; /*index and step between twiddle factor*/
	/* log(base 2) de N puntos = M fases o estados */
	i = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	do {
		num_stages += 1;
 80011ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b0:	3301      	adds	r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		i = i * 2;
 80011b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	} while (i != N);
 80011ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d1f5      	bne.n	80011ae <FFT+0x12>
	/* starting difference between upper and lower butterfly legs*/
	leg_diff = N / 2;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	0fda      	lsrs	r2, r3, #31
 80011c6:	4413      	add	r3, r2
 80011c8:	105b      	asrs	r3, r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* step between values in twiddle factor array twid256.h */
	step = 512 / N;
 80011cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d6:	623b      	str	r3, [r7, #32]
	/* For N-point FFT */
	for (i = 0; i < num_stages; i++) /*tantas iteraciones como fases*/
 80011d8:	2300      	movs	r3, #0
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011dc:	e0d2      	b.n	8001384 <FFT+0x1e8>
	{
		index = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
		for (j = 0; j < leg_diff; j++) /*tantas iteraciones como transfor-*/
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011e6:	e0bd      	b.n	8001364 <FFT+0x1c8>
		{ /*madas en cada fase*/
			for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff)) { /*tantas iteraciones como puntos en cada transformada*/
 80011e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80011ec:	e0ae      	b.n	800134c <FFT+0x1b0>
				lower_leg = upper_leg + leg_diff;
 80011ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f2:	4413      	add	r3, r2
 80011f4:	61fb      	str	r3, [r7, #28]
				temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 80011f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fcb2 	bl	8000b74 <__addsf3>
 8001210:	4603      	mov	r3, r0
 8001212:	617b      	str	r3, [r7, #20]
				temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	6858      	ldr	r0, [r3, #4]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fca3 	bl	8000b74 <__addsf3>
 800122e:	4603      	mov	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
				temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 8001232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fc92 	bl	8000b70 <__aeabi_fsub>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
				temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 8001250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	6858      	ldr	r0, [r3, #4]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fc83 	bl	8000b70 <__aeabi_fsub>
 800126a:	4603      	mov	r3, r0
 800126c:	613b      	str	r3, [r7, #16]
				(Y[lower_leg]).real = temp2.real * (w[index]).real
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	4a72      	ldr	r2, [pc, #456]	@ (8001440 <FFT+0x2a4>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4413      	add	r3, r2
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f929 	bl	80004d8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4614      	mov	r4, r2
 800128c:	461d      	mov	r5, r3
						- temp2.imag * (w[index]).imag;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8c9 	bl	8000428 <__aeabi_f2d>
 8001296:	4a6a      	ldr	r2, [pc, #424]	@ (8001440 <FFT+0x2a4>)
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f918 	bl	80004d8 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7fe ff5a 	bl	8000168 <__aeabi_dsub>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
				(Y[lower_leg]).real = temp2.real * (w[index]).real
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	18d4      	adds	r4, r2, r3
						- temp2.imag * (w[index]).imag;
 80012c4:	f7ff fc00 	bl	8000ac8 <__aeabi_d2f>
 80012c8:	4603      	mov	r3, r0
				(Y[lower_leg]).real = temp2.real * (w[index]).real
 80012ca:	6023      	str	r3, [r4, #0]
				(Y[lower_leg]).imag = temp2.real * (w[index]).imag
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8aa 	bl	8000428 <__aeabi_f2d>
 80012d4:	4a5a      	ldr	r2, [pc, #360]	@ (8001440 <FFT+0x2a4>)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	3308      	adds	r3, #8
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f8f9 	bl	80004d8 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	461d      	mov	r5, r3
						+ temp2.imag * (w[index]).real;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f899 	bl	8000428 <__aeabi_f2d>
 80012f6:	4a52      	ldr	r2, [pc, #328]	@ (8001440 <FFT+0x2a4>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f8e9 	bl	80004d8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ff2d 	bl	800016c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
				(Y[lower_leg]).imag = temp2.real * (w[index]).imag
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	18d4      	adds	r4, r2, r3
						+ temp2.imag * (w[index]).real;
 8001322:	f7ff fbd1 	bl	8000ac8 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
				(Y[lower_leg]).imag = temp2.real * (w[index]).imag
 8001328:	6063      	str	r3, [r4, #4]
				(Y[upper_leg]).real = temp1.real;
 800132a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	601a      	str	r2, [r3, #0]
				(Y[upper_leg]).imag = temp1.imag;
 8001336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	605a      	str	r2, [r3, #4]
			for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff)) { /*tantas iteraciones como puntos en cada transformada*/
 8001342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001348:	4413      	add	r3, r2
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
 800134c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	f6ff af4c 	blt.w	80011ee <FFT+0x52>
			}
			index += step;
 8001356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	4413      	add	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
		for (j = 0; j < leg_diff; j++) /*tantas iteraciones como transfor-*/
 800135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001360:	3301      	adds	r3, #1
 8001362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001368:	429a      	cmp	r2, r3
 800136a:	f6ff af3d 	blt.w	80011e8 <FFT+0x4c>
		}
		leg_diff = leg_diff / 2;
 800136e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001370:	0fda      	lsrs	r2, r3, #31
 8001372:	4413      	add	r3, r2
 8001374:	105b      	asrs	r3, r3, #1
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
		step *= 2;
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	623b      	str	r3, [r7, #32]
	for (i = 0; i < num_stages; i++) /*tantas iteraciones como fases*/
 800137e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001380:	3301      	adds	r3, #1
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001388:	429a      	cmp	r2, r3
 800138a:	f6ff af28 	blt.w	80011de <FFT+0x42>
	}
	/* bit reversal for resequencing data */
	j = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (i = 1; i < (N - 1); i++) {
 8001392:	2301      	movs	r3, #1
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001396:	e049      	b.n	800142c <FFT+0x290>
		k = N / 2;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	0fda      	lsrs	r2, r3, #31
 800139c:	4413      	add	r3, r2
 800139e:	105b      	asrs	r3, r3, #1
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
		while (k <= j) {
 80013a2:	e008      	b.n	80013b6 <FFT+0x21a>
			j = j - k;
 80013a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	63bb      	str	r3, [r7, #56]	@ 0x38
			k = k / 2;
 80013ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ae:	0fda      	lsrs	r2, r3, #31
 80013b0:	4413      	add	r3, r2
 80013b2:	105b      	asrs	r3, r3, #1
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34
		while (k <= j) {
 80013b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ba:	429a      	cmp	r2, r3
 80013bc:	ddf2      	ble.n	80013a4 <FFT+0x208>
		}
		j = j + k;
 80013be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c2:	4413      	add	r3, r2
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (i < j) {
 80013c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ca:	429a      	cmp	r2, r3
 80013cc:	da2b      	bge.n	8001426 <FFT+0x28a>
			temp1.real = (Y[j]).real;
 80013ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	617b      	str	r3, [r7, #20]
			temp1.imag = (Y[j]).imag;
 80013da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
			(Y[j]).real = (Y[i]).real;
 80013e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	441a      	add	r2, r3
 80013ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	440b      	add	r3, r1
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	601a      	str	r2, [r3, #0]
			(Y[j]).imag = (Y[i]).imag;
 80013fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	441a      	add	r2, r3
 8001402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	440b      	add	r3, r1
 800140a:	6852      	ldr	r2, [r2, #4]
 800140c:	605a      	str	r2, [r3, #4]
			(Y[i]).real = temp1.real;
 800140e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	601a      	str	r2, [r3, #0]
			(Y[i]).imag = temp1.imag;
 800141a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (N - 1); i++) {
 8001426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001428:	3301      	adds	r3, #1
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3b01      	subs	r3, #1
 8001430:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001432:	429a      	cmp	r2, r3
 8001434:	dbb0      	blt.n	8001398 <FFT+0x1fc>
		}
	}

	return;
 8001436:	bf00      	nop
}
 8001438:	3740      	adds	r7, #64	@ 0x40
 800143a:	46bd      	mov	sp, r7
 800143c:	bdb0      	pop	{r4, r5, r7, pc}
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f002 fb76 	bl	8003b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f850 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 fa70 	bl	8001934 <MX_GPIO_Init>
  MX_DMA_Init();
 8001454:	f000 fa50 	bl	80018f8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001458:	f000 f8e4 	bl	8001624 <MX_I2C1_Init>
  MX_TIM3_Init();
 800145c:	f000 f9d4 	bl	8001808 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001460:	f000 fa20 	bl	80018a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001464:	f000 f90c 	bl	8001680 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001468:	f000 f95a 	bl	8001720 <MX_TIM2_Init>
  MX_ADC1_Init();
 800146c:	f000 f89c 	bl	80015a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001470:	f001 fcca 	bl	8002e08 <SSD1306_Init>
  Init_PWM_DMA();
 8001474:	f000 fb2e 	bl	8001ad4 <Init_PWM_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001478:	f006 f9e6 	bl	8007848 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaforo1 */
  Semaforo1Handle = osSemaphoreNew(1, 1, &Semaforo1_attributes);
 800147c:	4a11      	ldr	r2, [pc, #68]	@ (80014c4 <main+0x80>)
 800147e:	2101      	movs	r1, #1
 8001480:	2001      	movs	r0, #1
 8001482:	f006 fb4d 	bl	8007b20 <osSemaphoreNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a0f      	ldr	r2, [pc, #60]	@ (80014c8 <main+0x84>)
 800148a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Bornera */
  BorneraHandle = osThreadNew(StartBorneraTask, NULL, &Bornera_attributes);
 800148c:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <main+0x88>)
 800148e:	2100      	movs	r1, #0
 8001490:	480f      	ldr	r0, [pc, #60]	@ (80014d0 <main+0x8c>)
 8001492:	f006 fa3f 	bl	8007914 <osThreadNew>
 8001496:	4603      	mov	r3, r0
 8001498:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <main+0x90>)
 800149a:	6013      	str	r3, [r2, #0]

  /* creation of UI */
  UIHandle = osThreadNew(StartTaskUI, NULL, &UI_attributes);
 800149c:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <main+0x94>)
 800149e:	2100      	movs	r1, #0
 80014a0:	480e      	ldr	r0, [pc, #56]	@ (80014dc <main+0x98>)
 80014a2:	f006 fa37 	bl	8007914 <osThreadNew>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <main+0x9c>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* creation of DAC */
  DACHandle = osThreadNew(StartDAC, NULL, &DAC_attributes);
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <main+0xa0>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	480d      	ldr	r0, [pc, #52]	@ (80014e8 <main+0xa4>)
 80014b2:	f006 fa2f 	bl	8007914 <osThreadNew>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <main+0xa8>)
 80014ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014bc:	f006 f9f6 	bl	80078ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <main+0x7c>
 80014c4:	0800d490 	.word	0x0800d490
 80014c8:	20001290 	.word	0x20001290
 80014cc:	0800d424 	.word	0x0800d424
 80014d0:	08002089 	.word	0x08002089
 80014d4:	20001284 	.word	0x20001284
 80014d8:	0800d448 	.word	0x0800d448
 80014dc:	080021a9 	.word	0x080021a9
 80014e0:	20001288 	.word	0x20001288
 80014e4:	0800d46c 	.word	0x0800d46c
 80014e8:	08002cc1 	.word	0x08002cc1
 80014ec:	2000128c 	.word	0x2000128c

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	@ 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fa:	2228      	movs	r2, #40	@ 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 fd9e 	bl	800b040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	2301      	movs	r3, #1
 8001530:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800153c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001540:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fa52 	bl	80059f0 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001552:	f001 fc53 	bl	8002dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001566:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fcbe 	bl	8005ef4 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800157e:	f001 fc3d 	bl	8002dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001582:	2302      	movs	r3, #2
 8001584:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800158a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fe6e 	bl	8006270 <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800159a:	f001 fc2f 	bl	8002dfc <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	@ 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_ADC1_Init+0x74>)
 80015ba:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <MX_ADC1_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_ADC1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_ADC1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_ADC1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_ADC1_Init+0x74>)
 80015d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <MX_ADC1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_ADC1_Init+0x74>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e4:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_ADC1_Init+0x74>)
 80015e6:	f002 fad9 	bl	8003b9c <HAL_ADC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f001 fc04 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015f4:	2305      	movs	r3, #5
 80015f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_ADC1_Init+0x74>)
 8001606:	f002 fd5f 	bl	80040c8 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001610:	f001 fbf4 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000109c 	.word	0x2000109c
 8001620:	40012400 	.word	0x40012400

08001624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_I2C1_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <MX_I2C1_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_I2C1_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001662:	f003 fbfb 	bl	8004e5c <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800166c:	f001 fbc6 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200010cc 	.word	0x200010cc
 8001678:	40005400 	.word	0x40005400
 800167c:	00061a80 	.word	0x00061a80

08001680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_TIM1_Init+0x98>)
 800169e:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <MX_TIM1_Init+0x9c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016a4:	2247      	movs	r2, #71	@ 0x47
 80016a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c8:	4813      	ldr	r0, [pc, #76]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016ca:	f004 ff3d 	bl	8006548 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016d4:	f001 fb92 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <MX_TIM1_Init+0x98>)
 80016e6:	f005 fadf 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016f0:	f001 fb84 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_TIM1_Init+0x98>)
 8001702:	f005 fe61 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800170c:	f001 fb76 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20001120 	.word	0x20001120
 800171c:	40012c00 	.word	0x40012c00

08001720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	@ 0x38
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001750:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <MX_TIM2_Init+0xe4>)
 8001752:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <MX_TIM2_Init+0xe4>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <MX_TIM2_Init+0xe4>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <MX_TIM2_Init+0xe4>)
 8001766:	22ff      	movs	r2, #255	@ 0xff
 8001768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <MX_TIM2_Init+0xe4>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <MX_TIM2_Init+0xe4>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001776:	4823      	ldr	r0, [pc, #140]	@ (8001804 <MX_TIM2_Init+0xe4>)
 8001778:	f004 fee6 	bl	8006548 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001782:	f001 fb3b 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800178c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001790:	4619      	mov	r1, r3
 8001792:	481c      	ldr	r0, [pc, #112]	@ (8001804 <MX_TIM2_Init+0xe4>)
 8001794:	f005 fa88 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800179e:	f001 fb2d 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	@ (8001804 <MX_TIM2_Init+0xe4>)
 80017a4:	f004 ffbc 	bl	8006720 <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80017ae:	f001 fb25 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	@ (8001804 <MX_TIM2_Init+0xe4>)
 80017c2:	f005 fe01 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80017cc:	f001 fb16 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	@ 0x60
 80017d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM2_Init+0xe4>)
 80017e8:	f005 f99c 	bl	8006b24 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80017f2:	f001 fb03 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM2_Init+0xe4>)
 80017f8:	f001 ffea 	bl	80037d0 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3738      	adds	r7, #56	@ 0x38
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20001168 	.word	0x20001168

08001808 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001824:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <MX_TIM3_Init+0x94>)
 8001826:	4a1e      	ldr	r2, [pc, #120]	@ (80018a0 <MX_TIM3_Init+0x98>)
 8001828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <MX_TIM3_Init+0x94>)
 800182c:	2247      	movs	r2, #71	@ 0x47
 800182e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <MX_TIM3_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <MX_TIM3_Init+0x94>)
 8001838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <MX_TIM3_Init+0x94>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b15      	ldr	r3, [pc, #84]	@ (800189c <MX_TIM3_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800184a:	4814      	ldr	r0, [pc, #80]	@ (800189c <MX_TIM3_Init+0x94>)
 800184c:	f004 fe7c 	bl	8006548 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001856:	f001 fad1 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	@ (800189c <MX_TIM3_Init+0x94>)
 8001868:	f005 fa1e 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001872:	f001 fac3 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <MX_TIM3_Init+0x94>)
 8001884:	f005 fda0 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800188e:	f001 fab5 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200011b0 	.word	0x200011b0
 80018a0:	40000400 	.word	0x40000400

080018a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <MX_USART1_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018dc:	f005 fde4 	bl	80074a8 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f001 fa89 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000123c 	.word	0x2000123c
 80018f4:	40013800 	.word	0x40013800

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <MX_DMA_Init+0x38>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <MX_DMA_Init+0x38>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <MX_DMA_Init+0x38>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	200f      	movs	r0, #15
 800191c:	f002 fed5 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001920:	200f      	movs	r0, #15
 8001922:	f002 feee 	bl	8004702 <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001948:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 800194e:	f043 0320 	orr.w	r3, r3, #32
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a26      	ldr	r2, [pc, #152]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a20      	ldr	r2, [pc, #128]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <MX_GPIO_Init+0xcc>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	481b      	ldr	r0, [pc, #108]	@ (8001a04 <MX_GPIO_Init+0xd0>)
 8001996:	f003 fa30 	bl	8004dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f640 4103 	movw	r1, #3075	@ 0xc03
 80019a0:	4819      	ldr	r0, [pc, #100]	@ (8001a08 <MX_GPIO_Init+0xd4>)
 80019a2:	f003 fa2a 	bl	8004dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019a6:	231f      	movs	r3, #31
 80019a8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <MX_GPIO_Init+0xd0>)
 80019ba:	f003 f883 	bl	8004ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4619      	mov	r1, r3
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <MX_GPIO_Init+0xd0>)
 80019d6:	f003 f875 	bl	8004ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80019da:	f640 4303 	movw	r3, #3075	@ 0xc03
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_GPIO_Init+0xd4>)
 80019f4:	f003 f866 	bl	8004ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <callback_in>:

/* USER CODE BEGIN 4 */
void callback_in(int tag)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	switch (tag)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d824      	bhi.n	8001a64 <callback_in+0x58>
 8001a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a20 <callback_in+0x14>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a49 	.word	0x08001a49
 8001a2c:	08001a57 	.word	0x08001a57
	{
		case TAG_TASK_TAREA0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); break;
 8001a30:	2201      	movs	r2, #1
 8001a32:	2101      	movs	r1, #1
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <callback_in+0x60>)
 8001a36:	f003 f9e0 	bl	8004dfa <HAL_GPIO_WritePin>
 8001a3a:	e013      	b.n	8001a64 <callback_in+0x58>
		case TAG_TASK_UI: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); break;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2102      	movs	r1, #2
 8001a40:	480a      	ldr	r0, [pc, #40]	@ (8001a6c <callback_in+0x60>)
 8001a42:	f003 f9da 	bl	8004dfa <HAL_GPIO_WritePin>
 8001a46:	e00d      	b.n	8001a64 <callback_in+0x58>
		case TAG_TASK_BORNERA: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); break;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a4e:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <callback_in+0x60>)
 8001a50:	f003 f9d3 	bl	8004dfa <HAL_GPIO_WritePin>
 8001a54:	e006      	b.n	8001a64 <callback_in+0x58>
		case TAG_TASK_DAC: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); break;
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a5c:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <callback_in+0x60>)
 8001a5e:	f003 f9cc 	bl	8004dfa <HAL_GPIO_WritePin>
 8001a62:	bf00      	nop
	}
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010c00 	.word	0x40010c00

08001a70 <callback_out>:
void callback_out(int tag)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	switch (tag)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d824      	bhi.n	8001ac8 <callback_out+0x58>
 8001a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <callback_out+0x14>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001aa1 	.word	0x08001aa1
 8001a8c:	08001aad 	.word	0x08001aad
 8001a90:	08001abb 	.word	0x08001abb
	{
		case TAG_TASK_TAREA0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); break;
 8001a94:	2200      	movs	r2, #0
 8001a96:	2101      	movs	r1, #1
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <callback_out+0x60>)
 8001a9a:	f003 f9ae 	bl	8004dfa <HAL_GPIO_WritePin>
 8001a9e:	e013      	b.n	8001ac8 <callback_out+0x58>
		case TAG_TASK_UI: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); break;
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	480a      	ldr	r0, [pc, #40]	@ (8001ad0 <callback_out+0x60>)
 8001aa6:	f003 f9a8 	bl	8004dfa <HAL_GPIO_WritePin>
 8001aaa:	e00d      	b.n	8001ac8 <callback_out+0x58>
		case TAG_TASK_BORNERA: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); break;
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ab2:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <callback_out+0x60>)
 8001ab4:	f003 f9a1 	bl	8004dfa <HAL_GPIO_WritePin>
 8001ab8:	e006      	b.n	8001ac8 <callback_out+0x58>
		case TAG_TASK_DAC: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); break;
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac0:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <callback_out+0x60>)
 8001ac2:	f003 f99a 	bl	8004dfa <HAL_GPIO_WritePin>
 8001ac6:	bf00      	nop
	}
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <Init_PWM_DMA>:

void Init_PWM_DMA(void)
	{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	480f      	ldr	r0, [pc, #60]	@ (8001b18 <Init_PWM_DMA+0x44>)
 8001adc:	f004 fe78 	bl	80067d0 <HAL_TIM_PWM_Start>
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t) sine_wave,(uint32_t)&(TIM2->CCR1), NSEN);
 8001ae0:	490e      	ldr	r1, [pc, #56]	@ (8001b1c <Init_PWM_DMA+0x48>)
 8001ae2:	2364      	movs	r3, #100	@ 0x64
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <Init_PWM_DMA+0x4c>)
 8001ae6:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <Init_PWM_DMA+0x50>)
 8001ae8:	f002 fe74 	bl	80047d4 <HAL_DMA_Start>
		__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <Init_PWM_DMA+0x54>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <Init_PWM_DMA+0x54>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001afa:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start(&htim1);
 8001afc:	480a      	ldr	r0, [pc, #40]	@ (8001b28 <Init_PWM_DMA+0x54>)
 8001afe:	f004 fd73 	bl	80065e8 <HAL_TIM_Base_Start>

		HAL_TIM_Base_Start(&htim3);
 8001b02:	480a      	ldr	r0, [pc, #40]	@ (8001b2c <Init_PWM_DMA+0x58>)
 8001b04:	f004 fd70 	bl	80065e8 <HAL_TIM_Base_Start>
		HAL_ADCEx_Calibration_Start(&hadc1);  //calibrar el ADC
 8001b08:	4809      	ldr	r0, [pc, #36]	@ (8001b30 <Init_PWM_DMA+0x5c>)
 8001b0a:	f002 fc71 	bl	80043f0 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_IT(&hadc1); // Iniciar ADC con interrupciones
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <Init_PWM_DMA+0x5c>)
 8001b10:	f002 f91c 	bl	8003d4c <HAL_ADC_Start_IT>
	}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20001168 	.word	0x20001168
 8001b1c:	200012b4 	.word	0x200012b4
 8001b20:	40000034 	.word	0x40000034
 8001b24:	200011f8 	.word	0x200011f8
 8001b28:	20001120 	.word	0x20001120
 8001b2c:	200011b0 	.word	0x200011b0
 8001b30:	2000109c 	.word	0x2000109c

08001b34 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	4813      	ldr	r0, [pc, #76]	@ (8001b8c <HAL_ADC_ConvCpltCallback+0x58>)
 8001b40:	f003 f973 	bl	8004e2a <HAL_GPIO_TogglePin>
		adc_buffer[cont] = HAL_ADC_GetValue(&hadc1);
 8001b44:	4812      	ldr	r0, [pc, #72]	@ (8001b90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001b46:	f002 f9eb 	bl	8003f20 <HAL_ADC_GetValue>
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x60>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	b289      	uxth	r1, r1
 8001b54:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_ADC_ConvCpltCallback+0x64>)
 8001b56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		cont ++;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x60>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x60>)
 8001b64:	701a      	strb	r2, [r3, #0]
		if(cont == 255){
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x60>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2bff      	cmp	r3, #255	@ 0xff
 8001b6c:	d10a      	bne.n	8001b84 <HAL_ADC_ConvCpltCallback+0x50>
		HAL_ADC_Stop_IT(&hadc1);
 8001b6e:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001b70:	f002 f9a2 	bl	8003eb8 <HAL_ADC_Stop_IT>
		osSemaphoreRelease(Semaforo1Handle);   // LIBERO SEMAFORO PORQUE TENGO LAS MUESTRAS PARA GRAFICAR
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_ADC_ConvCpltCallback+0x68>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 f8d3 	bl	8007d24 <osSemaphoreRelease>
		cont = 0;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_ADC_ConvCpltCallback+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
		}
	}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	2000109c 	.word	0x2000109c
 8001b94:	20002018 	.word	0x20002018
 8001b98:	20001318 	.word	0x20001318
 8001b9c:	20001290 	.word	0x20001290

08001ba0 <Encoder_UpdatePosition>:


void Encoder_UpdatePosition(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
		static EncoderState encoder_state = ENC_IDLE; 			// VARIABLE ESTATICA
		uint8_t A_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4881      	ldr	r0, [pc, #516]	@ (8001db0 <Encoder_UpdatePosition+0x210>)
 8001baa:	f003 f90f 	bl	8004dcc <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71bb      	strb	r3, [r7, #6]
		uint8_t B_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	487e      	ldr	r0, [pc, #504]	@ (8001db0 <Encoder_UpdatePosition+0x210>)
 8001bb6:	f003 f909 	bl	8004dcc <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	717b      	strb	r3, [r7, #5]
		EncoderEvento encoder_evento;

        // Determinar el nuevo evento del encoder
        switch ((A_state << 1) | B_state)
 8001bbe:	79bb      	ldrb	r3, [r7, #6]
 8001bc0:	005a      	lsls	r2, r3, #1
 8001bc2:	797b      	ldrb	r3, [r7, #5]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	f200 81a3 	bhi.w	8001f12 <Encoder_UpdatePosition+0x372>
 8001bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd4 <Encoder_UpdatePosition+0x34>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001be5 	.word	0x08001be5
 8001bd8:	08001beb 	.word	0x08001beb
 8001bdc:	08001bf1 	.word	0x08001bf1
 8001be0:	08001bf7 	.word	0x08001bf7
        {
            case 0b00:
            	encoder_evento = STATE_A_LOW_B_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	71fb      	strb	r3, [r7, #7]
                break;
 8001be8:	e008      	b.n	8001bfc <Encoder_UpdatePosition+0x5c>
            case 0b01:
            	encoder_evento = STATE_A_LOW_B_HIGH;
 8001bea:	2301      	movs	r3, #1
 8001bec:	71fb      	strb	r3, [r7, #7]
                break;
 8001bee:	e005      	b.n	8001bfc <Encoder_UpdatePosition+0x5c>
            case 0b10:
            	encoder_evento = STATE_A_HIGH_B_LOW;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	71fb      	strb	r3, [r7, #7]
                break;
 8001bf4:	e002      	b.n	8001bfc <Encoder_UpdatePosition+0x5c>
            case 0b11:
            	encoder_evento = STATE_A_HIGH_B_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	71fb      	strb	r3, [r7, #7]
                break;
 8001bfa:	bf00      	nop
            default:
                return;
        }
        switch (encoder_state)
 8001bfc:	4b6d      	ldr	r3, [pc, #436]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	f200 8159 	bhi.w	8001eb8 <Encoder_UpdatePosition+0x318>
 8001c06:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <Encoder_UpdatePosition+0x6c>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c29 	.word	0x08001c29
 8001c10:	08001c65 	.word	0x08001c65
 8001c14:	08001c47 	.word	0x08001c47
 8001c18:	08001c95 	.word	0x08001c95
 8001c1c:	08001d63 	.word	0x08001d63
 8001c20:	08001d93 	.word	0x08001d93
 8001c24:	08001e9b 	.word	0x08001e9b
        {
        	case ENC_IDLE:
        		switch(encoder_evento)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <Encoder_UpdatePosition+0x94>
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d004      	beq.n	8001c3c <Encoder_UpdatePosition+0x9c>
        		{
        			case STATE_A_LOW_B_HIGH: encoder_state = CW01;  break;
        			case STATE_A_HIGH_B_LOW: encoder_state = CCW10; break;
        			default: break;
 8001c32:	e007      	b.n	8001c44 <Encoder_UpdatePosition+0xa4>
        			case STATE_A_LOW_B_HIGH: encoder_state = CW01;  break;
 8001c34:	4b5f      	ldr	r3, [pc, #380]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e003      	b.n	8001c44 <Encoder_UpdatePosition+0xa4>
        			case STATE_A_HIGH_B_LOW: encoder_state = CCW10; break;
 8001c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c3e:	2206      	movs	r2, #6
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	bf00      	nop
        		}
        		break;
 8001c44:	e138      	b.n	8001eb8 <Encoder_UpdatePosition+0x318>
        	case CW01:
        		switch(encoder_evento)
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <Encoder_UpdatePosition+0xb8>
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d107      	bne.n	8001c60 <Encoder_UpdatePosition+0xc0>
        		{
        			case STATE_A_HIGH_B_HIGH: encoder_state = ENC_IDLE; break;
 8001c50:	4b58      	ldr	r3, [pc, #352]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e004      	b.n	8001c62 <Encoder_UpdatePosition+0xc2>
        			case STATE_A_LOW_B_LOW: encoder_state = CW00; break;
 8001c58:	4b56      	ldr	r3, [pc, #344]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e000      	b.n	8001c62 <Encoder_UpdatePosition+0xc2>
        			default: break;
 8001c60:	bf00      	nop
        		}
        		break;
 8001c62:	e129      	b.n	8001eb8 <Encoder_UpdatePosition+0x318>
        	case CW00:
        		switch(encoder_evento)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d006      	beq.n	8001c78 <Encoder_UpdatePosition+0xd8>
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	dc10      	bgt.n	8001c90 <Encoder_UpdatePosition+0xf0>
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d006      	beq.n	8001c80 <Encoder_UpdatePosition+0xe0>
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d008      	beq.n	8001c88 <Encoder_UpdatePosition+0xe8>
        		{
        			case STATE_A_HIGH_B_HIGH: encoder_state = ENC_IDLE; break;
        			case STATE_A_LOW_B_HIGH: encoder_state = CW01; break;
        			case STATE_A_HIGH_B_LOW: encoder_state = CW10; break;
        			default: break;
 8001c76:	e00b      	b.n	8001c90 <Encoder_UpdatePosition+0xf0>
        			case STATE_A_HIGH_B_HIGH: encoder_state = ENC_IDLE; break;
 8001c78:	4b4e      	ldr	r3, [pc, #312]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e008      	b.n	8001c92 <Encoder_UpdatePosition+0xf2>
        			case STATE_A_LOW_B_HIGH: encoder_state = CW01; break;
 8001c80:	4b4c      	ldr	r3, [pc, #304]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e004      	b.n	8001c92 <Encoder_UpdatePosition+0xf2>
        			case STATE_A_HIGH_B_LOW: encoder_state = CW10; break;
 8001c88:	4b4a      	ldr	r3, [pc, #296]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	e000      	b.n	8001c92 <Encoder_UpdatePosition+0xf2>
        			default: break;
 8001c90:	bf00      	nop
        		}
        		break;
 8001c92:	e111      	b.n	8001eb8 <Encoder_UpdatePosition+0x318>
        	case CW10:
        		switch(encoder_evento)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d05d      	beq.n	8001d56 <Encoder_UpdatePosition+0x1b6>
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d15f      	bne.n	8001d5e <Encoder_UpdatePosition+0x1be>
        		{
        			case STATE_A_HIGH_B_HIGH:
        				if(flag_cursor_quieto==0)
 8001c9e:	4b46      	ldr	r3, [pc, #280]	@ (8001db8 <Encoder_UpdatePosition+0x218>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <Encoder_UpdatePosition+0x110>
        				{
        					encoder_position++;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <Encoder_UpdatePosition+0x21c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a43      	ldr	r2, [pc, #268]	@ (8001dbc <Encoder_UpdatePosition+0x21c>)
 8001cae:	6013      	str	r3, [r2, #0]
        				}
        					if (flag_frec == 1)
 8001cb0:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <Encoder_UpdatePosition+0x220>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d115      	bne.n	8001ce6 <Encoder_UpdatePosition+0x146>
        					{
        						frecuencia = frecuencia + 0.1;
 8001cba:	4b42      	ldr	r3, [pc, #264]	@ (8001dc4 <Encoder_UpdatePosition+0x224>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fbb2 	bl	8000428 <__aeabi_f2d>
 8001cc4:	a338      	add	r3, pc, #224	@ (adr r3, 8001da8 <Encoder_UpdatePosition+0x208>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fa4f 	bl	800016c <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe fef7 	bl	8000ac8 <__aeabi_d2f>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a39      	ldr	r2, [pc, #228]	@ (8001dc4 <Encoder_UpdatePosition+0x224>)
 8001cde:	6013      	str	r3, [r2, #0]
        						flag_frec = 0;
 8001ce0:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <Encoder_UpdatePosition+0x220>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
        					}
							if (amplitud < 255 && flag_amp == 1)
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <Encoder_UpdatePosition+0x228>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2bff      	cmp	r3, #255	@ 0xff
 8001cec:	d00d      	beq.n	8001d0a <Encoder_UpdatePosition+0x16a>
 8001cee:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <Encoder_UpdatePosition+0x22c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <Encoder_UpdatePosition+0x16a>
							{
								amplitud ++;
 8001cf8:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <Encoder_UpdatePosition+0x228>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <Encoder_UpdatePosition+0x228>)
 8001d02:	701a      	strb	r2, [r3, #0]
								flag_amp = 0;
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <Encoder_UpdatePosition+0x22c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
							}
        				if(flag_enc == 1)
 8001d0a:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <Encoder_UpdatePosition+0x230>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10c      	bne.n	8001d2c <Encoder_UpdatePosition+0x18c>
        				{
        					encoder_c = (encoder_c + 1) % 2;
 8001d12:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <Encoder_UpdatePosition+0x234>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	bfb8      	it	lt
 8001d20:	425b      	neglt	r3, r3
 8001d22:	4a2c      	ldr	r2, [pc, #176]	@ (8001dd4 <Encoder_UpdatePosition+0x234>)
 8001d24:	6013      	str	r3, [r2, #0]
        					flag_enc = 0;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <Encoder_UpdatePosition+0x230>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
        				}
        				if(flag_uart == 1)
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <Encoder_UpdatePosition+0x238>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10c      	bne.n	8001d4e <Encoder_UpdatePosition+0x1ae>
        				{
        					enc_uart = (enc_uart + 1) % 2;;
 8001d34:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <Encoder_UpdatePosition+0x23c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	bfb8      	it	lt
 8001d42:	425b      	neglt	r3, r3
 8001d44:	4a25      	ldr	r2, [pc, #148]	@ (8001ddc <Encoder_UpdatePosition+0x23c>)
 8001d46:	6013      	str	r3, [r2, #0]
        					flag_uart = 0;
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <Encoder_UpdatePosition+0x238>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
        				}
        				encoder_state = ENC_IDLE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
        			break;
 8001d54:	e004      	b.n	8001d60 <Encoder_UpdatePosition+0x1c0>
        			case STATE_A_LOW_B_LOW: encoder_state = CW00; break;
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e000      	b.n	8001d60 <Encoder_UpdatePosition+0x1c0>
        			default: break;
 8001d5e:	bf00      	nop
        		}
        		break;
 8001d60:	e0aa      	b.n	8001eb8 <Encoder_UpdatePosition+0x318>
        	case CCW00:
        		switch(encoder_evento)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d006      	beq.n	8001d76 <Encoder_UpdatePosition+0x1d6>
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	dc10      	bgt.n	8001d8e <Encoder_UpdatePosition+0x1ee>
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d006      	beq.n	8001d7e <Encoder_UpdatePosition+0x1de>
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <Encoder_UpdatePosition+0x1e6>
        		{
        			case STATE_A_HIGH_B_HIGH: encoder_state = ENC_IDLE;  break;
        			case STATE_A_LOW_B_HIGH: encoder_state = CCW01; break;
        			case STATE_A_HIGH_B_LOW: encoder_state = CCW10; break;
        			default: break;
 8001d74:	e00b      	b.n	8001d8e <Encoder_UpdatePosition+0x1ee>
        			case STATE_A_HIGH_B_HIGH: encoder_state = ENC_IDLE;  break;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e008      	b.n	8001d90 <Encoder_UpdatePosition+0x1f0>
        			case STATE_A_LOW_B_HIGH: encoder_state = CCW01; break;
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001d80:	2205      	movs	r2, #5
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e004      	b.n	8001d90 <Encoder_UpdatePosition+0x1f0>
        			case STATE_A_HIGH_B_LOW: encoder_state = CCW10; break;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001d88:	2206      	movs	r2, #6
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e000      	b.n	8001d90 <Encoder_UpdatePosition+0x1f0>
        			default: break;
 8001d8e:	bf00      	nop
        		}
        		break;
 8001d90:	e092      	b.n	8001eb8 <Encoder_UpdatePosition+0x318>
        	case CCW01:
        		switch(encoder_evento)
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <Encoder_UpdatePosition+0x1fe>
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d021      	beq.n	8001de0 <Encoder_UpdatePosition+0x240>
        					flag_uart = 0;
        				}

        				encoder_state = ENC_IDLE;
        			break;
        			default: break;
 8001d9c:	e07c      	b.n	8001e98 <Encoder_UpdatePosition+0x2f8>
        			case STATE_A_LOW_B_LOW: encoder_state = CCW00; break;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <Encoder_UpdatePosition+0x214>)
 8001da0:	2204      	movs	r2, #4
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e078      	b.n	8001e98 <Encoder_UpdatePosition+0x2f8>
 8001da6:	bf00      	nop
 8001da8:	9999999a 	.word	0x9999999a
 8001dac:	3fb99999 	.word	0x3fb99999
 8001db0:	40010800 	.word	0x40010800
 8001db4:	20002022 	.word	0x20002022
 8001db8:	200012ac 	.word	0x200012ac
 8001dbc:	200012a4 	.word	0x200012a4
 8001dc0:	200012b0 	.word	0x200012b0
 8001dc4:	2000100c 	.word	0x2000100c
 8001dc8:	20001009 	.word	0x20001009
 8001dcc:	200012b1 	.word	0x200012b1
 8001dd0:	200012b2 	.word	0x200012b2
 8001dd4:	20001298 	.word	0x20001298
 8001dd8:	200012b3 	.word	0x200012b3
 8001ddc:	2000129c 	.word	0x2000129c
        				if(flag_cursor_quieto==0)
 8001de0:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <Encoder_UpdatePosition+0x388>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <Encoder_UpdatePosition+0x252>
        					encoder_position--;
 8001de8:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <Encoder_UpdatePosition+0x38c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <Encoder_UpdatePosition+0x38c>)
 8001df0:	6013      	str	r3, [r2, #0]
        					if (flag_frec == 1)
 8001df2:	4b4f      	ldr	r3, [pc, #316]	@ (8001f30 <Encoder_UpdatePosition+0x390>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d115      	bne.n	8001e28 <Encoder_UpdatePosition+0x288>
        						frecuencia = frecuencia - 0.1;
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <Encoder_UpdatePosition+0x394>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb11 	bl	8000428 <__aeabi_f2d>
 8001e06:	a346      	add	r3, pc, #280	@ (adr r3, 8001f20 <Encoder_UpdatePosition+0x380>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe f9ac 	bl	8000168 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fe56 	bl	8000ac8 <__aeabi_d2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a45      	ldr	r2, [pc, #276]	@ (8001f34 <Encoder_UpdatePosition+0x394>)
 8001e20:	6013      	str	r3, [r2, #0]
        						flag_frec = 0;
 8001e22:	4b43      	ldr	r3, [pc, #268]	@ (8001f30 <Encoder_UpdatePosition+0x390>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
							if(amplitud > 0 && flag_amp == 1)
 8001e28:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <Encoder_UpdatePosition+0x398>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <Encoder_UpdatePosition+0x2ac>
 8001e30:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <Encoder_UpdatePosition+0x39c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <Encoder_UpdatePosition+0x2ac>
								amplitud -- ;
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <Encoder_UpdatePosition+0x398>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <Encoder_UpdatePosition+0x398>)
 8001e44:	701a      	strb	r2, [r3, #0]
								flag_amp = 0;
 8001e46:	4b3d      	ldr	r3, [pc, #244]	@ (8001f3c <Encoder_UpdatePosition+0x39c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
        				if(flag_enc == 1)
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f40 <Encoder_UpdatePosition+0x3a0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10c      	bne.n	8001e6e <Encoder_UpdatePosition+0x2ce>
        					encoder_c = (encoder_c + 1) % 2;
 8001e54:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <Encoder_UpdatePosition+0x3a4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	bfb8      	it	lt
 8001e62:	425b      	neglt	r3, r3
 8001e64:	4a37      	ldr	r2, [pc, #220]	@ (8001f44 <Encoder_UpdatePosition+0x3a4>)
 8001e66:	6013      	str	r3, [r2, #0]
        					flag_enc = 0;
 8001e68:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <Encoder_UpdatePosition+0x3a0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
        				if(flag_uart == 1)
 8001e6e:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <Encoder_UpdatePosition+0x3a8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10c      	bne.n	8001e90 <Encoder_UpdatePosition+0x2f0>
        					enc_uart = (enc_uart + 1) % 2;;
 8001e76:	4b35      	ldr	r3, [pc, #212]	@ (8001f4c <Encoder_UpdatePosition+0x3ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	bfb8      	it	lt
 8001e84:	425b      	neglt	r3, r3
 8001e86:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <Encoder_UpdatePosition+0x3ac>)
 8001e88:	6013      	str	r3, [r2, #0]
        					flag_uart = 0;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <Encoder_UpdatePosition+0x3a8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
        				encoder_state = ENC_IDLE;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <Encoder_UpdatePosition+0x3b0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
        			break;
 8001e96:	bf00      	nop
        		}
        		break;
 8001e98:	e00e      	b.n	8001eb8 <Encoder_UpdatePosition+0x318>
        	case CCW10:
        		switch(encoder_evento)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <Encoder_UpdatePosition+0x30c>
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d107      	bne.n	8001eb4 <Encoder_UpdatePosition+0x314>
        		{
        			case STATE_A_HIGH_B_HIGH: encoder_state = ENC_IDLE;  break;
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <Encoder_UpdatePosition+0x3b0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e004      	b.n	8001eb6 <Encoder_UpdatePosition+0x316>
        			case STATE_A_LOW_B_LOW: encoder_state = CCW00; break;
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <Encoder_UpdatePosition+0x3b0>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e000      	b.n	8001eb6 <Encoder_UpdatePosition+0x316>
        			default: break;
 8001eb4:	bf00      	nop
        		}
        		break;
 8001eb6:	bf00      	nop
            }
        // LIMITO VALOR 0 y 128 (TAMAÑO DE LA PANTALLA)
        if (encoder_position < 0)
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <Encoder_UpdatePosition+0x38c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da03      	bge.n	8001ec8 <Encoder_UpdatePosition+0x328>
        {
        	encoder_position = 0;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <Encoder_UpdatePosition+0x38c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e006      	b.n	8001ed6 <Encoder_UpdatePosition+0x336>
        }
        else if (encoder_position > 127)
 8001ec8:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <Encoder_UpdatePosition+0x38c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ece:	dd02      	ble.n	8001ed6 <Encoder_UpdatePosition+0x336>
        {
        	encoder_position = 127;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <Encoder_UpdatePosition+0x38c>)
 8001ed2:	227f      	movs	r2, #127	@ 0x7f
 8001ed4:	601a      	str	r2, [r3, #0]
        }

        // LIMITO VALOR ENTRE 10 y 500
        if (frecuencia < 0.1)
 8001ed6:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <Encoder_UpdatePosition+0x394>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe faa4 	bl	8000428 <__aeabi_f2d>
 8001ee0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001f20 <Encoder_UpdatePosition+0x380>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fd69 	bl	80009bc <__aeabi_dcmplt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <Encoder_UpdatePosition+0x358>
        {
        	frecuencia = 0.1;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <Encoder_UpdatePosition+0x394>)
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <Encoder_UpdatePosition+0x3b4>)
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e00d      	b.n	8001f14 <Encoder_UpdatePosition+0x374>
        }
        else if (frecuencia > 50)
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <Encoder_UpdatePosition+0x394>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4916      	ldr	r1, [pc, #88]	@ (8001f58 <Encoder_UpdatePosition+0x3b8>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f8fc 	bl	80010fc <__aeabi_fcmpgt>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <Encoder_UpdatePosition+0x374>
        {
        	frecuencia = 50;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <Encoder_UpdatePosition+0x394>)
 8001f0c:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <Encoder_UpdatePosition+0x3b8>)
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e000      	b.n	8001f14 <Encoder_UpdatePosition+0x374>
                return;
 8001f12:	bf00      	nop
        }
}
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	9999999a 	.word	0x9999999a
 8001f24:	3fb99999 	.word	0x3fb99999
 8001f28:	200012ac 	.word	0x200012ac
 8001f2c:	200012a4 	.word	0x200012a4
 8001f30:	200012b0 	.word	0x200012b0
 8001f34:	2000100c 	.word	0x2000100c
 8001f38:	20001009 	.word	0x20001009
 8001f3c:	200012b1 	.word	0x200012b1
 8001f40:	200012b2 	.word	0x200012b2
 8001f44:	20001298 	.word	0x20001298
 8001f48:	200012b3 	.word	0x200012b3
 8001f4c:	2000129c 	.word	0x2000129c
 8001f50:	20002022 	.word	0x20002022
 8001f54:	3dcccccd 	.word	0x3dcccccd
 8001f58:	42480000 	.word	0x42480000

08001f5c <SSD1306_FillArea>:

void SSD1306_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t color)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4604      	mov	r4, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	80fb      	strh	r3, [r7, #6]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80bb      	strh	r3, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	807b      	strh	r3, [r7, #2]
 8001f76:	4613      	mov	r3, r2
 8001f78:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = x; i < x + w; i++)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	81fb      	strh	r3, [r7, #14]
 8001f7e:	e015      	b.n	8001fac <SSD1306_FillArea+0x50>
    {
        for (uint16_t j = y; j < y + h; j++)
 8001f80:	88bb      	ldrh	r3, [r7, #4]
 8001f82:	81bb      	strh	r3, [r7, #12]
 8001f84:	e009      	b.n	8001f9a <SSD1306_FillArea+0x3e>
        {
            SSD1306_DrawPixel(i, j, color);
 8001f86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f8a:	89b9      	ldrh	r1, [r7, #12]
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f844 	bl	800301c <SSD1306_DrawPixel>
        for (uint16_t j = y; j < y + h; j++)
 8001f94:	89bb      	ldrh	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	81bb      	strh	r3, [r7, #12]
 8001f9a:	89ba      	ldrh	r2, [r7, #12]
 8001f9c:	88b9      	ldrh	r1, [r7, #4]
 8001f9e:	883b      	ldrh	r3, [r7, #0]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbef      	blt.n	8001f86 <SSD1306_FillArea+0x2a>
    for (uint16_t i = x; i < x + w; i++)
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	81fb      	strh	r3, [r7, #14]
 8001fac:	89fa      	ldrh	r2, [r7, #14]
 8001fae:	88f9      	ldrh	r1, [r7, #6]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	440b      	add	r3, r1
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbe3      	blt.n	8001f80 <SSD1306_FillArea+0x24>
        }
    }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	0000      	movs	r0, r0
 8001fc4:	0000      	movs	r0, r0
	...

08001fc8 <DibujarFFT>:

void DibujarFFT(float *data)
	{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
		uint8_t prevY = 63 - (uint8_t)(data[0]*38.1818);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa27 	bl	8000428 <__aeabi_f2d>
 8001fda:	a329      	add	r3, pc, #164	@ (adr r3, 8002080 <DibujarFFT+0xb8>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fa7a 	bl	80004d8 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fd4c 	bl	8000a88 <__aeabi_d2uiz>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001ff8:	75fb      	strb	r3, [r7, #23]
		if (prevY < 0) prevY = 0;
		if (prevY > 63) prevY = 63;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ffe:	d901      	bls.n	8002004 <DibujarFFT+0x3c>
 8002000:	233f      	movs	r3, #63	@ 0x3f
 8002002:	75fb      	strb	r3, [r7, #23]
		for (int x = 1; x < 128; x++){
 8002004:	2301      	movs	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	e02f      	b.n	800206a <DibujarFFT+0xa2>
			uint8_t y = 63 - (uint8_t)(data[x]*38.1818);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa07 	bl	8000428 <__aeabi_f2d>
 800201a:	a319      	add	r3, pc, #100	@ (adr r3, 8002080 <DibujarFFT+0xb8>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fa5a 	bl	80004d8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fd2c 	bl	8000a88 <__aeabi_d2uiz>
 8002030:	4603      	mov	r3, r0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8002038:	73fb      	strb	r3, [r7, #15]
			if (y < 0) y = 0;
			if (y > 63) y = 63;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b3f      	cmp	r3, #63	@ 0x3f
 800203e:	d901      	bls.n	8002044 <DibujarFFT+0x7c>
 8002040:	233f      	movs	r3, #63	@ 0x3f
 8002042:	73fb      	strb	r3, [r7, #15]
			SSD1306_DrawLine(x-1, prevY, x, y, SSD1306_COLOR_WHITE);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b298      	uxth	r0, r3
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	b299      	uxth	r1, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	b29a      	uxth	r2, r3
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	b29b      	uxth	r3, r3
 8002058:	2401      	movs	r4, #1
 800205a:	9400      	str	r4, [sp, #0]
 800205c:	f001 f8f5 	bl	800324a <SSD1306_DrawLine>
			prevY = y;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	75fb      	strb	r3, [r7, #23]
		for (int x = 1; x < 128; x++){
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	3301      	adds	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b7f      	cmp	r3, #127	@ 0x7f
 800206e:	ddcc      	ble.n	800200a <DibujarFFT+0x42>
		}
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	38ef34d7 	.word	0x38ef34d7
 8002084:	40431745 	.word	0x40431745

08002088 <StartBorneraTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBorneraTask */
void StartBorneraTask(void *argument)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	vTaskSetApplicationTaskTag( NULL, (void*) TAG_TASK_BORNERA);
 8002090:	2102      	movs	r1, #2
 8002092:	2000      	movs	r0, #0
 8002094:	f007 fb80 	bl	8009798 <vTaskSetApplicationTaskTag>
  /* Infinite loop */
  for(;;)
  {
	  Encoder_UpdatePosition();
 8002098:	f7ff fd82 	bl	8001ba0 <Encoder_UpdatePosition>
	  //LOGICA BOTON ENCODER
	  static uint32_t last_screen_change_time = 0;
	  uint32_t current_time_screen = HAL_GetTick();
 800209c:	f001 fd74 	bl	8003b88 <HAL_GetTick>
 80020a0:	6178      	str	r0, [r7, #20]
	  if ((current_time_screen - last_screen_change_time) > 200){
 80020a2:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <StartBorneraTask+0xf8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80020ac:	d919      	bls.n	80020e2 <StartBorneraTask+0x5a>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET){
 80020ae:	2108      	movs	r1, #8
 80020b0:	4834      	ldr	r0, [pc, #208]	@ (8002184 <StartBorneraTask+0xfc>)
 80020b2:	f002 fe8b 	bl	8004dcc <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d112      	bne.n	80020e2 <StartBorneraTask+0x5a>
	  			  Screen = (Screen + 1) % 3;
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <StartBorneraTask+0x100>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	4b31      	ldr	r3, [pc, #196]	@ (800218c <StartBorneraTask+0x104>)
 80020c6:	fb83 3102 	smull	r3, r1, r3, r2
 80020ca:	17d3      	asrs	r3, r2, #31
 80020cc:	1ac9      	subs	r1, r1, r3
 80020ce:	460b      	mov	r3, r1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	440b      	add	r3, r1
 80020d4:	1ad1      	subs	r1, r2, r3
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <StartBorneraTask+0x100>)
 80020da:	701a      	strb	r2, [r3, #0]
	  			  last_screen_change_time = current_time_screen;
 80020dc:	4a28      	ldr	r2, [pc, #160]	@ (8002180 <StartBorneraTask+0xf8>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6013      	str	r3, [r2, #0]
		  }
	  }
	  //LOGICA BOTON CONFSUB
	  static uint32_t last_conf_change_time = 0;
	  uint32_t current_time_conf = HAL_GetTick();
 80020e2:	f001 fd51 	bl	8003b88 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]
	  if ((current_time_conf - last_conf_change_time) > 200){
 80020e8:	4b29      	ldr	r3, [pc, #164]	@ (8002190 <StartBorneraTask+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80020f2:	d917      	bls.n	8002124 <StartBorneraTask+0x9c>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 80020f4:	2104      	movs	r1, #4
 80020f6:	4823      	ldr	r0, [pc, #140]	@ (8002184 <StartBorneraTask+0xfc>)
 80020f8:	f002 fe68 	bl	8004dcc <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d110      	bne.n	8002124 <StartBorneraTask+0x9c>
	  		  {
	  			  ConfSub = (ConfSub + 1) % 4;
 8002102:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <StartBorneraTask+0x10c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	425a      	negs	r2, r3
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	bf58      	it	pl
 8002116:	4253      	negpl	r3, r2
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <StartBorneraTask+0x10c>)
 800211c:	701a      	strb	r2, [r3, #0]
	  			  last_conf_change_time = current_time_conf;
 800211e:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <StartBorneraTask+0x108>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6013      	str	r3, [r2, #0]
	  		  }
	  }
	  static uint32_t last_conf2_change_time = 0;
	  uint32_t current_time_conf2 = HAL_GetTick();
 8002124:	f001 fd30 	bl	8003b88 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]
	  if ((current_time_conf2 - last_conf2_change_time) > 200){
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <StartBorneraTask+0x110>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2bc8      	cmp	r3, #200	@ 0xc8
 8002134:	d915      	bls.n	8002162 <StartBorneraTask+0xda>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){
 8002136:	2110      	movs	r1, #16
 8002138:	4812      	ldr	r0, [pc, #72]	@ (8002184 <StartBorneraTask+0xfc>)
 800213a:	f002 fe47 	bl	8004dcc <HAL_GPIO_ReadPin>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10e      	bne.n	8002162 <StartBorneraTask+0xda>
	  			  Boton2 = (Boton2 + 1) % 2;
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <StartBorneraTask+0x114>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3301      	adds	r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	bfb8      	it	lt
 8002154:	425b      	neglt	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <StartBorneraTask+0x114>)
 800215a:	701a      	strb	r2, [r3, #0]
	  			  last_conf2_change_time = current_time_conf2;
 800215c:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <StartBorneraTask+0x110>)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6013      	str	r3, [r2, #0]
		  }
	  }
	  FreeBornera= 4*osThreadGetStackSpace(BorneraHandle);
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <StartBorneraTask+0x118>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fc7e 	bl	8007a68 <osThreadGetStackSpace>
 800216c:	4603      	mov	r3, r0
 800216e:	b29b      	uxth	r3, r3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <StartBorneraTask+0x11c>)
 8002176:	801a      	strh	r2, [r3, #0]
	  osDelay(1);
 8002178:	2001      	movs	r0, #1
 800217a:	f005 fca3 	bl	8007ac4 <osDelay>
  {
 800217e:	e78b      	b.n	8002098 <StartBorneraTask+0x10>
 8002180:	20002024 	.word	0x20002024
 8002184:	40010800 	.word	0x40010800
 8002188:	20001008 	.word	0x20001008
 800218c:	55555556 	.word	0x55555556
 8002190:	20002028 	.word	0x20002028
 8002194:	20001294 	.word	0x20001294
 8002198:	2000202c 	.word	0x2000202c
 800219c:	20001295 	.word	0x20001295
 80021a0:	20001284 	.word	0x20001284
 80021a4:	2000201a 	.word	0x2000201a

080021a8 <StartTaskUI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUI */
void StartTaskUI(void *argument)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b0a9      	sub	sp, #164	@ 0xa4
 80021ac:	af04      	add	r7, sp, #16
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUI */
	vTaskSetApplicationTaskTag( NULL, (void*) TAG_TASK_UI);
 80021b0:	2101      	movs	r1, #1
 80021b2:	2000      	movs	r0, #0
 80021b4:	f007 faf0 	bl	8009798 <vTaskSetApplicationTaskTag>
	char frecuencia_display[4];
	char amplitud_display[6];
	char fft_buffer_display[50];
	char amplitud_pantalla[6];
	char frec_pantalla[6];
	int integerPart_A=0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	int decimalPart_A=0;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	int integerPart_F=0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	int decimalPart_F=0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	int decimalPart;

  /* Infinite loop */
  for(;;)
  {
	SSD1306_Fill(0);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 ff0b 	bl	8002fec <SSD1306_Fill>
	flag_enc = 0;
 80021d6:	4b72      	ldr	r3, [pc, #456]	@ (80023a0 <StartTaskUI+0x1f8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
	flag_uart = 0;
 80021dc:	4b71      	ldr	r3, [pc, #452]	@ (80023a4 <StartTaskUI+0x1fc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
	flag_frec = 0;
 80021e2:	4b71      	ldr	r3, [pc, #452]	@ (80023a8 <StartTaskUI+0x200>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
	flag_amp = 0;
 80021e8:	4b70      	ldr	r3, [pc, #448]	@ (80023ac <StartTaskUI+0x204>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
	integerPart = (amplitud*330/255) / 100;
 80021ee:	4b70      	ldr	r3, [pc, #448]	@ (80023b0 <StartTaskUI+0x208>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a6d      	ldr	r2, [pc, #436]	@ (80023b4 <StartTaskUI+0x20c>)
 80021fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002202:	1312      	asrs	r2, r2, #12
 8002204:	17db      	asrs	r3, r3, #31
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	673b      	str	r3, [r7, #112]	@ 0x70
	decimalPart = (amplitud*330/255) % 100;
 800220a:	4b69      	ldr	r3, [pc, #420]	@ (80023b0 <StartTaskUI+0x208>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	4a67      	ldr	r2, [pc, #412]	@ (80023b8 <StartTaskUI+0x210>)
 800221a:	fb82 1203 	smull	r1, r2, r2, r3
 800221e:	441a      	add	r2, r3
 8002220:	11d2      	asrs	r2, r2, #7
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <StartTaskUI+0x214>)
 8002228:	fb82 1203 	smull	r1, r2, r2, r3
 800222c:	1151      	asrs	r1, r2, #5
 800222e:	17da      	asrs	r2, r3, #31
 8002230:	1a8a      	subs	r2, r1, r2
 8002232:	2164      	movs	r1, #100	@ 0x64
 8002234:	fb01 f202 	mul.w	r2, r1, r2
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	itoa(frecuencia*10, frecuencia_display, 10);	//ACA LA FRECUENCIA PASA A SER 50 , MULTIPLICO POR 10 Y GUARDO EN ARREGLO
 800223c:	4b60      	ldr	r3, [pc, #384]	@ (80023c0 <StartTaskUI+0x218>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4960      	ldr	r1, [pc, #384]	@ (80023c4 <StartTaskUI+0x21c>)
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fd9e 	bl	8000d84 <__aeabi_fmul>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff60 	bl	8001110 <__aeabi_f2iz>
 8002250:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002254:	220a      	movs	r2, #10
 8002256:	4619      	mov	r1, r3
 8002258:	f008 fe7a 	bl	800af50 <itoa>
	switch(Screen)
 800225c:	4b5a      	ldr	r3, [pc, #360]	@ (80023c8 <StartTaskUI+0x220>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	f000 8432 	beq.w	8002acc <StartTaskUI+0x924>
 8002268:	2b02      	cmp	r3, #2
 800226a:	f300 84dc 	bgt.w	8002c26 <StartTaskUI+0xa7e>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <StartTaskUI+0xd4>
 8002272:	2b01      	cmp	r3, #1
 8002274:	f000 81d8 	beq.w	8002628 <StartTaskUI+0x480>
 8002278:	f000 bcd5 	b.w	8002c26 <StartTaskUI+0xa7e>
	{
	   case 0:
		if (osSemaphoreAcquire(Semaforo1Handle, 1000) == osOK){
 800227c:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <StartTaskUI+0x224>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002284:	4618      	mov	r0, r3
 8002286:	f005 fce7 	bl	8007c58 <osSemaphoreAcquire>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 8107 	bne.w	80024a0 <StartTaskUI+0x2f8>
	  		for (int i = 0; i < BUFFER_SIZE; i++){
 8002292:	2300      	movs	r3, #0
 8002294:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002296:	e029      	b.n	80022ec <StartTaskUI+0x144>
	  			fft[i].real = adc_buffer[i] * 3.3 / 4096.0; //ESCALAMIENTO ADC 12 BITS
 8002298:	4a4d      	ldr	r2, [pc, #308]	@ (80023d0 <StartTaskUI+0x228>)
 800229a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800229c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f8af 	bl	8000404 <__aeabi_i2d>
 80022a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8002398 <StartTaskUI+0x1f0>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fe f914 	bl	80004d8 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <StartTaskUI+0x22c>)
 80022be:	f7fe fa35 	bl	800072c <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fbfd 	bl	8000ac8 <__aeabi_d2f>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4941      	ldr	r1, [pc, #260]	@ (80023d8 <StartTaskUI+0x230>)
 80022d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  			fft[i].imag = 0;
 80022d8:	4a3f      	ldr	r2, [pc, #252]	@ (80023d8 <StartTaskUI+0x230>)
 80022da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
	  		for (int i = 0; i < BUFFER_SIZE; i++){
 80022e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e8:	3301      	adds	r3, #1
 80022ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022ee:	2bff      	cmp	r3, #255	@ 0xff
 80022f0:	ddd2      	ble.n	8002298 <StartTaskUI+0xf0>
	  		}
	  		FFT(fft, BUFFER_SIZE);
 80022f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022f6:	4838      	ldr	r0, [pc, #224]	@ (80023d8 <StartTaskUI+0x230>)
 80022f8:	f7fe ff50 	bl	800119c <FFT>
	  		for(int i = 0; i < 128; i++){
 80022fc:	2300      	movs	r3, #0
 80022fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002300:	e0bf      	b.n	8002482 <StartTaskUI+0x2da>
	  			if(i != 0 && i != 128){
 8002302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002304:	2b00      	cmp	r3, #0
 8002306:	d06d      	beq.n	80023e4 <StartTaskUI+0x23c>
 8002308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800230a:	2b80      	cmp	r3, #128	@ 0x80
 800230c:	d06a      	beq.n	80023e4 <StartTaskUI+0x23c>
	  			fft_R[i] = (sqrt(fft[i].real*fft[i].real+fft[i].imag*fft[i].imag)/256)*2; //ESCALAMIENTO DESPUES DE HACER LA FFT
 800230e:	4a32      	ldr	r2, [pc, #200]	@ (80023d8 <StartTaskUI+0x230>)
 8002310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002312:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002316:	4930      	ldr	r1, [pc, #192]	@ (80023d8 <StartTaskUI+0x230>)
 8002318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800231a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f7fe fd2f 	bl	8000d84 <__aeabi_fmul>
 8002326:	4603      	mov	r3, r0
 8002328:	461c      	mov	r4, r3
 800232a:	4a2b      	ldr	r2, [pc, #172]	@ (80023d8 <StartTaskUI+0x230>)
 800232c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4928      	ldr	r1, [pc, #160]	@ (80023d8 <StartTaskUI+0x230>)
 8002336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f7fe fd1f 	bl	8000d84 <__aeabi_fmul>
 8002346:	4603      	mov	r3, r0
 8002348:	4619      	mov	r1, r3
 800234a:	4620      	mov	r0, r4
 800234c:	f7fe fc12 	bl	8000b74 <__addsf3>
 8002350:	4603      	mov	r3, r0
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f868 	bl	8000428 <__aeabi_f2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f009 fb54 	bl	800ba0c <sqrt>
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <StartTaskUI+0x234>)
 800236a:	f7fe f9df 	bl	800072c <__aeabi_ddiv>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	f7fd fef7 	bl	800016c <__adddf3>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7fe fb9f 	bl	8000ac8 <__aeabi_d2f>
 800238a:	4602      	mov	r2, r0
 800238c:	4914      	ldr	r1, [pc, #80]	@ (80023e0 <StartTaskUI+0x238>)
 800238e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002394:	e061      	b.n	800245a <StartTaskUI+0x2b2>
 8002396:	bf00      	nop
 8002398:	66666666 	.word	0x66666666
 800239c:	400a6666 	.word	0x400a6666
 80023a0:	200012b2 	.word	0x200012b2
 80023a4:	200012b3 	.word	0x200012b3
 80023a8:	200012b0 	.word	0x200012b0
 80023ac:	200012b1 	.word	0x200012b1
 80023b0:	20001009 	.word	0x20001009
 80023b4:	291ee171 	.word	0x291ee171
 80023b8:	80808081 	.word	0x80808081
 80023bc:	51eb851f 	.word	0x51eb851f
 80023c0:	2000100c 	.word	0x2000100c
 80023c4:	41200000 	.word	0x41200000
 80023c8:	20001008 	.word	0x20001008
 80023cc:	20001290 	.word	0x20001290
 80023d0:	20001318 	.word	0x20001318
 80023d4:	40b00000 	.word	0x40b00000
 80023d8:	20001518 	.word	0x20001518
 80023dc:	40700000 	.word	0x40700000
 80023e0:	20001d18 	.word	0x20001d18
	  			}
	  			else{
	  			fft_R[i] = (sqrt(fft[i].real*fft[i].real+fft[i].imag*fft[i].imag)/256);
 80023e4:	4aaf      	ldr	r2, [pc, #700]	@ (80026a4 <StartTaskUI+0x4fc>)
 80023e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80023ec:	49ad      	ldr	r1, [pc, #692]	@ (80026a4 <StartTaskUI+0x4fc>)
 80023ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f7fe fcc4 	bl	8000d84 <__aeabi_fmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461c      	mov	r4, r3
 8002400:	4aa8      	ldr	r2, [pc, #672]	@ (80026a4 <StartTaskUI+0x4fc>)
 8002402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	49a6      	ldr	r1, [pc, #664]	@ (80026a4 <StartTaskUI+0x4fc>)
 800240c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f7fe fcb4 	bl	8000d84 <__aeabi_fmul>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe fba7 	bl	8000b74 <__addsf3>
 8002426:	4603      	mov	r3, r0
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd fffd 	bl	8000428 <__aeabi_f2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f009 fae9 	bl	800ba0c <sqrt>
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	4b9a      	ldr	r3, [pc, #616]	@ (80026a8 <StartTaskUI+0x500>)
 8002440:	f7fe f974 	bl	800072c <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe fb3c 	bl	8000ac8 <__aeabi_d2f>
 8002450:	4602      	mov	r2, r0
 8002452:	4996      	ldr	r1, [pc, #600]	@ (80026ac <StartTaskUI+0x504>)
 8002454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			}

	  			f[i] = 10000*i/255;	//¿ PORQUE ESTA CUENTA ?
 800245a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800245c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	4a92      	ldr	r2, [pc, #584]	@ (80026b0 <StartTaskUI+0x508>)
 8002466:	fb82 1203 	smull	r1, r2, r2, r3
 800246a:	441a      	add	r2, r3
 800246c:	11d2      	asrs	r2, r2, #7
 800246e:	17db      	asrs	r3, r3, #31
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	b299      	uxth	r1, r3
 8002474:	4a8f      	ldr	r2, [pc, #572]	@ (80026b4 <StartTaskUI+0x50c>)
 8002476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  		for(int i = 0; i < 128; i++){
 800247c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800247e:	3301      	adds	r3, #1
 8002480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002484:	2b7f      	cmp	r3, #127	@ 0x7f
 8002486:	f77f af3c 	ble.w	8002302 <StartTaskUI+0x15a>
	  		}
	  		DibujarFFT(fft_R);
 800248a:	4888      	ldr	r0, [pc, #544]	@ (80026ac <StartTaskUI+0x504>)
 800248c:	f7ff fd9c 	bl	8001fc8 <DibujarFFT>
	  		HAL_ADC_Start_IT(&hadc1); // ¿ EN QUE MOMENTO SE APAGA LA INTERRUPCION ?
 8002490:	4889      	ldr	r0, [pc, #548]	@ (80026b8 <StartTaskUI+0x510>)
 8002492:	f001 fc5b 	bl	8003d4c <HAL_ADC_Start_IT>
	  		osSemaphoreRelease(Semaforo1Handle); // PARA MI COMPLETAMENTE DE MAS ESTE SEMAFORO.
 8002496:	4b89      	ldr	r3, [pc, #548]	@ (80026bc <StartTaskUI+0x514>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f005 fc42 	bl	8007d24 <osSemaphoreRelease>
	  	}
		//MUESTRA EN PANTALLA LA CONFIGURACION DEL CURSOR
		integerPart_A = abs(fft_R[encoder_position]*1000) / 1000;
 80024a0:	4b87      	ldr	r3, [pc, #540]	@ (80026c0 <StartTaskUI+0x518>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a81      	ldr	r2, [pc, #516]	@ (80026ac <StartTaskUI+0x504>)
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	4986      	ldr	r1, [pc, #536]	@ (80026c4 <StartTaskUI+0x51c>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fc69 	bl	8000d84 <__aeabi_fmul>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fe2b 	bl	8001110 <__aeabi_f2iz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bfb8      	it	lt
 80024c0:	425b      	neglt	r3, r3
 80024c2:	4a81      	ldr	r2, [pc, #516]	@ (80026c8 <StartTaskUI+0x520>)
 80024c4:	fb82 1203 	smull	r1, r2, r2, r3
 80024c8:	1192      	asrs	r2, r2, #6
 80024ca:	17db      	asrs	r3, r3, #31
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  	decimalPart_A = abs(fft_R[encoder_position]*1000) % 1000;
 80024d2:	4b7b      	ldr	r3, [pc, #492]	@ (80026c0 <StartTaskUI+0x518>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	@ (80026ac <StartTaskUI+0x504>)
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	4979      	ldr	r1, [pc, #484]	@ (80026c4 <StartTaskUI+0x51c>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fc50 	bl	8000d84 <__aeabi_fmul>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fe12 	bl	8001110 <__aeabi_f2iz>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bfb8      	it	lt
 80024f2:	425b      	neglt	r3, r3
 80024f4:	4a74      	ldr	r2, [pc, #464]	@ (80026c8 <StartTaskUI+0x520>)
 80024f6:	fb82 1203 	smull	r1, r2, r2, r3
 80024fa:	1191      	asrs	r1, r2, #6
 80024fc:	17da      	asrs	r2, r3, #31
 80024fe:	1a8a      	subs	r2, r1, r2
 8002500:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002504:	fb01 f202 	mul.w	r2, r1, r2
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  	snprintf(amplitud_pantalla, sizeof(amplitud_pantalla), "%d.%03d", integerPart_A, decimalPart_A);
 800250e:	f107 0014 	add.w	r0, r7, #20
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800251c:	4a6b      	ldr	r2, [pc, #428]	@ (80026cc <StartTaskUI+0x524>)
 800251e:	2106      	movs	r1, #6
 8002520:	f008 fd5a 	bl	800afd8 <sniprintf>
	  	integerPart_F = f[encoder_position] / 10;
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <StartTaskUI+0x518>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a62      	ldr	r2, [pc, #392]	@ (80026b4 <StartTaskUI+0x50c>)
 800252a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800252e:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <StartTaskUI+0x528>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	b29b      	uxth	r3, r3
 8002538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  	decimalPart_F = f[encoder_position] % 10;
 800253c:	4b60      	ldr	r3, [pc, #384]	@ (80026c0 <StartTaskUI+0x518>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5c      	ldr	r2, [pc, #368]	@ (80026b4 <StartTaskUI+0x50c>)
 8002542:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002546:	4b62      	ldr	r3, [pc, #392]	@ (80026d0 <StartTaskUI+0x528>)
 8002548:	fba3 1302 	umull	r1, r3, r3, r2
 800254c:	08d9      	lsrs	r1, r3, #3
 800254e:	460b      	mov	r3, r1
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  	snprintf(frec_pantalla, sizeof(frec_pantalla), "%03d.%01d", integerPart_F, decimalPart_F);
 800255e:	f107 000c 	add.w	r0, r7, #12
 8002562:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800256c:	4a59      	ldr	r2, [pc, #356]	@ (80026d4 <StartTaskUI+0x52c>)
 800256e:	2106      	movs	r1, #6
 8002570:	f008 fd32 	bl	800afd8 <sniprintf>
	  	if(enc_graf == 1){
 8002574:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <StartTaskUI+0x530>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10b      	bne.n	8002594 <StartTaskUI+0x3ec>
	  		SSD1306_DrawLine(encoder_position, 0, encoder_position, 64, SSD1306_COLOR_WHITE);
 800257c:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <StartTaskUI+0x518>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b298      	uxth	r0, r3
 8002582:	4b4f      	ldr	r3, [pc, #316]	@ (80026c0 <StartTaskUI+0x518>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29a      	uxth	r2, r3
 8002588:	2301      	movs	r3, #1
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2340      	movs	r3, #64	@ 0x40
 800258e:	2100      	movs	r1, #0
 8002590:	f000 fe5b 	bl	800324a <SSD1306_DrawLine>
	  	}
	  	SSD1306_GotoXY (70, 0);
 8002594:	2100      	movs	r1, #0
 8002596:	2046      	movs	r0, #70	@ 0x46
 8002598:	f000 fd9e 	bl	80030d8 <SSD1306_GotoXY>
	  	SSD1306_Puts (amplitud_pantalla, &Font_7x10, 1);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2201      	movs	r2, #1
 80025a2:	494e      	ldr	r1, [pc, #312]	@ (80026dc <StartTaskUI+0x534>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fe2b 	bl	8003200 <SSD1306_Puts>
		SSD1306_GotoXY (70, 10);
 80025aa:	210a      	movs	r1, #10
 80025ac:	2046      	movs	r0, #70	@ 0x46
 80025ae:	f000 fd93 	bl	80030d8 <SSD1306_GotoXY>
		SSD1306_Puts (frec_pantalla, &Font_7x10, 1);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2201      	movs	r2, #1
 80025b8:	4948      	ldr	r1, [pc, #288]	@ (80026dc <StartTaskUI+0x534>)
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fe20 	bl	8003200 <SSD1306_Puts>
		SSD1306_GotoXY (110, 0);
 80025c0:	2100      	movs	r1, #0
 80025c2:	206e      	movs	r0, #110	@ 0x6e
 80025c4:	f000 fd88 	bl	80030d8 <SSD1306_GotoXY>
		SSD1306_Puts("V", &Font_7x10, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	4944      	ldr	r1, [pc, #272]	@ (80026dc <StartTaskUI+0x534>)
 80025cc:	4844      	ldr	r0, [pc, #272]	@ (80026e0 <StartTaskUI+0x538>)
 80025ce:	f000 fe17 	bl	8003200 <SSD1306_Puts>
		SSD1306_GotoXY (110, 10);
 80025d2:	210a      	movs	r1, #10
 80025d4:	206e      	movs	r0, #110	@ 0x6e
 80025d6:	f000 fd7f 	bl	80030d8 <SSD1306_GotoXY>
		SSD1306_Puts("Hz", &Font_7x10, 1);
 80025da:	2201      	movs	r2, #1
 80025dc:	493f      	ldr	r1, [pc, #252]	@ (80026dc <StartTaskUI+0x534>)
 80025de:	4841      	ldr	r0, [pc, #260]	@ (80026e4 <StartTaskUI+0x53c>)
 80025e0:	f000 fe0e 	bl	8003200 <SSD1306_Puts>
		if(ConfSub == 1){
 80025e4:	4b40      	ldr	r3, [pc, #256]	@ (80026e8 <StartTaskUI+0x540>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <StartTaskUI+0x44c>
			flag_frec = 1;
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <StartTaskUI+0x544>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
	  	}
	  	if(ConfSub == 2){
 80025f4:	4b3c      	ldr	r3, [pc, #240]	@ (80026e8 <StartTaskUI+0x540>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d102      	bne.n	8002604 <StartTaskUI+0x45c>
	  	flag_amp = 1;
 80025fe:	4b3c      	ldr	r3, [pc, #240]	@ (80026f0 <StartTaskUI+0x548>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
	  	}
	  	if (Boton2== 0 && flag_salto_screen==1){
 8002604:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <StartTaskUI+0x54c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 8308 	bne.w	8002c20 <StartTaskUI+0xa78>
 8002610:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <StartTaskUI+0x550>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 8303 	bne.w	8002c20 <StartTaskUI+0xa78>
	  		Screen=1;
 800261a:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <StartTaskUI+0x554>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
	  		flag_salto_screen==0;
	  		flag_cursor_quieto=0;
 8002620:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <StartTaskUI+0x558>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
	  	}
	  break;
 8002626:	e2fb      	b.n	8002c20 <StartTaskUI+0xa78>
	  case 1:
		SSD1306_GotoXY(0, 0);
 8002628:	2100      	movs	r1, #0
 800262a:	2000      	movs	r0, #0
 800262c:	f000 fd54 	bl	80030d8 <SSD1306_GotoXY>
	  	SSD1306_Puts("Configuracion", &Font_7x10, 1);
 8002630:	2201      	movs	r2, #1
 8002632:	492a      	ldr	r1, [pc, #168]	@ (80026dc <StartTaskUI+0x534>)
 8002634:	4833      	ldr	r0, [pc, #204]	@ (8002704 <StartTaskUI+0x55c>)
 8002636:	f000 fde3 	bl	8003200 <SSD1306_Puts>
	  	SSD1306_GotoXY(0, 20);
 800263a:	2114      	movs	r1, #20
 800263c:	2000      	movs	r0, #0
 800263e:	f000 fd4b 	bl	80030d8 <SSD1306_GotoXY>
	  	SSD1306_Puts("Cursor", &Font_7x10, 1);
 8002642:	2201      	movs	r2, #1
 8002644:	4925      	ldr	r1, [pc, #148]	@ (80026dc <StartTaskUI+0x534>)
 8002646:	4830      	ldr	r0, [pc, #192]	@ (8002708 <StartTaskUI+0x560>)
 8002648:	f000 fdda 	bl	8003200 <SSD1306_Puts>
	  	SSD1306_GotoXY(0, 30);
 800264c:	211e      	movs	r1, #30
 800264e:	2000      	movs	r0, #0
 8002650:	f000 fd42 	bl	80030d8 <SSD1306_GotoXY>
	  	SSD1306_Puts("Frecuencia:", &Font_7x10, 1);
 8002654:	2201      	movs	r2, #1
 8002656:	4921      	ldr	r1, [pc, #132]	@ (80026dc <StartTaskUI+0x534>)
 8002658:	482c      	ldr	r0, [pc, #176]	@ (800270c <StartTaskUI+0x564>)
 800265a:	f000 fdd1 	bl	8003200 <SSD1306_Puts>
	  	SSD1306_GotoXY(0, 40);
 800265e:	2128      	movs	r1, #40	@ 0x28
 8002660:	2000      	movs	r0, #0
 8002662:	f000 fd39 	bl	80030d8 <SSD1306_GotoXY>
	  	SSD1306_Puts("Amplitud:", &Font_7x10, 1);
 8002666:	2201      	movs	r2, #1
 8002668:	491c      	ldr	r1, [pc, #112]	@ (80026dc <StartTaskUI+0x534>)
 800266a:	4829      	ldr	r0, [pc, #164]	@ (8002710 <StartTaskUI+0x568>)
 800266c:	f000 fdc8 	bl	8003200 <SSD1306_Puts>
	  	SSD1306_GotoXY(0, 50);
 8002670:	2132      	movs	r1, #50	@ 0x32
 8002672:	2000      	movs	r0, #0
 8002674:	f000 fd30 	bl	80030d8 <SSD1306_GotoXY>
	  	SSD1306_Puts("Imp por UART:", &Font_7x10, 1);
 8002678:	2201      	movs	r2, #1
 800267a:	4918      	ldr	r1, [pc, #96]	@ (80026dc <StartTaskUI+0x534>)
 800267c:	4825      	ldr	r0, [pc, #148]	@ (8002714 <StartTaskUI+0x56c>)
 800267e:	f000 fdbf 	bl	8003200 <SSD1306_Puts>
	  	//SWITCH DE LA PSEUDOMAQUINA DEL SCREEN1
	  	switch (ConfSub)
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <StartTaskUI+0x540>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b03      	cmp	r3, #3
 800268a:	f200 82cb 	bhi.w	8002c24 <StartTaskUI+0xa7c>
 800268e:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <StartTaskUI+0x4ec>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	08002719 	.word	0x08002719
 8002698:	080027c3 	.word	0x080027c3
 800269c:	0800283d 	.word	0x0800283d
 80026a0:	080028dd 	.word	0x080028dd
 80026a4:	20001518 	.word	0x20001518
 80026a8:	40700000 	.word	0x40700000
 80026ac:	20001d18 	.word	0x20001d18
 80026b0:	80808081 	.word	0x80808081
 80026b4:	20001f18 	.word	0x20001f18
 80026b8:	2000109c 	.word	0x2000109c
 80026bc:	20001290 	.word	0x20001290
 80026c0:	200012a4 	.word	0x200012a4
 80026c4:	447a0000 	.word	0x447a0000
 80026c8:	10624dd3 	.word	0x10624dd3
 80026cc:	0800cbe4 	.word	0x0800cbe4
 80026d0:	cccccccd 	.word	0xcccccccd
 80026d4:	0800cbec 	.word	0x0800cbec
 80026d8:	200012a0 	.word	0x200012a0
 80026dc:	20001000 	.word	0x20001000
 80026e0:	0800cbf8 	.word	0x0800cbf8
 80026e4:	0800cbfc 	.word	0x0800cbfc
 80026e8:	20001294 	.word	0x20001294
 80026ec:	200012b0 	.word	0x200012b0
 80026f0:	200012b1 	.word	0x200012b1
 80026f4:	20001295 	.word	0x20001295
 80026f8:	200012a8 	.word	0x200012a8
 80026fc:	20001008 	.word	0x20001008
 8002700:	200012ac 	.word	0x200012ac
 8002704:	0800cc00 	.word	0x0800cc00
 8002708:	0800cc10 	.word	0x0800cc10
 800270c:	0800cc18 	.word	0x0800cc18
 8002710:	0800cc24 	.word	0x0800cc24
 8002714:	0800cc30 	.word	0x0800cc30
	  	{
	  		case 0:
	  			flag_enc = 1;
 8002718:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <StartTaskUI+0x7ac>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
	  			flag_uart = 0;
 800271e:	4b8e      	ldr	r3, [pc, #568]	@ (8002958 <StartTaskUI+0x7b0>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
	  			flag_frec = 0;
 8002724:	4b8d      	ldr	r3, [pc, #564]	@ (800295c <StartTaskUI+0x7b4>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
	  			flag_amp = 0;
 800272a:	4b8d      	ldr	r3, [pc, #564]	@ (8002960 <StartTaskUI+0x7b8>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
	  			SSD1306_FillArea(0, 20, SSD1306_WIDTH, 10, 1);
 8002730:	2301      	movs	r3, #1
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	230a      	movs	r3, #10
 8002736:	2280      	movs	r2, #128	@ 0x80
 8002738:	2114      	movs	r1, #20
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff fc0e 	bl	8001f5c <SSD1306_FillArea>
	  			SSD1306_GotoXY(0, 20);
 8002740:	2114      	movs	r1, #20
 8002742:	2000      	movs	r0, #0
 8002744:	f000 fcc8 	bl	80030d8 <SSD1306_GotoXY>
				SSD1306_Puts("Cursor", &Font_7x10, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	4986      	ldr	r1, [pc, #536]	@ (8002964 <StartTaskUI+0x7bc>)
 800274c:	4886      	ldr	r0, [pc, #536]	@ (8002968 <StartTaskUI+0x7c0>)
 800274e:	f000 fd57 	bl	8003200 <SSD1306_Puts>
				SSD1306_GotoXY(70, 20);
 8002752:	2114      	movs	r1, #20
 8002754:	2046      	movs	r0, #70	@ 0x46
 8002756:	f000 fcbf 	bl	80030d8 <SSD1306_GotoXY>
	  			if (encoder_c == 1){
 800275a:	4b84      	ldr	r3, [pc, #528]	@ (800296c <StartTaskUI+0x7c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10e      	bne.n	8002780 <StartTaskUI+0x5d8>
	  				SSD1306_Puts("si", &Font_7x10, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	497f      	ldr	r1, [pc, #508]	@ (8002964 <StartTaskUI+0x7bc>)
 8002766:	4882      	ldr	r0, [pc, #520]	@ (8002970 <StartTaskUI+0x7c8>)
 8002768:	f000 fd4a 	bl	8003200 <SSD1306_Puts>
	  				enc_graf = 1;
 800276c:	4b81      	ldr	r3, [pc, #516]	@ (8002974 <StartTaskUI+0x7cc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
	  				flag_salto_screen=1;
 8002772:	4b81      	ldr	r3, [pc, #516]	@ (8002978 <StartTaskUI+0x7d0>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
	  				flag_cursor_quieto=0;
 8002778:	4b80      	ldr	r3, [pc, #512]	@ (800297c <StartTaskUI+0x7d4>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e011      	b.n	80027a4 <StartTaskUI+0x5fc>
	  				}
	  			else if (encoder_c == 0){
 8002780:	4b7a      	ldr	r3, [pc, #488]	@ (800296c <StartTaskUI+0x7c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <StartTaskUI+0x5fc>
	  				SSD1306_Puts("no", &Font_7x10, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	4976      	ldr	r1, [pc, #472]	@ (8002964 <StartTaskUI+0x7bc>)
 800278c:	487c      	ldr	r0, [pc, #496]	@ (8002980 <StartTaskUI+0x7d8>)
 800278e:	f000 fd37 	bl	8003200 <SSD1306_Puts>
	  				enc_graf = 0;
 8002792:	4b78      	ldr	r3, [pc, #480]	@ (8002974 <StartTaskUI+0x7cc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
	  				flag_salto_screen=0;
 8002798:	4b77      	ldr	r3, [pc, #476]	@ (8002978 <StartTaskUI+0x7d0>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
	  				flag_cursor_quieto=1;
 800279e:	4b77      	ldr	r3, [pc, #476]	@ (800297c <StartTaskUI+0x7d4>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
	  			}
	  			if (Boton2== 1 && flag_salto_screen==1)
 80027a4:	4b77      	ldr	r3, [pc, #476]	@ (8002984 <StartTaskUI+0x7dc>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	f040 8186 	bne.w	8002abc <StartTaskUI+0x914>
 80027b0:	4b71      	ldr	r3, [pc, #452]	@ (8002978 <StartTaskUI+0x7d0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 8181 	bne.w	8002abc <StartTaskUI+0x914>
	  			{
	  				Screen=0;
 80027ba:	4b73      	ldr	r3, [pc, #460]	@ (8002988 <StartTaskUI+0x7e0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
	  			}
	  		break;
 80027c0:	e17c      	b.n	8002abc <StartTaskUI+0x914>
	  		case 1:
	  			flag_enc = 0;
 80027c2:	4b64      	ldr	r3, [pc, #400]	@ (8002954 <StartTaskUI+0x7ac>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
	  			flag_uart = 0;
 80027c8:	4b63      	ldr	r3, [pc, #396]	@ (8002958 <StartTaskUI+0x7b0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
	  			flag_frec = 1;
 80027ce:	4b63      	ldr	r3, [pc, #396]	@ (800295c <StartTaskUI+0x7b4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
	  			flag_amp = 0;
 80027d4:	4b62      	ldr	r3, [pc, #392]	@ (8002960 <StartTaskUI+0x7b8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
	  			flag_cursor_quieto=1;
 80027da:	4b68      	ldr	r3, [pc, #416]	@ (800297c <StartTaskUI+0x7d4>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]
	  			SSD1306_FillArea(0, 30, SSD1306_WIDTH, 10, 1);
 80027e0:	2301      	movs	r3, #1
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	230a      	movs	r3, #10
 80027e6:	2280      	movs	r2, #128	@ 0x80
 80027e8:	211e      	movs	r1, #30
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff fbb6 	bl	8001f5c <SSD1306_FillArea>
	  			SSD1306_GotoXY(0, 30);
 80027f0:	211e      	movs	r1, #30
 80027f2:	2000      	movs	r0, #0
 80027f4:	f000 fc70 	bl	80030d8 <SSD1306_GotoXY>
	  			SSD1306_Puts("Frecuencia:", &Font_7x10, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	495a      	ldr	r1, [pc, #360]	@ (8002964 <StartTaskUI+0x7bc>)
 80027fc:	4863      	ldr	r0, [pc, #396]	@ (800298c <StartTaskUI+0x7e4>)
 80027fe:	f000 fcff 	bl	8003200 <SSD1306_Puts>
	  			SSD1306_GotoXY(90, 30);
 8002802:	211e      	movs	r1, #30
 8002804:	205a      	movs	r0, #90	@ 0x5a
 8002806:	f000 fc67 	bl	80030d8 <SSD1306_GotoXY>
	  			SSD1306_Puts(frecuencia_display, &Font_7x10, 0);
 800280a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800280e:	2200      	movs	r2, #0
 8002810:	4954      	ldr	r1, [pc, #336]	@ (8002964 <StartTaskUI+0x7bc>)
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fcf4 	bl	8003200 <SSD1306_Puts>
	  			flag_salto_screen=1;
 8002818:	4b57      	ldr	r3, [pc, #348]	@ (8002978 <StartTaskUI+0x7d0>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]
	  			if (Boton2== 1 && flag_salto_screen==1){
 800281e:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <StartTaskUI+0x7dc>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	f040 814b 	bne.w	8002ac0 <StartTaskUI+0x918>
 800282a:	4b53      	ldr	r3, [pc, #332]	@ (8002978 <StartTaskUI+0x7d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 8146 	bne.w	8002ac0 <StartTaskUI+0x918>
	  				Screen=0;
 8002834:	4b54      	ldr	r3, [pc, #336]	@ (8002988 <StartTaskUI+0x7e0>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
	  			}
	  		break;
 800283a:	e141      	b.n	8002ac0 <StartTaskUI+0x918>
	  		case 2:
	  			flag_enc = 0;
 800283c:	4b45      	ldr	r3, [pc, #276]	@ (8002954 <StartTaskUI+0x7ac>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
	  			flag_uart = 0;
 8002842:	4b45      	ldr	r3, [pc, #276]	@ (8002958 <StartTaskUI+0x7b0>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
	  			flag_frec = 0;
 8002848:	4b44      	ldr	r3, [pc, #272]	@ (800295c <StartTaskUI+0x7b4>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
	  			flag_amp = 1;
 800284e:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <StartTaskUI+0x7b8>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
	  			flag_cursor_quieto=1;
 8002854:	4b49      	ldr	r3, [pc, #292]	@ (800297c <StartTaskUI+0x7d4>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
	  			SSD1306_FillArea(0, 40, SSD1306_WIDTH, 10, 1);
 800285a:	2301      	movs	r3, #1
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	230a      	movs	r3, #10
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	2128      	movs	r1, #40	@ 0x28
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fb79 	bl	8001f5c <SSD1306_FillArea>
	  			SSD1306_GotoXY(0, 40);
 800286a:	2128      	movs	r1, #40	@ 0x28
 800286c:	2000      	movs	r0, #0
 800286e:	f000 fc33 	bl	80030d8 <SSD1306_GotoXY>
	  			SSD1306_Puts("Amplitud:", &Font_7x10, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	493b      	ldr	r1, [pc, #236]	@ (8002964 <StartTaskUI+0x7bc>)
 8002876:	4846      	ldr	r0, [pc, #280]	@ (8002990 <StartTaskUI+0x7e8>)
 8002878:	f000 fcc2 	bl	8003200 <SSD1306_Puts>
	  			SSD1306_GotoXY(90, 40);
 800287c:	2128      	movs	r1, #40	@ 0x28
 800287e:	205a      	movs	r0, #90	@ 0x5a
 8002880:	f000 fc2a 	bl	80030d8 <SSD1306_GotoXY>
	  			snprintf(amplitud_display, sizeof(amplitud_display), "%d.%02d", integerPart, decimalPart);
 8002884:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800288e:	4a41      	ldr	r2, [pc, #260]	@ (8002994 <StartTaskUI+0x7ec>)
 8002890:	2106      	movs	r1, #6
 8002892:	f008 fba1 	bl	800afd8 <sniprintf>
	  			SSD1306_Puts(amplitud_display, &Font_7x10, 0);
 8002896:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800289a:	2200      	movs	r2, #0
 800289c:	4931      	ldr	r1, [pc, #196]	@ (8002964 <StartTaskUI+0x7bc>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fcae 	bl	8003200 <SSD1306_Puts>
	  			SSD1306_Puts(frecuencia_display, &Font_7x10, 0);
 80028a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80028a8:	2200      	movs	r2, #0
 80028aa:	492e      	ldr	r1, [pc, #184]	@ (8002964 <StartTaskUI+0x7bc>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fca7 	bl	8003200 <SSD1306_Puts>
	  			flag_salto_screen=1;
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <StartTaskUI+0x7d0>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
	  			if (Boton2== 1 && flag_salto_screen==1)
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <StartTaskUI+0x7dc>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 8100 	bne.w	8002ac4 <StartTaskUI+0x91c>
 80028c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <StartTaskUI+0x7d0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 80fb 	bne.w	8002ac4 <StartTaskUI+0x91c>
	  			{
	  				flag_cursor_quieto=1;
 80028ce:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <StartTaskUI+0x7d4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
	  				Screen=0;
 80028d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <StartTaskUI+0x7e0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
	  			}

	  		break;
 80028da:	e0f3      	b.n	8002ac4 <StartTaskUI+0x91c>
	  		case 3:
	  			flag_enc = 0;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <StartTaskUI+0x7ac>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
	  			flag_uart = 1;
 80028e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <StartTaskUI+0x7b0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
	  			flag_frec = 0;
 80028e8:	4b1c      	ldr	r3, [pc, #112]	@ (800295c <StartTaskUI+0x7b4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	  			flag_amp = 0;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <StartTaskUI+0x7b8>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
	  			flag_cursor_quieto=1;
 80028f4:	4b21      	ldr	r3, [pc, #132]	@ (800297c <StartTaskUI+0x7d4>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
	  			SSD1306_FillArea(0, 50, SSD1306_WIDTH, 10, 1);
 80028fa:	2301      	movs	r3, #1
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	230a      	movs	r3, #10
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	2132      	movs	r1, #50	@ 0x32
 8002904:	2000      	movs	r0, #0
 8002906:	f7ff fb29 	bl	8001f5c <SSD1306_FillArea>
	  			SSD1306_GotoXY(0, 50);
 800290a:	2132      	movs	r1, #50	@ 0x32
 800290c:	2000      	movs	r0, #0
 800290e:	f000 fbe3 	bl	80030d8 <SSD1306_GotoXY>
	  			SSD1306_Puts("Imp por UART:", &Font_7x10, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	4913      	ldr	r1, [pc, #76]	@ (8002964 <StartTaskUI+0x7bc>)
 8002916:	4820      	ldr	r0, [pc, #128]	@ (8002998 <StartTaskUI+0x7f0>)
 8002918:	f000 fc72 	bl	8003200 <SSD1306_Puts>
	  			SSD1306_GotoXY(100, 50);
 800291c:	2132      	movs	r1, #50	@ 0x32
 800291e:	2064      	movs	r0, #100	@ 0x64
 8002920:	f000 fbda 	bl	80030d8 <SSD1306_GotoXY>
	  			if (enc_uart == 1){
 8002924:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <StartTaskUI+0x7f4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 80bd 	bne.w	8002aa8 <StartTaskUI+0x900>
	  			if (osSemaphoreAcquire(Semaforo1Handle, 1000) == osOK) {
 800292e:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <StartTaskUI+0x7f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002936:	4618      	mov	r0, r3
 8002938:	f005 f98e 	bl	8007c58 <osSemaphoreAcquire>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80ae 	bne.w	8002aa0 <StartTaskUI+0x8f8>
	  			SSD1306_Puts("Si", &Font_7x10, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	4907      	ldr	r1, [pc, #28]	@ (8002964 <StartTaskUI+0x7bc>)
 8002948:	4816      	ldr	r0, [pc, #88]	@ (80029a4 <StartTaskUI+0x7fc>)
 800294a:	f000 fc59 	bl	8003200 <SSD1306_Puts>
	  				for (int i = 0; i < 128; i++){
 800294e:	2300      	movs	r3, #0
 8002950:	677b      	str	r3, [r7, #116]	@ 0x74
 8002952:	e09d      	b.n	8002a90 <StartTaskUI+0x8e8>
 8002954:	200012b2 	.word	0x200012b2
 8002958:	200012b3 	.word	0x200012b3
 800295c:	200012b0 	.word	0x200012b0
 8002960:	200012b1 	.word	0x200012b1
 8002964:	20001000 	.word	0x20001000
 8002968:	0800cc10 	.word	0x0800cc10
 800296c:	20001298 	.word	0x20001298
 8002970:	0800cc40 	.word	0x0800cc40
 8002974:	200012a0 	.word	0x200012a0
 8002978:	200012a8 	.word	0x200012a8
 800297c:	200012ac 	.word	0x200012ac
 8002980:	0800cc44 	.word	0x0800cc44
 8002984:	20001295 	.word	0x20001295
 8002988:	20001008 	.word	0x20001008
 800298c:	0800cc18 	.word	0x0800cc18
 8002990:	0800cc24 	.word	0x0800cc24
 8002994:	0800cc48 	.word	0x0800cc48
 8002998:	0800cc30 	.word	0x0800cc30
 800299c:	2000129c 	.word	0x2000129c
 80029a0:	20001290 	.word	0x20001290
 80029a4:	0800cc50 	.word	0x0800cc50
	  					int integerPartR = (fft[i].real*10000) / 10000;
 80029a8:	4aa8      	ldr	r2, [pc, #672]	@ (8002c4c <StartTaskUI+0xaa4>)
 80029aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029b0:	49a7      	ldr	r1, [pc, #668]	@ (8002c50 <StartTaskUI+0xaa8>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f9e6 	bl	8000d84 <__aeabi_fmul>
 80029b8:	4603      	mov	r3, r0
 80029ba:	49a5      	ldr	r1, [pc, #660]	@ (8002c50 <StartTaskUI+0xaa8>)
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fa95 	bl	8000eec <__aeabi_fdiv>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fba3 	bl	8001110 <__aeabi_f2iz>
 80029ca:	4603      	mov	r3, r0
 80029cc:	66bb      	str	r3, [r7, #104]	@ 0x68
	  					int decimalPartR = (uint32_t)(fft[i].real*10000) % 10000;
 80029ce:	4a9f      	ldr	r2, [pc, #636]	@ (8002c4c <StartTaskUI+0xaa4>)
 80029d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029d6:	499e      	ldr	r1, [pc, #632]	@ (8002c50 <StartTaskUI+0xaa8>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe f9d3 	bl	8000d84 <__aeabi_fmul>
 80029de:	4603      	mov	r3, r0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fbbb 	bl	800115c <__aeabi_f2uiz>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c54 <StartTaskUI+0xaac>)
 80029ea:	fba3 1302 	umull	r1, r3, r3, r2
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	667b      	str	r3, [r7, #100]	@ 0x64
	  					int integerPartI = (fft[i].imag*10000) / 10000;
 80029fc:	4a93      	ldr	r2, [pc, #588]	@ (8002c4c <StartTaskUI+0xaa4>)
 80029fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4992      	ldr	r1, [pc, #584]	@ (8002c50 <StartTaskUI+0xaa8>)
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f9bb 	bl	8000d84 <__aeabi_fmul>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	498f      	ldr	r1, [pc, #572]	@ (8002c50 <StartTaskUI+0xaa8>)
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fa6a 	bl	8000eec <__aeabi_fdiv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fb78 	bl	8001110 <__aeabi_f2iz>
 8002a20:	4603      	mov	r3, r0
 8002a22:	663b      	str	r3, [r7, #96]	@ 0x60
	  					int decimalPartI = (uint32_t)(fft[i].imag*10000) % 10000;
 8002a24:	4a89      	ldr	r2, [pc, #548]	@ (8002c4c <StartTaskUI+0xaa4>)
 8002a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4988      	ldr	r1, [pc, #544]	@ (8002c50 <StartTaskUI+0xaa8>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f9a7 	bl	8000d84 <__aeabi_fmul>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fb8f 	bl	800115c <__aeabi_f2uiz>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b84      	ldr	r3, [pc, #528]	@ (8002c54 <StartTaskUI+0xaac>)
 8002a42:	fba3 1302 	umull	r1, r3, r3, r2
 8002a46:	0b5b      	lsrs	r3, r3, #13
 8002a48:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  					snprintf(fft_buffer_display, sizeof(fft_buffer_display), "%d.%04d + %d.%04di \r\n", integerPartR, decimalPartR, integerPartI, decimalPartI);
 8002a54:	f107 001c 	add.w	r0, r7, #28
 8002a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a66:	4a7c      	ldr	r2, [pc, #496]	@ (8002c58 <StartTaskUI+0xab0>)
 8002a68:	2132      	movs	r1, #50	@ 0x32
 8002a6a:	f008 fab5 	bl	800afd8 <sniprintf>
	  					HAL_UART_Transmit(&huart1, (uint8_t *)fft_buffer_display, strlen(fft_buffer_display), HAL_MAX_DELAY);
 8002a6e:	f107 031c 	add.w	r3, r7, #28
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fb6c 	bl	8000150 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	f107 011c 	add.w	r1, r7, #28
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	4875      	ldr	r0, [pc, #468]	@ (8002c5c <StartTaskUI+0xab4>)
 8002a86:	f004 fd5f 	bl	8007548 <HAL_UART_Transmit>
	  				for (int i = 0; i < 128; i++){
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a94:	dd88      	ble.n	80029a8 <StartTaskUI+0x800>
	  				}

	  			osSemaphoreRelease(Semaforo1Handle);
 8002a96:	4b72      	ldr	r3, [pc, #456]	@ (8002c60 <StartTaskUI+0xab8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 f942 	bl	8007d24 <osSemaphoreRelease>
	  			}
	  			enc_uart = 0;
 8002aa0:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <StartTaskUI+0xabc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
	  			else if (enc_uart == 0)
	  			{
	  			SSD1306_Puts("No", &Font_7x10, 0);
	  			}

	  		break;
 8002aa6:	e00f      	b.n	8002ac8 <StartTaskUI+0x920>
	  			else if (enc_uart == 0)
 8002aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8002c64 <StartTaskUI+0xabc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <StartTaskUI+0x920>
	  			SSD1306_Puts("No", &Font_7x10, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	496d      	ldr	r1, [pc, #436]	@ (8002c68 <StartTaskUI+0xac0>)
 8002ab4:	486d      	ldr	r0, [pc, #436]	@ (8002c6c <StartTaskUI+0xac4>)
 8002ab6:	f000 fba3 	bl	8003200 <SSD1306_Puts>
	  		break;
 8002aba:	e005      	b.n	8002ac8 <StartTaskUI+0x920>
	  		break;
 8002abc:	bf00      	nop
 8002abe:	e0b1      	b.n	8002c24 <StartTaskUI+0xa7c>
	  		break;
 8002ac0:	bf00      	nop
 8002ac2:	e0af      	b.n	8002c24 <StartTaskUI+0xa7c>
	  		break;
 8002ac4:	bf00      	nop
 8002ac6:	e0ad      	b.n	8002c24 <StartTaskUI+0xa7c>
	  		break;
 8002ac8:	bf00      	nop
	  	}
	  	break;
 8002aca:	e0ab      	b.n	8002c24 <StartTaskUI+0xa7c>
	  	case 2:
	  		flag_enc = 0;
 8002acc:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <StartTaskUI+0xac8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
	  		flag_uart = 1;
 8002ad2:	4b68      	ldr	r3, [pc, #416]	@ (8002c74 <StartTaskUI+0xacc>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
	  		flag_frec = 0;
 8002ad8:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <StartTaskUI+0xad0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
	  		flag_amp = 0;
 8002ade:	4b67      	ldr	r3, [pc, #412]	@ (8002c7c <StartTaskUI+0xad4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
	  		flag_salto_screen=0;
 8002ae4:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <StartTaskUI+0xad8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
	  		snprintf(amplitud_pantalla, sizeof(amplitud_pantalla), "%d.%03d", integerPart_A, decimalPart_A);
 8002aea:	f107 0014 	add.w	r0, r7, #20
 8002aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af8:	4a62      	ldr	r2, [pc, #392]	@ (8002c84 <StartTaskUI+0xadc>)
 8002afa:	2106      	movs	r1, #6
 8002afc:	f008 fa6c 	bl	800afd8 <sniprintf>
	  		snprintf(frec_pantalla, sizeof(frec_pantalla), "%03d.%01d", integerPart_F, decimalPart_F);
 8002b00:	f107 000c 	add.w	r0, r7, #12
 8002b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c88 <StartTaskUI+0xae0>)
 8002b10:	2106      	movs	r1, #6
 8002b12:	f008 fa61 	bl	800afd8 <sniprintf>
	  		snprintf(amplitud_display, sizeof(amplitud_display), "%d.%02d", integerPart, decimalPart);
 8002b16:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b20:	4a5a      	ldr	r2, [pc, #360]	@ (8002c8c <StartTaskUI+0xae4>)
 8002b22:	2106      	movs	r1, #6
 8002b24:	f008 fa58 	bl	800afd8 <sniprintf>
	  		itoa(frecuencia*10, frecuencia_display, 10);
 8002b28:	4b59      	ldr	r3, [pc, #356]	@ (8002c90 <StartTaskUI+0xae8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4959      	ldr	r1, [pc, #356]	@ (8002c94 <StartTaskUI+0xaec>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f928 	bl	8000d84 <__aeabi_fmul>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe faea 	bl	8001110 <__aeabi_f2iz>
 8002b3c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b40:	220a      	movs	r2, #10
 8002b42:	4619      	mov	r1, r3
 8002b44:	f008 fa04 	bl	800af50 <itoa>
	  		SSD1306_GotoXY(10,0);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	200a      	movs	r0, #10
 8002b4c:	f000 fac4 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts("Informacion", &Font_7x10, 1);
 8002b50:	2201      	movs	r2, #1
 8002b52:	4945      	ldr	r1, [pc, #276]	@ (8002c68 <StartTaskUI+0xac0>)
 8002b54:	4850      	ldr	r0, [pc, #320]	@ (8002c98 <StartTaskUI+0xaf0>)
 8002b56:	f000 fb53 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY(0, 10);
 8002b5a:	210a      	movs	r1, #10
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f000 fabb 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts("Cursor:", &Font_7x10, 1);
 8002b62:	2201      	movs	r2, #1
 8002b64:	4940      	ldr	r1, [pc, #256]	@ (8002c68 <StartTaskUI+0xac0>)
 8002b66:	484d      	ldr	r0, [pc, #308]	@ (8002c9c <StartTaskUI+0xaf4>)
 8002b68:	f000 fb4a 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY(0, 40);
 8002b6c:	2128      	movs	r1, #40	@ 0x28
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 fab2 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts("Generador de senal:", &Font_7x10, 1);
 8002b74:	2201      	movs	r2, #1
 8002b76:	493c      	ldr	r1, [pc, #240]	@ (8002c68 <StartTaskUI+0xac0>)
 8002b78:	4849      	ldr	r0, [pc, #292]	@ (8002ca0 <StartTaskUI+0xaf8>)
 8002b7a:	f000 fb41 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY(0, 20);
 8002b7e:	2114      	movs	r1, #20
 8002b80:	2000      	movs	r0, #0
 8002b82:	f000 faa9 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts (amplitud_pantalla, &Font_7x10, 1);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4936      	ldr	r1, [pc, #216]	@ (8002c68 <StartTaskUI+0xac0>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fb36 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY (60, 20);
 8002b94:	2114      	movs	r1, #20
 8002b96:	203c      	movs	r0, #60	@ 0x3c
 8002b98:	f000 fa9e 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts (frec_pantalla, &Font_7x10, 1);
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4931      	ldr	r1, [pc, #196]	@ (8002c68 <StartTaskUI+0xac0>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fb2b 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY(0, 50);
 8002baa:	2132      	movs	r1, #50	@ 0x32
 8002bac:	2000      	movs	r0, #0
 8002bae:	f000 fa93 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts (amplitud_display, &Font_7x10, 1);
 8002bb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	492b      	ldr	r1, [pc, #172]	@ (8002c68 <StartTaskUI+0xac0>)
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb20 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY (70, 50);
 8002bc0:	2132      	movs	r1, #50	@ 0x32
 8002bc2:	2046      	movs	r0, #70	@ 0x46
 8002bc4:	f000 fa88 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts (frecuencia_display, &Font_7x10, 1);
 8002bc8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4926      	ldr	r1, [pc, #152]	@ (8002c68 <StartTaskUI+0xac0>)
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fb15 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY(40, 20);
 8002bd6:	2114      	movs	r1, #20
 8002bd8:	2028      	movs	r0, #40	@ 0x28
 8002bda:	f000 fa7d 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts ("V  ", &Font_7x10, 1);
 8002bde:	2201      	movs	r2, #1
 8002be0:	4921      	ldr	r1, [pc, #132]	@ (8002c68 <StartTaskUI+0xac0>)
 8002be2:	4830      	ldr	r0, [pc, #192]	@ (8002ca4 <StartTaskUI+0xafc>)
 8002be4:	f000 fb0c 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY(40, 50);
 8002be8:	2132      	movs	r1, #50	@ 0x32
 8002bea:	2028      	movs	r0, #40	@ 0x28
 8002bec:	f000 fa74 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts ("V", &Font_7x10, 1);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	491d      	ldr	r1, [pc, #116]	@ (8002c68 <StartTaskUI+0xac0>)
 8002bf4:	482c      	ldr	r0, [pc, #176]	@ (8002ca8 <StartTaskUI+0xb00>)
 8002bf6:	f000 fb03 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY (100, 20);
 8002bfa:	2114      	movs	r1, #20
 8002bfc:	2064      	movs	r0, #100	@ 0x64
 8002bfe:	f000 fa6b 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts ("Hz ", &Font_7x10, 1);
 8002c02:	2201      	movs	r2, #1
 8002c04:	4918      	ldr	r1, [pc, #96]	@ (8002c68 <StartTaskUI+0xac0>)
 8002c06:	4829      	ldr	r0, [pc, #164]	@ (8002cac <StartTaskUI+0xb04>)
 8002c08:	f000 fafa 	bl	8003200 <SSD1306_Puts>
	  		SSD1306_GotoXY (100, 50);
 8002c0c:	2132      	movs	r1, #50	@ 0x32
 8002c0e:	2064      	movs	r0, #100	@ 0x64
 8002c10:	f000 fa62 	bl	80030d8 <SSD1306_GotoXY>
	  		SSD1306_Puts ("Hz", &Font_7x10, 1);
 8002c14:	2201      	movs	r2, #1
 8002c16:	4914      	ldr	r1, [pc, #80]	@ (8002c68 <StartTaskUI+0xac0>)
 8002c18:	4825      	ldr	r0, [pc, #148]	@ (8002cb0 <StartTaskUI+0xb08>)
 8002c1a:	f000 faf1 	bl	8003200 <SSD1306_Puts>
	  	break;
 8002c1e:	e002      	b.n	8002c26 <StartTaskUI+0xa7e>
	  break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <StartTaskUI+0xa7e>
	  	break;
 8002c24:	bf00      	nop
	  	}
	  	SSD1306_UpdateScreen();
 8002c26:	f000 f9b3 	bl	8002f90 <SSD1306_UpdateScreen>
	  	FreeUI= 4*osThreadGetStackSpace(UIHandle);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <StartTaskUI+0xb0c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 ff1a 	bl	8007a68 <osThreadGetStackSpace>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <StartTaskUI+0xb10>)
 8002c3e:	801a      	strh	r2, [r3, #0]
	  	osDelay(80);
 8002c40:	2050      	movs	r0, #80	@ 0x50
 8002c42:	f004 ff3f 	bl	8007ac4 <osDelay>
	SSD1306_Fill(0);
 8002c46:	f7ff bac3 	b.w	80021d0 <StartTaskUI+0x28>
 8002c4a:	bf00      	nop
 8002c4c:	20001518 	.word	0x20001518
 8002c50:	461c4000 	.word	0x461c4000
 8002c54:	d1b71759 	.word	0xd1b71759
 8002c58:	0800cc54 	.word	0x0800cc54
 8002c5c:	2000123c 	.word	0x2000123c
 8002c60:	20001290 	.word	0x20001290
 8002c64:	2000129c 	.word	0x2000129c
 8002c68:	20001000 	.word	0x20001000
 8002c6c:	0800cc6c 	.word	0x0800cc6c
 8002c70:	200012b2 	.word	0x200012b2
 8002c74:	200012b3 	.word	0x200012b3
 8002c78:	200012b0 	.word	0x200012b0
 8002c7c:	200012b1 	.word	0x200012b1
 8002c80:	200012a8 	.word	0x200012a8
 8002c84:	0800cbe4 	.word	0x0800cbe4
 8002c88:	0800cbec 	.word	0x0800cbec
 8002c8c:	0800cc48 	.word	0x0800cc48
 8002c90:	2000100c 	.word	0x2000100c
 8002c94:	41200000 	.word	0x41200000
 8002c98:	0800cc70 	.word	0x0800cc70
 8002c9c:	0800cc7c 	.word	0x0800cc7c
 8002ca0:	0800cc84 	.word	0x0800cc84
 8002ca4:	0800cc98 	.word	0x0800cc98
 8002ca8:	0800cbf8 	.word	0x0800cbf8
 8002cac:	0800cc9c 	.word	0x0800cc9c
 8002cb0:	0800cbfc 	.word	0x0800cbfc
 8002cb4:	20001288 	.word	0x20001288
 8002cb8:	2000201c 	.word	0x2000201c
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <StartDAC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDAC */
void StartDAC(void *argument)
{
 8002cc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDAC */
	vTaskSetApplicationTaskTag( NULL, (void*) TAG_TASK_DAC);
 8002cca:	2103      	movs	r1, #3
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f006 fd63 	bl	8009798 <vTaskSetApplicationTaskTag>
  /* Infinite loop */
  for(;;)
  {
	  for(int i = 0; i < NSEN ; i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e051      	b.n	8002d7c <StartDAC+0xbc>
	  		  sine_wave[i] = (uint8_t)((float)amplitud/2*(sin(2.0*PI*i*frecuencia/(float)NSEN)+1.0));
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <StartDAC+0xf8>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fff9 	bl	8000cd4 <__aeabi_ui2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe f8ff 	bl	8000eec <__aeabi_fdiv>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fb99 	bl	8000428 <__aeabi_f2d>
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	460d      	mov	r5, r1
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7fd fb82 	bl	8000404 <__aeabi_i2d>
 8002d00:	a32b      	add	r3, pc, #172	@ (adr r3, 8002db0 <StartDAC+0xf0>)
 8002d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d06:	f7fd fbe7 	bl	80004d8 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4690      	mov	r8, r2
 8002d10:	4699      	mov	r9, r3
 8002d12:	4b2a      	ldr	r3, [pc, #168]	@ (8002dbc <StartDAC+0xfc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fb86 	bl	8000428 <__aeabi_f2d>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4640      	mov	r0, r8
 8002d22:	4649      	mov	r1, r9
 8002d24:	f7fd fbd8 	bl	80004d8 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <StartDAC+0x100>)
 8002d36:	f7fd fcf9 	bl	800072c <__aeabi_ddiv>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f008 fe87 	bl	800ba54 <sin>
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <StartDAC+0x104>)
 8002d4c:	f7fd fa0e 	bl	800016c <__adddf3>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fbbe 	bl	80004d8 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7fd fe90 	bl	8000a88 <__aeabi_d2uiz>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	b2d9      	uxtb	r1, r3
 8002d6c:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <StartDAC+0x108>)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	460a      	mov	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < NSEN ; i++){
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b63      	cmp	r3, #99	@ 0x63
 8002d80:	ddaa      	ble.n	8002cd8 <StartDAC+0x18>
	  }
	  FreeDAC=4*osThreadGetStackSpace(DACHandle);
 8002d82:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <StartDAC+0x10c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 fe6e 	bl	8007a68 <osThreadGetStackSpace>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <StartDAC+0x110>)
 8002d96:	801a      	strh	r2, [r3, #0]
	  FreeHeap=xPortGetFreeHeapSize();
 8002d98:	f007 fffe 	bl	800ad98 <xPortGetFreeHeapSize>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <StartDAC+0x114>)
 8002da2:	801a      	strh	r2, [r3, #0]
	  osDelay(10);
 8002da4:	200a      	movs	r0, #10
 8002da6:	f004 fe8d 	bl	8007ac4 <osDelay>
	  for(int i = 0; i < NSEN ; i++){
 8002daa:	e792      	b.n	8002cd2 <StartDAC+0x12>
 8002dac:	f3af 8000 	nop.w
 8002db0:	53c8d4f1 	.word	0x53c8d4f1
 8002db4:	401921fb 	.word	0x401921fb
 8002db8:	20001009 	.word	0x20001009
 8002dbc:	2000100c 	.word	0x2000100c
 8002dc0:	40590000 	.word	0x40590000
 8002dc4:	3ff00000 	.word	0x3ff00000
 8002dc8:	200012b4 	.word	0x200012b4
 8002dcc:	2000128c 	.word	0x2000128c
 8002dd0:	20002020 	.word	0x20002020
 8002dd4:	2000201e 	.word	0x2000201e

08002dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dea:	f000 febb 	bl	8003b64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40000800 	.word	0x40000800

08002dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e00:	b672      	cpsid	i
}
 8002e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <Error_Handler+0x8>

08002e08 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002e0e:	f000 fb17 	bl	8003440 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002e12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002e16:	2201      	movs	r2, #1
 8002e18:	2178      	movs	r1, #120	@ 0x78
 8002e1a:	485b      	ldr	r0, [pc, #364]	@ (8002f88 <SSD1306_Init+0x180>)
 8002e1c:	f002 fa60 	bl	80052e0 <HAL_I2C_IsDeviceReady>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e0a9      	b.n	8002f7e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002e2a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002e2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e30:	e002      	b.n	8002e38 <SSD1306_Init+0x30>
		p--;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f9      	bne.n	8002e32 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e3e:	22ae      	movs	r2, #174	@ 0xae
 8002e40:	2100      	movs	r1, #0
 8002e42:	2078      	movs	r0, #120	@ 0x78
 8002e44:	f000 fb76 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002e48:	2220      	movs	r2, #32
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2078      	movs	r0, #120	@ 0x78
 8002e4e:	f000 fb71 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002e52:	2210      	movs	r2, #16
 8002e54:	2100      	movs	r1, #0
 8002e56:	2078      	movs	r0, #120	@ 0x78
 8002e58:	f000 fb6c 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e5c:	22b0      	movs	r2, #176	@ 0xb0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2078      	movs	r0, #120	@ 0x78
 8002e62:	f000 fb67 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002e66:	22c8      	movs	r2, #200	@ 0xc8
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2078      	movs	r0, #120	@ 0x78
 8002e6c:	f000 fb62 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	2078      	movs	r0, #120	@ 0x78
 8002e76:	f000 fb5d 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2078      	movs	r0, #120	@ 0x78
 8002e80:	f000 fb58 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002e84:	2240      	movs	r2, #64	@ 0x40
 8002e86:	2100      	movs	r1, #0
 8002e88:	2078      	movs	r0, #120	@ 0x78
 8002e8a:	f000 fb53 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002e8e:	2281      	movs	r2, #129	@ 0x81
 8002e90:	2100      	movs	r1, #0
 8002e92:	2078      	movs	r0, #120	@ 0x78
 8002e94:	f000 fb4e 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002e98:	22ff      	movs	r2, #255	@ 0xff
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2078      	movs	r0, #120	@ 0x78
 8002e9e:	f000 fb49 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ea2:	22a1      	movs	r2, #161	@ 0xa1
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2078      	movs	r0, #120	@ 0x78
 8002ea8:	f000 fb44 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002eac:	22a6      	movs	r2, #166	@ 0xa6
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2078      	movs	r0, #120	@ 0x78
 8002eb2:	f000 fb3f 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002eb6:	22a8      	movs	r2, #168	@ 0xa8
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2078      	movs	r0, #120	@ 0x78
 8002ebc:	f000 fb3a 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002ec0:	223f      	movs	r2, #63	@ 0x3f
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	2078      	movs	r0, #120	@ 0x78
 8002ec6:	f000 fb35 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002eca:	22a4      	movs	r2, #164	@ 0xa4
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2078      	movs	r0, #120	@ 0x78
 8002ed0:	f000 fb30 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002ed4:	22d3      	movs	r2, #211	@ 0xd3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2078      	movs	r0, #120	@ 0x78
 8002eda:	f000 fb2b 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2078      	movs	r0, #120	@ 0x78
 8002ee4:	f000 fb26 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002ee8:	22d5      	movs	r2, #213	@ 0xd5
 8002eea:	2100      	movs	r1, #0
 8002eec:	2078      	movs	r0, #120	@ 0x78
 8002eee:	f000 fb21 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002ef2:	22f0      	movs	r2, #240	@ 0xf0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2078      	movs	r0, #120	@ 0x78
 8002ef8:	f000 fb1c 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002efc:	22d9      	movs	r2, #217	@ 0xd9
 8002efe:	2100      	movs	r1, #0
 8002f00:	2078      	movs	r0, #120	@ 0x78
 8002f02:	f000 fb17 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f06:	2222      	movs	r2, #34	@ 0x22
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2078      	movs	r0, #120	@ 0x78
 8002f0c:	f000 fb12 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f10:	22da      	movs	r2, #218	@ 0xda
 8002f12:	2100      	movs	r1, #0
 8002f14:	2078      	movs	r0, #120	@ 0x78
 8002f16:	f000 fb0d 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002f1a:	2212      	movs	r2, #18
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2078      	movs	r0, #120	@ 0x78
 8002f20:	f000 fb08 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f24:	22db      	movs	r2, #219	@ 0xdb
 8002f26:	2100      	movs	r1, #0
 8002f28:	2078      	movs	r0, #120	@ 0x78
 8002f2a:	f000 fb03 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f2e:	2220      	movs	r2, #32
 8002f30:	2100      	movs	r1, #0
 8002f32:	2078      	movs	r0, #120	@ 0x78
 8002f34:	f000 fafe 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f38:	228d      	movs	r2, #141	@ 0x8d
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2078      	movs	r0, #120	@ 0x78
 8002f3e:	f000 faf9 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002f42:	2214      	movs	r2, #20
 8002f44:	2100      	movs	r1, #0
 8002f46:	2078      	movs	r0, #120	@ 0x78
 8002f48:	f000 faf4 	bl	8003534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002f4c:	22af      	movs	r2, #175	@ 0xaf
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2078      	movs	r0, #120	@ 0x78
 8002f52:	f000 faef 	bl	8003534 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002f56:	222e      	movs	r2, #46	@ 0x2e
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2078      	movs	r0, #120	@ 0x78
 8002f5c:	f000 faea 	bl	8003534 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f000 f843 	bl	8002fec <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002f66:	f000 f813 	bl	8002f90 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <SSD1306_Init+0x184>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <SSD1306_Init+0x184>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <SSD1306_Init+0x184>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200010cc 	.word	0x200010cc
 8002f8c:	20002430 	.word	0x20002430

08002f90 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002f96:	2300      	movs	r3, #0
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	e01d      	b.n	8002fd8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	3b50      	subs	r3, #80	@ 0x50
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2078      	movs	r0, #120	@ 0x78
 8002fa8:	f000 fac4 	bl	8003534 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2078      	movs	r0, #120	@ 0x78
 8002fb2:	f000 fabf 	bl	8003534 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2078      	movs	r0, #120	@ 0x78
 8002fbc:	f000 faba 	bl	8003534 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	01db      	lsls	r3, r3, #7
 8002fc4:	4a08      	ldr	r2, [pc, #32]	@ (8002fe8 <SSD1306_UpdateScreen+0x58>)
 8002fc6:	441a      	add	r2, r3
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	2140      	movs	r1, #64	@ 0x40
 8002fcc:	2078      	movs	r0, #120	@ 0x78
 8002fce:	f000 fa4b 	bl	8003468 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	71fb      	strb	r3, [r7, #7]
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	d9de      	bls.n	8002f9c <SSD1306_UpdateScreen+0xc>
	}
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20002030 	.word	0x20002030

08002fec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <SSD1306_Fill+0x14>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <SSD1306_Fill+0x16>
 8003000:	23ff      	movs	r3, #255	@ 0xff
 8003002:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003006:	4619      	mov	r1, r3
 8003008:	4803      	ldr	r0, [pc, #12]	@ (8003018 <SSD1306_Fill+0x2c>)
 800300a:	f008 f819 	bl	800b040 <memset>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20002030 	.word	0x20002030

0800301c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
 8003026:	460b      	mov	r3, r1
 8003028:	80bb      	strh	r3, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	70fb      	strb	r3, [r7, #3]
	if (
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b7f      	cmp	r3, #127	@ 0x7f
 8003032:	d848      	bhi.n	80030c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003034:	88bb      	ldrh	r3, [r7, #4]
 8003036:	2b3f      	cmp	r3, #63	@ 0x3f
 8003038:	d845      	bhi.n	80030c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800303a:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <SSD1306_DrawPixel+0xb4>)
 800303c:	791b      	ldrb	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d11a      	bne.n	800308c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	08db      	lsrs	r3, r3, #3
 800305c:	b298      	uxth	r0, r3
 800305e:	4603      	mov	r3, r0
 8003060:	01db      	lsls	r3, r3, #7
 8003062:	4413      	add	r3, r2
 8003064:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <SSD1306_DrawPixel+0xb8>)
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	b25a      	sxtb	r2, r3
 800306a:	88bb      	ldrh	r3, [r7, #4]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	b25b      	sxtb	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	b259      	sxtb	r1, r3
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	4603      	mov	r3, r0
 8003080:	01db      	lsls	r3, r3, #7
 8003082:	4413      	add	r3, r2
 8003084:	b2c9      	uxtb	r1, r1
 8003086:	4a13      	ldr	r2, [pc, #76]	@ (80030d4 <SSD1306_DrawPixel+0xb8>)
 8003088:	54d1      	strb	r1, [r2, r3]
 800308a:	e01d      	b.n	80030c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	88bb      	ldrh	r3, [r7, #4]
 8003090:	08db      	lsrs	r3, r3, #3
 8003092:	b298      	uxth	r0, r3
 8003094:	4603      	mov	r3, r0
 8003096:	01db      	lsls	r3, r3, #7
 8003098:	4413      	add	r3, r2
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <SSD1306_DrawPixel+0xb8>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	b25a      	sxtb	r2, r3
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	4013      	ands	r3, r2
 80030b4:	b259      	sxtb	r1, r3
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	4603      	mov	r3, r0
 80030ba:	01db      	lsls	r3, r3, #7
 80030bc:	4413      	add	r3, r2
 80030be:	b2c9      	uxtb	r1, r1
 80030c0:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <SSD1306_DrawPixel+0xb8>)
 80030c2:	54d1      	strb	r1, [r2, r3]
 80030c4:	e000      	b.n	80030c8 <SSD1306_DrawPixel+0xac>
		return;
 80030c6:	bf00      	nop
	}
}
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20002430 	.word	0x20002430
 80030d4:	20002030 	.word	0x20002030

080030d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	460a      	mov	r2, r1
 80030e2:	80fb      	strh	r3, [r7, #6]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80030e8:	4a05      	ldr	r2, [pc, #20]	@ (8003100 <SSD1306_GotoXY+0x28>)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80030ee:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <SSD1306_GotoXY+0x28>)
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	8053      	strh	r3, [r2, #2]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20002430 	.word	0x20002430

08003104 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	71fb      	strb	r3, [r7, #7]
 8003110:	4613      	mov	r3, r2
 8003112:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003114:	4b39      	ldr	r3, [pc, #228]	@ (80031fc <SSD1306_Putc+0xf8>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
	if (
 8003120:	2b7f      	cmp	r3, #127	@ 0x7f
 8003122:	dc07      	bgt.n	8003134 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003124:	4b35      	ldr	r3, [pc, #212]	@ (80031fc <SSD1306_Putc+0xf8>)
 8003126:	885b      	ldrh	r3, [r3, #2]
 8003128:	461a      	mov	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003130:	2b3f      	cmp	r3, #63	@ 0x3f
 8003132:	dd01      	ble.n	8003138 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003134:	2300      	movs	r3, #0
 8003136:	e05d      	b.n	80031f4 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e04b      	b.n	80031d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	3b20      	subs	r3, #32
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	7849      	ldrb	r1, [r1, #1]
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4619      	mov	r1, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	440b      	add	r3, r1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	e030      	b.n	80031c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d010      	beq.n	8003194 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003172:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <SSD1306_Putc+0xf8>)
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	b29b      	uxth	r3, r3
 800317a:	4413      	add	r3, r2
 800317c:	b298      	uxth	r0, r3
 800317e:	4b1f      	ldr	r3, [pc, #124]	@ (80031fc <SSD1306_Putc+0xf8>)
 8003180:	885a      	ldrh	r2, [r3, #2]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	b29b      	uxth	r3, r3
 8003186:	4413      	add	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	79ba      	ldrb	r2, [r7, #6]
 800318c:	4619      	mov	r1, r3
 800318e:	f7ff ff45 	bl	800301c <SSD1306_DrawPixel>
 8003192:	e014      	b.n	80031be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003194:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <SSD1306_Putc+0xf8>)
 8003196:	881a      	ldrh	r2, [r3, #0]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	b29b      	uxth	r3, r3
 800319c:	4413      	add	r3, r2
 800319e:	b298      	uxth	r0, r3
 80031a0:	4b16      	ldr	r3, [pc, #88]	@ (80031fc <SSD1306_Putc+0xf8>)
 80031a2:	885a      	ldrh	r2, [r3, #2]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	b299      	uxth	r1, r3
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	f7ff ff2f 	bl	800301c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3301      	adds	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d3c8      	bcc.n	8003162 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	461a      	mov	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4293      	cmp	r3, r2
 80031e0:	d3ad      	bcc.n	800313e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <SSD1306_Putc+0xf8>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <SSD1306_Putc+0xf8>)
 80031f0:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80031f2:	79fb      	ldrb	r3, [r7, #7]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20002430 	.word	0x20002430

08003200 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800320e:	e012      	b.n	8003236 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	79fa      	ldrb	r2, [r7, #7]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff73 	bl	8003104 <SSD1306_Putc>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d002      	beq.n	8003230 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	e008      	b.n	8003242 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e8      	bne.n	8003210 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800324a:	b590      	push	{r4, r7, lr}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	4604      	mov	r4, r0
 8003252:	4608      	mov	r0, r1
 8003254:	4611      	mov	r1, r2
 8003256:	461a      	mov	r2, r3
 8003258:	4623      	mov	r3, r4
 800325a:	80fb      	strh	r3, [r7, #6]
 800325c:	4603      	mov	r3, r0
 800325e:	80bb      	strh	r3, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b7f      	cmp	r3, #127	@ 0x7f
 800326c:	d901      	bls.n	8003272 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800326e:	237f      	movs	r3, #127	@ 0x7f
 8003270:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	2b7f      	cmp	r3, #127	@ 0x7f
 8003276:	d901      	bls.n	800327c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003278:	237f      	movs	r3, #127	@ 0x7f
 800327a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800327c:	88bb      	ldrh	r3, [r7, #4]
 800327e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003280:	d901      	bls.n	8003286 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003282:	233f      	movs	r3, #63	@ 0x3f
 8003284:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003286:	883b      	ldrh	r3, [r7, #0]
 8003288:	2b3f      	cmp	r3, #63	@ 0x3f
 800328a:	d901      	bls.n	8003290 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800328c:	233f      	movs	r3, #63	@ 0x3f
 800328e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	429a      	cmp	r2, r3
 8003296:	d205      	bcs.n	80032a4 <SSD1306_DrawLine+0x5a>
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	e004      	b.n	80032ae <SSD1306_DrawLine+0x64>
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	b21b      	sxth	r3, r3
 80032ae:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80032b0:	88ba      	ldrh	r2, [r7, #4]
 80032b2:	883b      	ldrh	r3, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d205      	bcs.n	80032c4 <SSD1306_DrawLine+0x7a>
 80032b8:	883a      	ldrh	r2, [r7, #0]
 80032ba:	88bb      	ldrh	r3, [r7, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	e004      	b.n	80032ce <SSD1306_DrawLine+0x84>
 80032c4:	88ba      	ldrh	r2, [r7, #4]
 80032c6:	883b      	ldrh	r3, [r7, #0]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d201      	bcs.n	80032dc <SSD1306_DrawLine+0x92>
 80032d8:	2301      	movs	r3, #1
 80032da:	e001      	b.n	80032e0 <SSD1306_DrawLine+0x96>
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80032e2:	88ba      	ldrh	r2, [r7, #4]
 80032e4:	883b      	ldrh	r3, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d201      	bcs.n	80032ee <SSD1306_DrawLine+0xa4>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e001      	b.n	80032f2 <SSD1306_DrawLine+0xa8>
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80032f4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80032f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dd06      	ble.n	800330e <SSD1306_DrawLine+0xc4>
 8003300:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003304:	0fda      	lsrs	r2, r3, #31
 8003306:	4413      	add	r3, r2
 8003308:	105b      	asrs	r3, r3, #1
 800330a:	b21b      	sxth	r3, r3
 800330c:	e006      	b.n	800331c <SSD1306_DrawLine+0xd2>
 800330e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003312:	0fda      	lsrs	r2, r3, #31
 8003314:	4413      	add	r3, r2
 8003316:	105b      	asrs	r3, r3, #1
 8003318:	425b      	negs	r3, r3
 800331a:	b21b      	sxth	r3, r3
 800331c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800331e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d129      	bne.n	800337a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8003326:	883a      	ldrh	r2, [r7, #0]
 8003328:	88bb      	ldrh	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d205      	bcs.n	800333a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800332e:	883b      	ldrh	r3, [r7, #0]
 8003330:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003332:	88bb      	ldrh	r3, [r7, #4]
 8003334:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	429a      	cmp	r2, r3
 8003340:	d205      	bcs.n	800334e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800334a:	893b      	ldrh	r3, [r7, #8]
 800334c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800334e:	88bb      	ldrh	r3, [r7, #4]
 8003350:	82bb      	strh	r3, [r7, #20]
 8003352:	e00c      	b.n	800336e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8003354:	8ab9      	ldrh	r1, [r7, #20]
 8003356:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fe5d 	bl	800301c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003362:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003366:	b29b      	uxth	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	b29b      	uxth	r3, r3
 800336c:	82bb      	strh	r3, [r7, #20]
 800336e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003372:	883b      	ldrh	r3, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	dded      	ble.n	8003354 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8003378:	e05f      	b.n	800343a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800337a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d129      	bne.n	80033d6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8003382:	883a      	ldrh	r2, [r7, #0]
 8003384:	88bb      	ldrh	r3, [r7, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d205      	bcs.n	8003396 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800338a:	883b      	ldrh	r3, [r7, #0]
 800338c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800338e:	88bb      	ldrh	r3, [r7, #4]
 8003390:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003392:	893b      	ldrh	r3, [r7, #8]
 8003394:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	429a      	cmp	r2, r3
 800339c:	d205      	bcs.n	80033aa <SSD1306_DrawLine+0x160>
			tmp = x1;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80033a6:	893b      	ldrh	r3, [r7, #8]
 80033a8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	82bb      	strh	r3, [r7, #20]
 80033ae:	e00c      	b.n	80033ca <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80033b0:	8abb      	ldrh	r3, [r7, #20]
 80033b2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80033b6:	88b9      	ldrh	r1, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fe2f 	bl	800301c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80033be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	82bb      	strh	r3, [r7, #20]
 80033ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	dded      	ble.n	80033b0 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80033d4:	e031      	b.n	800343a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80033d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80033da:	88b9      	ldrh	r1, [r7, #4]
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fe1c 	bl	800301c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <SSD1306_DrawLine+0x1aa>
 80033ec:	88ba      	ldrh	r2, [r7, #4]
 80033ee:	883b      	ldrh	r3, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d021      	beq.n	8003438 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80033f4:	8afb      	ldrh	r3, [r7, #22]
 80033f6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80033f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003400:	425b      	negs	r3, r3
 8003402:	429a      	cmp	r2, r3
 8003404:	dd08      	ble.n	8003418 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003406:	8afa      	ldrh	r2, [r7, #22]
 8003408:	8a3b      	ldrh	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003410:	89fa      	ldrh	r2, [r7, #14]
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	4413      	add	r3, r2
 8003416:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8003418:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800341c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	dad8      	bge.n	80033d6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8003424:	8afa      	ldrh	r2, [r7, #22]
 8003426:	8a7b      	ldrh	r3, [r7, #18]
 8003428:	4413      	add	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800342e:	89ba      	ldrh	r2, [r7, #12]
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8003436:	e7ce      	b.n	80033d6 <SSD1306_DrawLine+0x18c>
			break;
 8003438:	bf00      	nop
		} 
	}
}
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd90      	pop	{r4, r7, pc}

08003440 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <ssd1306_I2C_Init+0x24>)
 8003448:	607b      	str	r3, [r7, #4]
	while(p>0)
 800344a:	e002      	b.n	8003452 <ssd1306_I2C_Init+0x12>
		p--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f9      	bne.n	800344c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	0003d090 	.word	0x0003d090

08003468 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b0c7      	sub	sp, #284	@ 0x11c
 800346c:	af02      	add	r7, sp, #8
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003476:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800347a:	600a      	str	r2, [r1, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003482:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003486:	4622      	mov	r2, r4
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800348e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003492:	4602      	mov	r2, r0
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800349a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800349e:	460a      	mov	r2, r1
 80034a0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80034a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80034ae:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80034bc:	e015      	b.n	80034ea <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80034be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80034c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80034c6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	441a      	add	r2, r3
 80034ce:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80034d2:	3301      	adds	r3, #1
 80034d4:	7811      	ldrb	r1, [r2, #0]
 80034d6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80034da:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80034de:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80034e0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80034e4:	3301      	adds	r3, #1
 80034e6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80034ea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80034f4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80034f8:	8812      	ldrh	r2, [r2, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d8df      	bhi.n	80034be <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80034fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003502:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b299      	uxth	r1, r3
 800350a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800350e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b29b      	uxth	r3, r3
 8003518:	f107 020c 	add.w	r2, r7, #12
 800351c:	200a      	movs	r0, #10
 800351e:	9000      	str	r0, [sp, #0]
 8003520:	4803      	ldr	r0, [pc, #12]	@ (8003530 <ssd1306_I2C_WriteMulti+0xc8>)
 8003522:	f001 fddf 	bl	80050e4 <HAL_I2C_Master_Transmit>
}
 8003526:	bf00      	nop
 8003528:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	200010cc 	.word	0x200010cc

08003534 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
 800353e:	460b      	mov	r3, r1
 8003540:	71bb      	strb	r3, [r7, #6]
 8003542:	4613      	mov	r3, r2
 8003544:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003546:	79bb      	ldrb	r3, [r7, #6]
 8003548:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800354a:	797b      	ldrb	r3, [r7, #5]
 800354c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	b299      	uxth	r1, r3
 8003552:	f107 020c 	add.w	r2, r7, #12
 8003556:	230a      	movs	r3, #10
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2302      	movs	r3, #2
 800355c:	4803      	ldr	r0, [pc, #12]	@ (800356c <ssd1306_I2C_Write+0x38>)
 800355e:	f001 fdc1 	bl	80050e4 <HAL_I2C_Master_Transmit>
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200010cc 	.word	0x200010cc

08003570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003576:	4b18      	ldr	r3, [pc, #96]	@ (80035d8 <HAL_MspInit+0x68>)
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <HAL_MspInit+0x68>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6193      	str	r3, [r2, #24]
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_MspInit+0x68>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <HAL_MspInit+0x68>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4a11      	ldr	r2, [pc, #68]	@ (80035d8 <HAL_MspInit+0x68>)
 8003594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003598:	61d3      	str	r3, [r2, #28]
 800359a:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <HAL_MspInit+0x68>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	210f      	movs	r1, #15
 80035aa:	f06f 0001 	mvn.w	r0, #1
 80035ae:	f001 f88c 	bl	80046ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035b2:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <HAL_MspInit+0x6c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_MspInit+0x6c>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40010000 	.word	0x40010000

080035e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a18      	ldr	r2, [pc, #96]	@ (800365c <HAL_ADC_MspInit+0x7c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d129      	bne.n	8003654 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003600:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <HAL_ADC_MspInit+0x80>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <HAL_ADC_MspInit+0x80>)
 8003606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <HAL_ADC_MspInit+0x80>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003618:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <HAL_ADC_MspInit+0x80>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <HAL_ADC_MspInit+0x80>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6193      	str	r3, [r2, #24]
 8003624:	4b0e      	ldr	r3, [pc, #56]	@ (8003660 <HAL_ADC_MspInit+0x80>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003630:	2320      	movs	r3, #32
 8003632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003634:	2303      	movs	r3, #3
 8003636:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	4619      	mov	r1, r3
 800363e:	4809      	ldr	r0, [pc, #36]	@ (8003664 <HAL_ADC_MspInit+0x84>)
 8003640:	f001 fa40 	bl	8004ac4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8003644:	2200      	movs	r2, #0
 8003646:	2105      	movs	r1, #5
 8003648:	2012      	movs	r0, #18
 800364a:	f001 f83e 	bl	80046ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800364e:	2012      	movs	r0, #18
 8003650:	f001 f857 	bl	8004702 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003654:	bf00      	nop
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40012400 	.word	0x40012400
 8003660:	40021000 	.word	0x40021000
 8003664:	40010800 	.word	0x40010800

08003668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a15      	ldr	r2, [pc, #84]	@ (80036d8 <HAL_I2C_MspInit+0x70>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d123      	bne.n	80036d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003688:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <HAL_I2C_MspInit+0x74>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4a13      	ldr	r2, [pc, #76]	@ (80036dc <HAL_I2C_MspInit+0x74>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6193      	str	r3, [r2, #24]
 8003694:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_I2C_MspInit+0x74>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036a0:	23c0      	movs	r3, #192	@ 0xc0
 80036a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a4:	2312      	movs	r3, #18
 80036a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a8:	2303      	movs	r3, #3
 80036aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	4619      	mov	r1, r3
 80036b2:	480b      	ldr	r0, [pc, #44]	@ (80036e0 <HAL_I2C_MspInit+0x78>)
 80036b4:	f001 fa06 	bl	8004ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_I2C_MspInit+0x74>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4a07      	ldr	r2, [pc, #28]	@ (80036dc <HAL_I2C_MspInit+0x74>)
 80036be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036c2:	61d3      	str	r3, [r2, #28]
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <HAL_I2C_MspInit+0x74>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80036d0:	bf00      	nop
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40005400 	.word	0x40005400
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010c00 	.word	0x40010c00

080036e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a32      	ldr	r2, [pc, #200]	@ (80037bc <HAL_TIM_Base_MspInit+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d133      	bne.n	800375e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036f6:	4b32      	ldr	r3, [pc, #200]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	4a31      	ldr	r2, [pc, #196]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 80036fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003700:	6193      	str	r3, [r2, #24]
 8003702:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 800370e:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003710:	4a2d      	ldr	r2, [pc, #180]	@ (80037c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003712:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003714:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003716:	2210      	movs	r2, #16
 8003718:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800371a:	4b2a      	ldr	r3, [pc, #168]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003720:	4b28      	ldr	r3, [pc, #160]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003722:	2280      	movs	r2, #128	@ 0x80
 8003724:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003726:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003728:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800372c:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800372e:	4b25      	ldr	r3, [pc, #148]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003734:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003736:	2220      	movs	r2, #32
 8003738:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 800373a:	4b22      	ldr	r3, [pc, #136]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 800373c:	2200      	movs	r2, #0
 800373e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003740:	4820      	ldr	r0, [pc, #128]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003742:	f000 ffed 	bl	8004720 <HAL_DMA_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 800374c:	f7ff fb56 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a1c      	ldr	r2, [pc, #112]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003754:	621a      	str	r2, [r3, #32]
 8003756:	4a1b      	ldr	r2, [pc, #108]	@ (80037c4 <HAL_TIM_Base_MspInit+0xe0>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800375c:	e02a      	b.n	80037b4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003766:	d10c      	bne.n	8003782 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	61d3      	str	r3, [r2, #28]
 8003774:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]
}
 8003780:	e018      	b.n	80037b4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a11      	ldr	r2, [pc, #68]	@ (80037cc <HAL_TIM_Base_MspInit+0xe8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d113      	bne.n	80037b4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	4a0b      	ldr	r2, [pc, #44]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	61d3      	str	r3, [r2, #28]
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_TIM_Base_MspInit+0xdc>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2105      	movs	r1, #5
 80037a8:	201d      	movs	r0, #29
 80037aa:	f000 ff8e 	bl	80046ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037ae:	201d      	movs	r0, #29
 80037b0:	f000 ffa7 	bl	8004702 <HAL_NVIC_EnableIRQ>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	200011f8 	.word	0x200011f8
 80037c8:	40020058 	.word	0x40020058
 80037cc:	40000400 	.word	0x40000400

080037d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ee:	d12a      	bne.n	8003846 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f0:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <HAL_TIM_MspPostInit+0x80>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4a16      	ldr	r2, [pc, #88]	@ (8003850 <HAL_TIM_MspPostInit+0x80>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6193      	str	r3, [r2, #24]
 80037fc:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <HAL_TIM_MspPostInit+0x80>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800380c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	2302      	movs	r3, #2
 8003814:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	4619      	mov	r1, r3
 800381c:	480d      	ldr	r0, [pc, #52]	@ (8003854 <HAL_TIM_MspPostInit+0x84>)
 800381e:	f001 f951 	bl	8004ac4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003822:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <HAL_TIM_MspPostInit+0x88>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	4a05      	ldr	r2, [pc, #20]	@ (8003858 <HAL_TIM_MspPostInit+0x88>)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003846:	bf00      	nop
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	40010800 	.word	0x40010800
 8003858:	40010000 	.word	0x40010000

0800385c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <HAL_UART_MspInit+0x8c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d131      	bne.n	80038e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <HAL_UART_MspInit+0x90>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	4a1a      	ldr	r2, [pc, #104]	@ (80038ec <HAL_UART_MspInit+0x90>)
 8003882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003886:	6193      	str	r3, [r2, #24]
 8003888:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <HAL_UART_MspInit+0x90>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003894:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <HAL_UART_MspInit+0x90>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <HAL_UART_MspInit+0x90>)
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	6193      	str	r3, [r2, #24]
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_UART_MspInit+0x90>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	f107 0310 	add.w	r3, r7, #16
 80038be:	4619      	mov	r1, r3
 80038c0:	480b      	ldr	r0, [pc, #44]	@ (80038f0 <HAL_UART_MspInit+0x94>)
 80038c2:	f001 f8ff 	bl	8004ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	f107 0310 	add.w	r3, r7, #16
 80038d8:	4619      	mov	r1, r3
 80038da:	4805      	ldr	r0, [pc, #20]	@ (80038f0 <HAL_UART_MspInit+0x94>)
 80038dc:	f001 f8f2 	bl	8004ac4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40010800 	.word	0x40010800

080038f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	@ 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800390a:	4b34      	ldr	r3, [pc, #208]	@ (80039dc <HAL_InitTick+0xe8>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a33      	ldr	r2, [pc, #204]	@ (80039dc <HAL_InitTick+0xe8>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	61d3      	str	r3, [r2, #28]
 8003916:	4b31      	ldr	r3, [pc, #196]	@ (80039dc <HAL_InitTick+0xe8>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003922:	f107 0210 	add.w	r2, r7, #16
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fc51 	bl	80061d4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800393c:	f002 fc22 	bl	8006184 <HAL_RCC_GetPCLK1Freq>
 8003940:	6378      	str	r0, [r7, #52]	@ 0x34
 8003942:	e004      	b.n	800394e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003944:	f002 fc1e 	bl	8006184 <HAL_RCC_GetPCLK1Freq>
 8003948:	4603      	mov	r3, r0
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800394e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003950:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <HAL_InitTick+0xec>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9b      	lsrs	r3, r3, #18
 8003958:	3b01      	subs	r3, #1
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800395c:	4b21      	ldr	r3, [pc, #132]	@ (80039e4 <HAL_InitTick+0xf0>)
 800395e:	4a22      	ldr	r2, [pc, #136]	@ (80039e8 <HAL_InitTick+0xf4>)
 8003960:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003962:	4b20      	ldr	r3, [pc, #128]	@ (80039e4 <HAL_InitTick+0xf0>)
 8003964:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003968:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800396a:	4a1e      	ldr	r2, [pc, #120]	@ (80039e4 <HAL_InitTick+0xf0>)
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003970:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <HAL_InitTick+0xf0>)
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003976:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_InitTick+0xf0>)
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397c:	4b19      	ldr	r3, [pc, #100]	@ (80039e4 <HAL_InitTick+0xf0>)
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003982:	4818      	ldr	r0, [pc, #96]	@ (80039e4 <HAL_InitTick+0xf0>)
 8003984:	f002 fde0 	bl	8006548 <HAL_TIM_Base_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800398e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11b      	bne.n	80039ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003996:	4813      	ldr	r0, [pc, #76]	@ (80039e4 <HAL_InitTick+0xf0>)
 8003998:	f002 fe70 	bl	800667c <HAL_TIM_Base_Start_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80039a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d111      	bne.n	80039ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039aa:	201e      	movs	r0, #30
 80039ac:	f000 fea9 	bl	8004702 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d808      	bhi.n	80039c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80039b6:	2200      	movs	r2, #0
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	201e      	movs	r0, #30
 80039bc:	f000 fe85 	bl	80046ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039c0:	4a0a      	ldr	r2, [pc, #40]	@ (80039ec <HAL_InitTick+0xf8>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e002      	b.n	80039ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80039ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3738      	adds	r7, #56	@ 0x38
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	431bde83 	.word	0x431bde83
 80039e4:	20002438 	.word	0x20002438
 80039e8:	40000800 	.word	0x40000800
 80039ec:	20001014 	.word	0x20001014

080039f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <NMI_Handler+0x4>

080039f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <HardFault_Handler+0x4>

08003a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <MemManage_Handler+0x4>

08003a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <BusFault_Handler+0x4>

08003a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <UsageFault_Handler+0x4>

08003a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003a28:	4802      	ldr	r0, [pc, #8]	@ (8003a34 <DMA1_Channel5_IRQHandler+0x10>)
 8003a2a:	f000 ff17 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200011f8 	.word	0x200011f8

08003a38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a3c:	4802      	ldr	r0, [pc, #8]	@ (8003a48 <ADC1_2_IRQHandler+0x10>)
 8003a3e:	f000 fa7b 	bl	8003f38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000109c 	.word	0x2000109c

08003a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a50:	4802      	ldr	r0, [pc, #8]	@ (8003a5c <TIM3_IRQHandler+0x10>)
 8003a52:	f002 ff5f 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200011b0 	.word	0x200011b0

08003a60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a64:	4802      	ldr	r0, [pc, #8]	@ (8003a70 <TIM4_IRQHandler+0x10>)
 8003a66:	f002 ff55 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20002438 	.word	0x20002438

08003a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a7c:	4a14      	ldr	r2, [pc, #80]	@ (8003ad0 <_sbrk+0x5c>)
 8003a7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <_sbrk+0x60>)
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a88:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <_sbrk+0x64>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a90:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <_sbrk+0x64>)
 8003a92:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <_sbrk+0x68>)
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a96:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <_sbrk+0x64>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d207      	bcs.n	8003ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa4:	f007 fb2a 	bl	800b0fc <__errno>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	220c      	movs	r2, #12
 8003aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	e009      	b.n	8003ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <_sbrk+0x64>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aba:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <_sbrk+0x64>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <_sbrk+0x64>)
 8003ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20005000 	.word	0x20005000
 8003ad4:	00000400 	.word	0x00000400
 8003ad8:	20002480 	.word	0x20002480
 8003adc:	20004138 	.word	0x20004138

08003ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003aec:	f7ff fff8 	bl	8003ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003af0:	480b      	ldr	r0, [pc, #44]	@ (8003b20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003af2:	490c      	ldr	r1, [pc, #48]	@ (8003b24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003af4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af8:	e002      	b.n	8003b00 <LoopCopyDataInit>

08003afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afe:	3304      	adds	r3, #4

08003b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b04:	d3f9      	bcc.n	8003afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b06:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b08:	4c09      	ldr	r4, [pc, #36]	@ (8003b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b0c:	e001      	b.n	8003b12 <LoopFillZerobss>

08003b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b10:	3204      	adds	r2, #4

08003b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b14:	d3fb      	bcc.n	8003b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b16:	f007 faf7 	bl	800b108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b1a:	f7fd fc93 	bl	8001444 <main>
  bx lr
 8003b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b24:	20001080 	.word	0x20001080
  ldr r2, =_sidata
 8003b28:	0800d720 	.word	0x0800d720
  ldr r2, =_sbss
 8003b2c:	20001080 	.word	0x20001080
  ldr r4, =_ebss
 8003b30:	20004134 	.word	0x20004134

08003b34 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b34:	e7fe      	b.n	8003b34 <CAN1_RX1_IRQHandler>
	...

08003b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_Init+0x28>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a07      	ldr	r2, [pc, #28]	@ (8003b60 <HAL_Init+0x28>)
 8003b42:	f043 0310 	orr.w	r3, r3, #16
 8003b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f000 fdb3 	bl	80046b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b4e:	200f      	movs	r0, #15
 8003b50:	f7ff fed0 	bl	80038f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b54:	f7ff fd0c 	bl	8003570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40022000 	.word	0x40022000

08003b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_IncTick+0x1c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_IncTick+0x20>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	4a03      	ldr	r2, [pc, #12]	@ (8003b84 <HAL_IncTick+0x20>)
 8003b76:	6013      	str	r3, [r2, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20001018 	.word	0x20001018
 8003b84:	20002484 	.word	0x20002484

08003b88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b02      	ldr	r3, [pc, #8]	@ (8003b98 <HAL_GetTick+0x10>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	20002484 	.word	0x20002484

08003b9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0be      	b.n	8003d3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fd00 	bl	80035e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fbc3 	bl	800436c <ADC_ConversionStop_Disable>
 8003be6:	4603      	mov	r3, r0
 8003be8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 8099 	bne.w	8003d2a <HAL_ADC_Init+0x18e>
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 8095 	bne.w	8003d2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c08:	f023 0302 	bic.w	r3, r3, #2
 8003c0c:	f043 0202 	orr.w	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7b1b      	ldrb	r3, [r3, #12]
 8003c22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c34:	d003      	beq.n	8003c3e <HAL_ADC_Init+0xa2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_ADC_Init+0xa8>
 8003c3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_Init+0xaa>
 8003c44:	2300      	movs	r3, #0
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7d1b      	ldrb	r3, [r3, #20]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d119      	bne.n	8003c88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7b1b      	ldrb	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	035a      	lsls	r2, r3, #13
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e00b      	b.n	8003c88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	4b28      	ldr	r3, [pc, #160]	@ (8003d44 <HAL_ADC_Init+0x1a8>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb8:	d003      	beq.n	8003cc2 <HAL_ADC_Init+0x126>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d104      	bne.n	8003ccc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	051b      	lsls	r3, r3, #20
 8003cca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <HAL_ADC_Init+0x1ac>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d10b      	bne.n	8003d08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d06:	e018      	b.n	8003d3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	f023 0312 	bic.w	r3, r3, #18
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d28:	e007      	b.n	8003d3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	f043 0210 	orr.w	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	ffe1f7fd 	.word	0xffe1f7fd
 8003d48:	ff1f0efe 	.word	0xff1f0efe

08003d4c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_Start_IT+0x1a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0a0      	b.n	8003ea8 <HAL_ADC_Start_IT+0x15c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 faa2 	bl	80042b8 <ADC_Enable>
 8003d74:	4603      	mov	r3, r0
 8003d76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 808f 	bne.w	8003e9e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a45      	ldr	r2, [pc, #276]	@ (8003eb0 <HAL_ADC_Start_IT+0x164>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d105      	bne.n	8003daa <HAL_ADC_Start_IT+0x5e>
 8003d9e:	4b45      	ldr	r3, [pc, #276]	@ (8003eb4 <HAL_ADC_Start_IT+0x168>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d115      	bne.n	8003dd6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d026      	beq.n	8003e12 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dcc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dd4:	e01d      	b.n	8003e12 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a33      	ldr	r2, [pc, #204]	@ (8003eb4 <HAL_ADC_Start_IT+0x168>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_ADC_Start_IT+0xaa>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb0 <HAL_ADC_Start_IT+0x164>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10d      	bne.n	8003e12 <HAL_ADC_Start_IT+0xc6>
 8003df6:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb4 <HAL_ADC_Start_IT+0x168>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f023 0206 	bic.w	r2, r3, #6
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e2a:	e002      	b.n	8003e32 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f06f 0202 	mvn.w	r2, #2
 8003e42:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0220 	orr.w	r2, r2, #32
 8003e52:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003e5e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003e62:	d113      	bne.n	8003e8c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e68:	4a11      	ldr	r2, [pc, #68]	@ (8003eb0 <HAL_ADC_Start_IT+0x164>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003e6e:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_ADC_Start_IT+0x168>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d108      	bne.n	8003e8c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	e00c      	b.n	8003ea6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e003      	b.n	8003ea6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40012800 	.word	0x40012800
 8003eb4:	40012400 	.word	0x40012400

08003eb8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_Stop_IT+0x1a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e022      	b.n	8003f18 <HAL_ADC_Stop_IT+0x60>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa46 	bl	800436c <ADC_ConversionStop_Disable>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d111      	bne.n	8003f0e <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0220 	bic.w	r2, r2, #32
 8003ef8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d03e      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d039      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003f8a:	d11d      	bne.n	8003fc8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d119      	bne.n	8003fc8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0220 	bic.w	r2, r2, #32
 8003fa2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	f043 0201 	orr.w	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fd fdb3 	bl	8001b34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0212 	mvn.w	r2, #18
 8003fd6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04d      	beq.n	800407e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d048      	beq.n	800407e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800400e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8004012:	d012      	beq.n	800403a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800401e:	2b00      	cmp	r3, #0
 8004020:	d125      	bne.n	800406e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800402c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004030:	d11d      	bne.n	800406e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d119      	bne.n	800406e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004048:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa6c 	bl	800454c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 020c 	mvn.w	r2, #12
 800407c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d012      	beq.n	80040ae <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f809 	bl	80040b6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0201 	mvn.w	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x20>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0dc      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x1da>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d81c      	bhi.n	8004132 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	3b05      	subs	r3, #5
 800410a:	221f      	movs	r2, #31
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	4019      	ands	r1, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	3b05      	subs	r3, #5
 8004124:	fa00 f203 	lsl.w	r2, r0, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004130:	e03c      	b.n	80041ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d81c      	bhi.n	8004174 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	3b23      	subs	r3, #35	@ 0x23
 800414c:	221f      	movs	r2, #31
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	4019      	ands	r1, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	3b23      	subs	r3, #35	@ 0x23
 8004166:	fa00 f203 	lsl.w	r2, r0, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30
 8004172:	e01b      	b.n	80041ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	3b41      	subs	r3, #65	@ 0x41
 8004186:	221f      	movs	r2, #31
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	4019      	ands	r1, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b41      	subs	r3, #65	@ 0x41
 80041a0:	fa00 f203 	lsl.w	r2, r0, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b09      	cmp	r3, #9
 80041b2:	d91c      	bls.n	80041ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68d9      	ldr	r1, [r3, #12]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	3b1e      	subs	r3, #30
 80041c6:	2207      	movs	r2, #7
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4019      	ands	r1, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6898      	ldr	r0, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	3b1e      	subs	r3, #30
 80041e0:	fa00 f203 	lsl.w	r2, r0, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e019      	b.n	8004222 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6919      	ldr	r1, [r3, #16]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	2207      	movs	r2, #7
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	4019      	ands	r1, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6898      	ldr	r0, [r3, #8]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	fa00 f203 	lsl.w	r2, r0, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b10      	cmp	r3, #16
 8004228:	d003      	beq.n	8004232 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800422e:	2b11      	cmp	r3, #17
 8004230:	d132      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <HAL_ADC_ConfigChannel+0x1e4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d125      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d126      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004258:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d11a      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004262:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0c9a      	lsrs	r2, r3, #18
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004278:	e002      	b.n	8004280 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3b01      	subs	r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f9      	bne.n	800427a <HAL_ADC_ConfigChannel+0x1b2>
 8004286:	e007      	b.n	8004298 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	40012400 	.word	0x40012400
 80042b0:	20001010 	.word	0x20001010
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d040      	beq.n	8004358 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004364 <ADC_Enable+0xac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004368 <ADC_Enable+0xb0>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	0c9b      	lsrs	r3, r3, #18
 80042f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80042f4:	e002      	b.n	80042fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f9      	bne.n	80042f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004302:	f7ff fc41 	bl	8003b88 <HAL_GetTick>
 8004306:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004308:	e01f      	b.n	800434a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800430a:	f7ff fc3d 	bl	8003b88 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d918      	bls.n	800434a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d011      	beq.n	800434a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	f043 0210 	orr.w	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e007      	b.n	800435a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d1d8      	bne.n	800430a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20001010 	.word	0x20001010
 8004368:	431bde83 	.word	0x431bde83

0800436c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12e      	bne.n	80043e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004396:	f7ff fbf7 	bl	8003b88 <HAL_GetTick>
 800439a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800439c:	e01b      	b.n	80043d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800439e:	f7ff fbf3 	bl	8003b88 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d914      	bls.n	80043d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e007      	b.n	80043e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d0dc      	beq.n	800439e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_ADCEx_Calibration_Start+0x1e>
 800440a:	2302      	movs	r3, #2
 800440c:	e097      	b.n	800453e <HAL_ADCEx_Calibration_Start+0x14e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ffa8 	bl	800436c <ADC_ConversionStop_Disable>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff49 	bl	80042b8 <ADC_Enable>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 8081 	bne.w	8004534 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800443a:	f023 0302 	bic.w	r3, r3, #2
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004446:	4b40      	ldr	r3, [pc, #256]	@ (8004548 <HAL_ADCEx_Calibration_Start+0x158>)
 8004448:	681c      	ldr	r4, [r3, #0]
 800444a:	2002      	movs	r0, #2
 800444c:	f001 ffc6 	bl	80063dc <HAL_RCCEx_GetPeriphCLKFreq>
 8004450:	4603      	mov	r3, r0
 8004452:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004456:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004458:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800445a:	e002      	b.n	8004462 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f9      	bne.n	800445c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0208 	orr.w	r2, r2, #8
 8004476:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004478:	f7ff fb86 	bl	8003b88 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800447e:	e01b      	b.n	80044b8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004480:	f7ff fb82 	bl	8003b88 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b0a      	cmp	r3, #10
 800448c:	d914      	bls.n	80044b8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	f023 0312 	bic.w	r3, r3, #18
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e042      	b.n	800453e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1dc      	bne.n	8004480 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0204 	orr.w	r2, r2, #4
 80044d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80044d6:	f7ff fb57 	bl	8003b88 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80044dc:	e01b      	b.n	8004516 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80044de:	f7ff fb53 	bl	8003b88 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b0a      	cmp	r3, #10
 80044ea:	d914      	bls.n	8004516 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	f023 0312 	bic.w	r3, r3, #18
 8004502:	f043 0210 	orr.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e013      	b.n	800453e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1dc      	bne.n	80044de <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	f023 0303 	bic.w	r3, r3, #3
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	bf00      	nop
 8004548:	20001010 	.word	0x20001010

0800454c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
	...

08004560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004570:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800457c:	4013      	ands	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800458c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004592:	4a04      	ldr	r2, [pc, #16]	@ (80045a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	60d3      	str	r3, [r2, #12]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <__NVIC_GetPriorityGrouping+0x18>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f003 0307 	and.w	r3, r3, #7
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db0b      	blt.n	80045ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	4906      	ldr	r1, [pc, #24]	@ (80045f8 <__NVIC_EnableIRQ+0x34>)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2001      	movs	r0, #1
 80045e6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100

080045fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db0a      	blt.n	8004626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	@ (8004648 <__NVIC_SetPriority+0x4c>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	440b      	add	r3, r1
 8004620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004624:	e00a      	b.n	800463c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4908      	ldr	r1, [pc, #32]	@ (800464c <__NVIC_SetPriority+0x50>)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	3b04      	subs	r3, #4
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	440b      	add	r3, r1
 800463a:	761a      	strb	r2, [r3, #24]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000e100 	.word	0xe000e100
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	@ 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f1c3 0307 	rsb	r3, r3, #7
 800466a:	2b04      	cmp	r3, #4
 800466c:	bf28      	it	cs
 800466e:	2304      	movcs	r3, #4
 8004670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3304      	adds	r3, #4
 8004676:	2b06      	cmp	r3, #6
 8004678:	d902      	bls.n	8004680 <NVIC_EncodePriority+0x30>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3b03      	subs	r3, #3
 800467e:	e000      	b.n	8004682 <NVIC_EncodePriority+0x32>
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	401a      	ands	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004698:	f04f 31ff 	mov.w	r1, #4294967295
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43d9      	mvns	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	4313      	orrs	r3, r2
         );
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	@ 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff4f 	bl	8004560 <__NVIC_SetPriorityGrouping>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046dc:	f7ff ff64 	bl	80045a8 <__NVIC_GetPriorityGrouping>
 80046e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f7ff ffb2 	bl	8004650 <NVIC_EncodePriority>
 80046ec:	4602      	mov	r2, r0
 80046ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff81 	bl	80045fc <__NVIC_SetPriority>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800470c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff57 	bl	80045c4 <__NVIC_EnableIRQ>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e043      	b.n	80047be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_DMA_Init+0xa8>)
 800473e:	4413      	add	r3, r2
 8004740:	4a22      	ldr	r2, [pc, #136]	@ (80047cc <HAL_DMA_Init+0xac>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	009a      	lsls	r2, r3, #2
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <HAL_DMA_Init+0xb0>)
 8004752:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800476a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800476e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	bffdfff8 	.word	0xbffdfff8
 80047cc:	cccccccd 	.word	0xcccccccd
 80047d0:	40020000 	.word	0x40020000

080047d4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_DMA_Start+0x20>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e02e      	b.n	8004852 <HAL_DMA_Start+0x7e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d11d      	bne.n	8004844 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f91b 	bl	8004a68 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e005      	b.n	8004850 <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800484c:	2302      	movs	r3, #2
 800484e:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	2204      	movs	r2, #4
 800487a:	409a      	lsls	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d04f      	beq.n	8004924 <HAL_DMA_IRQHandler+0xc8>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d04a      	beq.n	8004924 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0204 	bic.w	r2, r2, #4
 80048aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a66      	ldr	r2, [pc, #408]	@ (8004a4c <HAL_DMA_IRQHandler+0x1f0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d029      	beq.n	800490a <HAL_DMA_IRQHandler+0xae>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a65      	ldr	r2, [pc, #404]	@ (8004a50 <HAL_DMA_IRQHandler+0x1f4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_DMA_IRQHandler+0xaa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <HAL_DMA_IRQHandler+0x1f8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01a      	beq.n	8004900 <HAL_DMA_IRQHandler+0xa4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a62      	ldr	r2, [pc, #392]	@ (8004a58 <HAL_DMA_IRQHandler+0x1fc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d012      	beq.n	80048fa <HAL_DMA_IRQHandler+0x9e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a60      	ldr	r2, [pc, #384]	@ (8004a5c <HAL_DMA_IRQHandler+0x200>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00a      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x98>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004a60 <HAL_DMA_IRQHandler+0x204>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d102      	bne.n	80048ee <HAL_DMA_IRQHandler+0x92>
 80048e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80048ec:	e00e      	b.n	800490c <HAL_DMA_IRQHandler+0xb0>
 80048ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80048f2:	e00b      	b.n	800490c <HAL_DMA_IRQHandler+0xb0>
 80048f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80048f8:	e008      	b.n	800490c <HAL_DMA_IRQHandler+0xb0>
 80048fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048fe:	e005      	b.n	800490c <HAL_DMA_IRQHandler+0xb0>
 8004900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004904:	e002      	b.n	800490c <HAL_DMA_IRQHandler+0xb0>
 8004906:	2340      	movs	r3, #64	@ 0x40
 8004908:	e000      	b.n	800490c <HAL_DMA_IRQHandler+0xb0>
 800490a:	2304      	movs	r3, #4
 800490c:	4a55      	ldr	r2, [pc, #340]	@ (8004a64 <HAL_DMA_IRQHandler+0x208>)
 800490e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8094 	beq.w	8004a42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004922:	e08e      	b.n	8004a42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	2202      	movs	r2, #2
 800492a:	409a      	lsls	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d056      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x186>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d051      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 020a 	bic.w	r2, r2, #10
 800495a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a38      	ldr	r2, [pc, #224]	@ (8004a4c <HAL_DMA_IRQHandler+0x1f0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d029      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x166>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a37      	ldr	r2, [pc, #220]	@ (8004a50 <HAL_DMA_IRQHandler+0x1f4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_IRQHandler+0x162>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <HAL_DMA_IRQHandler+0x1f8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01a      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x15c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a34      	ldr	r2, [pc, #208]	@ (8004a58 <HAL_DMA_IRQHandler+0x1fc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d012      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x156>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <HAL_DMA_IRQHandler+0x200>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00a      	beq.n	80049ac <HAL_DMA_IRQHandler+0x150>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a31      	ldr	r2, [pc, #196]	@ (8004a60 <HAL_DMA_IRQHandler+0x204>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d102      	bne.n	80049a6 <HAL_DMA_IRQHandler+0x14a>
 80049a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80049a4:	e00e      	b.n	80049c4 <HAL_DMA_IRQHandler+0x168>
 80049a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049aa:	e00b      	b.n	80049c4 <HAL_DMA_IRQHandler+0x168>
 80049ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049b0:	e008      	b.n	80049c4 <HAL_DMA_IRQHandler+0x168>
 80049b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049b6:	e005      	b.n	80049c4 <HAL_DMA_IRQHandler+0x168>
 80049b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049bc:	e002      	b.n	80049c4 <HAL_DMA_IRQHandler+0x168>
 80049be:	2320      	movs	r3, #32
 80049c0:	e000      	b.n	80049c4 <HAL_DMA_IRQHandler+0x168>
 80049c2:	2302      	movs	r3, #2
 80049c4:	4a27      	ldr	r2, [pc, #156]	@ (8004a64 <HAL_DMA_IRQHandler+0x208>)
 80049c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d034      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80049e0:	e02f      	b.n	8004a42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2208      	movs	r2, #8
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x1e8>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 020e 	bic.w	r2, r2, #14
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
    }
  }
  return;
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
}
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40020008 	.word	0x40020008
 8004a50:	4002001c 	.word	0x4002001c
 8004a54:	40020030 	.word	0x40020030
 8004a58:	40020044 	.word	0x40020044
 8004a5c:	40020058 	.word	0x40020058
 8004a60:	4002006c 	.word	0x4002006c
 8004a64:	40020000 	.word	0x40020000

08004a68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d108      	bne.n	8004aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004aa6:	e007      	b.n	8004ab8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b08b      	sub	sp, #44	@ 0x2c
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad6:	e169      	b.n	8004dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ad8:	2201      	movs	r2, #1
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	f040 8158 	bne.w	8004da6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4a9a      	ldr	r2, [pc, #616]	@ (8004d64 <HAL_GPIO_Init+0x2a0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d05e      	beq.n	8004bbe <HAL_GPIO_Init+0xfa>
 8004b00:	4a98      	ldr	r2, [pc, #608]	@ (8004d64 <HAL_GPIO_Init+0x2a0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d875      	bhi.n	8004bf2 <HAL_GPIO_Init+0x12e>
 8004b06:	4a98      	ldr	r2, [pc, #608]	@ (8004d68 <HAL_GPIO_Init+0x2a4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d058      	beq.n	8004bbe <HAL_GPIO_Init+0xfa>
 8004b0c:	4a96      	ldr	r2, [pc, #600]	@ (8004d68 <HAL_GPIO_Init+0x2a4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d86f      	bhi.n	8004bf2 <HAL_GPIO_Init+0x12e>
 8004b12:	4a96      	ldr	r2, [pc, #600]	@ (8004d6c <HAL_GPIO_Init+0x2a8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d052      	beq.n	8004bbe <HAL_GPIO_Init+0xfa>
 8004b18:	4a94      	ldr	r2, [pc, #592]	@ (8004d6c <HAL_GPIO_Init+0x2a8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d869      	bhi.n	8004bf2 <HAL_GPIO_Init+0x12e>
 8004b1e:	4a94      	ldr	r2, [pc, #592]	@ (8004d70 <HAL_GPIO_Init+0x2ac>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d04c      	beq.n	8004bbe <HAL_GPIO_Init+0xfa>
 8004b24:	4a92      	ldr	r2, [pc, #584]	@ (8004d70 <HAL_GPIO_Init+0x2ac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d863      	bhi.n	8004bf2 <HAL_GPIO_Init+0x12e>
 8004b2a:	4a92      	ldr	r2, [pc, #584]	@ (8004d74 <HAL_GPIO_Init+0x2b0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d046      	beq.n	8004bbe <HAL_GPIO_Init+0xfa>
 8004b30:	4a90      	ldr	r2, [pc, #576]	@ (8004d74 <HAL_GPIO_Init+0x2b0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d85d      	bhi.n	8004bf2 <HAL_GPIO_Init+0x12e>
 8004b36:	2b12      	cmp	r3, #18
 8004b38:	d82a      	bhi.n	8004b90 <HAL_GPIO_Init+0xcc>
 8004b3a:	2b12      	cmp	r3, #18
 8004b3c:	d859      	bhi.n	8004bf2 <HAL_GPIO_Init+0x12e>
 8004b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <HAL_GPIO_Init+0x80>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004bbf 	.word	0x08004bbf
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004bab 	.word	0x08004bab
 8004b50:	08004bed 	.word	0x08004bed
 8004b54:	08004bf3 	.word	0x08004bf3
 8004b58:	08004bf3 	.word	0x08004bf3
 8004b5c:	08004bf3 	.word	0x08004bf3
 8004b60:	08004bf3 	.word	0x08004bf3
 8004b64:	08004bf3 	.word	0x08004bf3
 8004b68:	08004bf3 	.word	0x08004bf3
 8004b6c:	08004bf3 	.word	0x08004bf3
 8004b70:	08004bf3 	.word	0x08004bf3
 8004b74:	08004bf3 	.word	0x08004bf3
 8004b78:	08004bf3 	.word	0x08004bf3
 8004b7c:	08004bf3 	.word	0x08004bf3
 8004b80:	08004bf3 	.word	0x08004bf3
 8004b84:	08004bf3 	.word	0x08004bf3
 8004b88:	08004ba1 	.word	0x08004ba1
 8004b8c:	08004bb5 	.word	0x08004bb5
 8004b90:	4a79      	ldr	r2, [pc, #484]	@ (8004d78 <HAL_GPIO_Init+0x2b4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b96:	e02c      	b.n	8004bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	623b      	str	r3, [r7, #32]
          break;
 8004b9e:	e029      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	623b      	str	r3, [r7, #32]
          break;
 8004ba8:	e024      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	623b      	str	r3, [r7, #32]
          break;
 8004bb2:	e01f      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	623b      	str	r3, [r7, #32]
          break;
 8004bbc:	e01a      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	623b      	str	r3, [r7, #32]
          break;
 8004bca:	e013      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	611a      	str	r2, [r3, #16]
          break;
 8004bde:	e009      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004be0:	2308      	movs	r3, #8
 8004be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	615a      	str	r2, [r3, #20]
          break;
 8004bea:	e003      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bec:	2300      	movs	r3, #0
 8004bee:	623b      	str	r3, [r7, #32]
          break;
 8004bf0:	e000      	b.n	8004bf4 <HAL_GPIO_Init+0x130>
          break;
 8004bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2bff      	cmp	r3, #255	@ 0xff
 8004bf8:	d801      	bhi.n	8004bfe <HAL_GPIO_Init+0x13a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	e001      	b.n	8004c02 <HAL_GPIO_Init+0x13e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2bff      	cmp	r3, #255	@ 0xff
 8004c08:	d802      	bhi.n	8004c10 <HAL_GPIO_Init+0x14c>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	e002      	b.n	8004c16 <HAL_GPIO_Init+0x152>
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	3b08      	subs	r3, #8
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	210f      	movs	r1, #15
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	401a      	ands	r2, r3
 8004c28:	6a39      	ldr	r1, [r7, #32]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	431a      	orrs	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80b1 	beq.w	8004da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c44:	4b4d      	ldr	r3, [pc, #308]	@ (8004d7c <HAL_GPIO_Init+0x2b8>)
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4a4c      	ldr	r2, [pc, #304]	@ (8004d7c <HAL_GPIO_Init+0x2b8>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6193      	str	r3, [r2, #24]
 8004c50:	4b4a      	ldr	r3, [pc, #296]	@ (8004d7c <HAL_GPIO_Init+0x2b8>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c5c:	4a48      	ldr	r2, [pc, #288]	@ (8004d80 <HAL_GPIO_Init+0x2bc>)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a40      	ldr	r2, [pc, #256]	@ (8004d84 <HAL_GPIO_Init+0x2c0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_GPIO_Init+0x1ec>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d88 <HAL_GPIO_Init+0x2c4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00d      	beq.n	8004cac <HAL_GPIO_Init+0x1e8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3e      	ldr	r2, [pc, #248]	@ (8004d8c <HAL_GPIO_Init+0x2c8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <HAL_GPIO_Init+0x1e4>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d90 <HAL_GPIO_Init+0x2cc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_GPIO_Init+0x1e0>
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <HAL_GPIO_Init+0x1ee>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e004      	b.n	8004cb2 <HAL_GPIO_Init+0x1ee>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e002      	b.n	8004cb2 <HAL_GPIO_Init+0x1ee>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_GPIO_Init+0x1ee>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb4:	f002 0203 	and.w	r2, r2, #3
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	4093      	lsls	r3, r2
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cc2:	492f      	ldr	r1, [pc, #188]	@ (8004d80 <HAL_GPIO_Init+0x2bc>)
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	3302      	adds	r3, #2
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	492c      	ldr	r1, [pc, #176]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]
 8004ce8:	e006      	b.n	8004cf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cea:	4b2a      	ldr	r3, [pc, #168]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	4928      	ldr	r1, [pc, #160]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d04:	4b23      	ldr	r3, [pc, #140]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	4922      	ldr	r1, [pc, #136]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60cb      	str	r3, [r1, #12]
 8004d10:	e006      	b.n	8004d20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	491e      	ldr	r1, [pc, #120]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4918      	ldr	r1, [pc, #96]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
 8004d38:	e006      	b.n	8004d48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	4914      	ldr	r1, [pc, #80]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d021      	beq.n	8004d98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d54:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	490e      	ldr	r1, [pc, #56]	@ (8004d94 <HAL_GPIO_Init+0x2d0>)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
 8004d60:	e021      	b.n	8004da6 <HAL_GPIO_Init+0x2e2>
 8004d62:	bf00      	nop
 8004d64:	10320000 	.word	0x10320000
 8004d68:	10310000 	.word	0x10310000
 8004d6c:	10220000 	.word	0x10220000
 8004d70:	10210000 	.word	0x10210000
 8004d74:	10120000 	.word	0x10120000
 8004d78:	10110000 	.word	0x10110000
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40010800 	.word	0x40010800
 8004d88:	40010c00 	.word	0x40010c00
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	40011400 	.word	0x40011400
 8004d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_GPIO_Init+0x304>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	4909      	ldr	r1, [pc, #36]	@ (8004dc8 <HAL_GPIO_Init+0x304>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	3301      	adds	r3, #1
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f47f ae8e 	bne.w	8004ad8 <HAL_GPIO_Init+0x14>
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	372c      	adds	r7, #44	@ 0x2c
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	e001      	b.n	8004dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]
 8004e06:	4613      	mov	r3, r2
 8004e08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e0a:	787b      	ldrb	r3, [r7, #1]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e16:	e003      	b.n	8004e20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	041a      	lsls	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	611a      	str	r2, [r3, #16]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4013      	ands	r3, r2
 8004e42:	041a      	lsls	r2, r3, #16
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	43d9      	mvns	r1, r3
 8004e48:	887b      	ldrh	r3, [r7, #2]
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]
}
 8004e52:	bf00      	nop
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e12b      	b.n	80050c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fe fbf0 	bl	8003668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	@ 0x24
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ec0:	f001 f960 	bl	8006184 <HAL_RCC_GetPCLK1Freq>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a81      	ldr	r2, [pc, #516]	@ (80050d0 <HAL_I2C_Init+0x274>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d807      	bhi.n	8004ee0 <HAL_I2C_Init+0x84>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a80      	ldr	r2, [pc, #512]	@ (80050d4 <HAL_I2C_Init+0x278>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	bf94      	ite	ls
 8004ed8:	2301      	movls	r3, #1
 8004eda:	2300      	movhi	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e006      	b.n	8004eee <HAL_I2C_Init+0x92>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80050d8 <HAL_I2C_Init+0x27c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bf94      	ite	ls
 8004ee8:	2301      	movls	r3, #1
 8004eea:	2300      	movhi	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0e7      	b.n	80050c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a78      	ldr	r2, [pc, #480]	@ (80050dc <HAL_I2C_Init+0x280>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0c9b      	lsrs	r3, r3, #18
 8004f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4a6a      	ldr	r2, [pc, #424]	@ (80050d0 <HAL_I2C_Init+0x274>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d802      	bhi.n	8004f30 <HAL_I2C_Init+0xd4>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	e009      	b.n	8004f44 <HAL_I2C_Init+0xe8>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	4a69      	ldr	r2, [pc, #420]	@ (80050e0 <HAL_I2C_Init+0x284>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	3301      	adds	r3, #1
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	495c      	ldr	r1, [pc, #368]	@ (80050d0 <HAL_I2C_Init+0x274>)
 8004f60:	428b      	cmp	r3, r1
 8004f62:	d819      	bhi.n	8004f98 <HAL_I2C_Init+0x13c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1e59      	subs	r1, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f78:	400b      	ands	r3, r1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_I2C_Init+0x138>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1e59      	subs	r1, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f92:	e051      	b.n	8005038 <HAL_I2C_Init+0x1dc>
 8004f94:	2304      	movs	r3, #4
 8004f96:	e04f      	b.n	8005038 <HAL_I2C_Init+0x1dc>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d111      	bne.n	8004fc4 <HAL_I2C_Init+0x168>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1e58      	subs	r0, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	440b      	add	r3, r1
 8004fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e012      	b.n	8004fea <HAL_I2C_Init+0x18e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1e58      	subs	r0, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	0099      	lsls	r1, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Init+0x196>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e022      	b.n	8005038 <HAL_I2C_Init+0x1dc>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10e      	bne.n	8005018 <HAL_I2C_Init+0x1bc>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1e58      	subs	r0, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6859      	ldr	r1, [r3, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	440b      	add	r3, r1
 8005008:	fbb0 f3f3 	udiv	r3, r0, r3
 800500c:	3301      	adds	r3, #1
 800500e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005016:	e00f      	b.n	8005038 <HAL_I2C_Init+0x1dc>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1e58      	subs	r0, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6859      	ldr	r1, [r3, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	0099      	lsls	r1, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	fbb0 f3f3 	udiv	r3, r0, r3
 800502e:	3301      	adds	r3, #1
 8005030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	4313      	orrs	r3, r2
 800503e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005066:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6911      	ldr	r1, [r2, #16]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68d2      	ldr	r2, [r2, #12]
 8005072:	4311      	orrs	r1, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	430b      	orrs	r3, r1
 800507a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	000186a0 	.word	0x000186a0
 80050d4:	001e847f 	.word	0x001e847f
 80050d8:	003d08ff 	.word	0x003d08ff
 80050dc:	431bde83 	.word	0x431bde83
 80050e0:	10624dd3 	.word	0x10624dd3

080050e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	461a      	mov	r2, r3
 80050f0:	460b      	mov	r3, r1
 80050f2:	817b      	strh	r3, [r7, #10]
 80050f4:	4613      	mov	r3, r2
 80050f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050f8:	f7fe fd46 	bl	8003b88 <HAL_GetTick>
 80050fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	f040 80e0 	bne.w	80052cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2319      	movs	r3, #25
 8005112:	2201      	movs	r2, #1
 8005114:	4970      	ldr	r1, [pc, #448]	@ (80052d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fa92 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
 8005124:	e0d3      	b.n	80052ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_I2C_Master_Transmit+0x50>
 8005130:	2302      	movs	r3, #2
 8005132:	e0cc      	b.n	80052ce <HAL_I2C_Master_Transmit+0x1ea>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b01      	cmp	r3, #1
 8005148:	d007      	beq.n	800515a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005168:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2221      	movs	r2, #33	@ 0x21
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2210      	movs	r2, #16
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	893a      	ldrh	r2, [r7, #8]
 800518a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a50      	ldr	r2, [pc, #320]	@ (80052dc <HAL_I2C_Master_Transmit+0x1f8>)
 800519a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800519c:	8979      	ldrh	r1, [r7, #10]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f9ca 	bl	800553c <I2C_MasterRequestWrite>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e08d      	b.n	80052ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051c8:	e066      	b.n	8005298 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	6a39      	ldr	r1, [r7, #32]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fb50 	bl	8005874 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d107      	bne.n	80051f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e06b      	b.n	80052ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b04      	cmp	r3, #4
 8005232:	d11b      	bne.n	800526c <HAL_I2C_Master_Transmit+0x188>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d017      	beq.n	800526c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	781a      	ldrb	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	6a39      	ldr	r1, [r7, #32]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fb47 	bl	8005904 <I2C_WaitOnBTFFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00d      	beq.n	8005298 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	2b04      	cmp	r3, #4
 8005282:	d107      	bne.n	8005294 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005292:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e01a      	b.n	80052ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529c:	2b00      	cmp	r3, #0
 800529e:	d194      	bne.n	80051ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	00100002 	.word	0x00100002
 80052dc:	ffff0000 	.word	0xffff0000

080052e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	@ 0x28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	460b      	mov	r3, r1
 80052ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80052f0:	f7fe fc4a 	bl	8003b88 <HAL_GetTick>
 80052f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b20      	cmp	r3, #32
 8005304:	f040 8111 	bne.w	800552a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2319      	movs	r3, #25
 800530e:	2201      	movs	r2, #1
 8005310:	4988      	ldr	r1, [pc, #544]	@ (8005534 <HAL_I2C_IsDeviceReady+0x254>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f994 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
 8005320:	e104      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_I2C_IsDeviceReady+0x50>
 800532c:	2302      	movs	r3, #2
 800532e:	e0fd      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d007      	beq.n	8005356 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2224      	movs	r2, #36	@ 0x24
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a70      	ldr	r2, [pc, #448]	@ (8005538 <HAL_I2C_IsDeviceReady+0x258>)
 8005378:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005388:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f952 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b0:	d103      	bne.n	80053ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053b8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0b6      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053be:	897b      	ldrh	r3, [r7, #10]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80053ce:	f7fe fbdb 	bl	8003b88 <HAL_GetTick>
 80053d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005402:	e025      	b.n	8005450 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fe fbc0 	bl	8003b88 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <HAL_I2C_IsDeviceReady+0x13a>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	22a0      	movs	r2, #160	@ 0xa0
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2ba0      	cmp	r3, #160	@ 0xa0
 800545a:	d005      	beq.n	8005468 <HAL_I2C_IsDeviceReady+0x188>
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <HAL_I2C_IsDeviceReady+0x188>
 8005462:	7dbb      	ldrb	r3, [r7, #22]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0cd      	beq.n	8005404 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d129      	bne.n	80054d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800548c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2319      	movs	r3, #25
 80054aa:	2201      	movs	r2, #1
 80054ac:	4921      	ldr	r1, [pc, #132]	@ (8005534 <HAL_I2C_IsDeviceReady+0x254>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f8c6 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e036      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e02c      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2319      	movs	r3, #25
 80054f2:	2201      	movs	r2, #1
 80054f4:	490f      	ldr	r1, [pc, #60]	@ (8005534 <HAL_I2C_IsDeviceReady+0x254>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f8a2 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e012      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	3301      	adds	r3, #1
 800550a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	f4ff af32 	bcc.w	800537a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	00100002 	.word	0x00100002
 8005538:	ffff0000 	.word	0xffff0000

0800553c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	460b      	mov	r3, r1
 800554a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d006      	beq.n	8005566 <I2C_MasterRequestWrite+0x2a>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d003      	beq.n	8005566 <I2C_MasterRequestWrite+0x2a>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005564:	d108      	bne.n	8005578 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e00b      	b.n	8005590 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	2b12      	cmp	r3, #18
 800557e:	d107      	bne.n	8005590 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800558e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f84f 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b6:	d103      	bne.n	80055c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e035      	b.n	8005630 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055cc:	d108      	bne.n	80055e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055dc:	611a      	str	r2, [r3, #16]
 80055de:	e01b      	b.n	8005618 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055e0:	897b      	ldrh	r3, [r7, #10]
 80055e2:	11db      	asrs	r3, r3, #7
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 0306 	and.w	r3, r3, #6
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f063 030f 	orn	r3, r3, #15
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	490e      	ldr	r1, [pc, #56]	@ (8005638 <I2C_MasterRequestWrite+0xfc>)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f898 	bl	8005734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e010      	b.n	8005630 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4907      	ldr	r1, [pc, #28]	@ (800563c <I2C_MasterRequestWrite+0x100>)
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f888 	bl	8005734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	00010008 	.word	0x00010008
 800563c:	00010002 	.word	0x00010002

08005640 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005650:	e048      	b.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d044      	beq.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fe fa95 	bl	8003b88 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <I2C_WaitOnFlagUntilTimeout+0x30>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d139      	bne.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	0c1b      	lsrs	r3, r3, #16
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d10d      	bne.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x56>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	43da      	mvns	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	e00c      	b.n	80056b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	43da      	mvns	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4013      	ands	r3, r2
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d116      	bne.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e023      	b.n	800572c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	0c1b      	lsrs	r3, r3, #16
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10d      	bne.n	800570a <I2C_WaitOnFlagUntilTimeout+0xca>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	43da      	mvns	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	e00c      	b.n	8005724 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	43da      	mvns	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4013      	ands	r3, r2
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	429a      	cmp	r2, r3
 8005728:	d093      	beq.n	8005652 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005742:	e071      	b.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800574e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005752:	d123      	bne.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005762:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800576c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e067      	b.n	800586c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d041      	beq.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7fe f9f0 	bl	8003b88 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d136      	bne.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10c      	bne.n	80057de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	43da      	mvns	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e00b      	b.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	f043 0220 	orr.w	r2, r3, #32
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e021      	b.n	800586c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	0c1b      	lsrs	r3, r3, #16
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d10c      	bne.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	43da      	mvns	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e00b      	b.n	8005864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	43da      	mvns	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	f47f af6d 	bne.w	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005880:	e034      	b.n	80058ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f886 	bl	8005994 <I2C_IsAcknowledgeFailed>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e034      	b.n	80058fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d028      	beq.n	80058ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589a:	f7fe f975 	bl	8003b88 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11d      	bne.n	80058ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ba:	2b80      	cmp	r3, #128	@ 0x80
 80058bc:	d016      	beq.n	80058ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e007      	b.n	80058fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b80      	cmp	r3, #128	@ 0x80
 80058f8:	d1c3      	bne.n	8005882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005910:	e034      	b.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f83e 	bl	8005994 <I2C_IsAcknowledgeFailed>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e034      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d028      	beq.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fe f92d 	bl	8003b88 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11d      	bne.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d016      	beq.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e007      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b04      	cmp	r3, #4
 8005988:	d1c3      	bne.n	8005912 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059aa:	d11b      	bne.n	80059e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d0:	f043 0204 	orr.w	r2, r3, #4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e272      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8087 	beq.w	8005b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a10:	4b92      	ldr	r3, [pc, #584]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d00c      	beq.n	8005a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 030c 	and.w	r3, r3, #12
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d112      	bne.n	8005a4e <HAL_RCC_OscConfig+0x5e>
 8005a28:	4b8c      	ldr	r3, [pc, #560]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d10b      	bne.n	8005a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a36:	4b89      	ldr	r3, [pc, #548]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d06c      	beq.n	8005b1c <HAL_RCC_OscConfig+0x12c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d168      	bne.n	8005b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e24c      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a56:	d106      	bne.n	8005a66 <HAL_RCC_OscConfig+0x76>
 8005a58:	4b80      	ldr	r3, [pc, #512]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	e02e      	b.n	8005ac4 <HAL_RCC_OscConfig+0xd4>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x98>
 8005a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7a      	ldr	r2, [pc, #488]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b78      	ldr	r3, [pc, #480]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a77      	ldr	r2, [pc, #476]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e01d      	b.n	8005ac4 <HAL_RCC_OscConfig+0xd4>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0xbc>
 8005a92:	4b72      	ldr	r3, [pc, #456]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a71      	ldr	r2, [pc, #452]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e00b      	b.n	8005ac4 <HAL_RCC_OscConfig+0xd4>
 8005aac:	4b6b      	ldr	r3, [pc, #428]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	4b68      	ldr	r3, [pc, #416]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a67      	ldr	r2, [pc, #412]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d013      	beq.n	8005af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005acc:	f7fe f85c 	bl	8003b88 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad4:	f7fe f858 	bl	8003b88 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b64      	cmp	r3, #100	@ 0x64
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e200      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f0      	beq.n	8005ad4 <HAL_RCC_OscConfig+0xe4>
 8005af2:	e014      	b.n	8005b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fe f848 	bl	8003b88 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fe f844 	bl	8003b88 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	@ 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e1ec      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	4b53      	ldr	r3, [pc, #332]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x10c>
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d063      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b36:	4b49      	ldr	r3, [pc, #292]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d11c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x18c>
 8005b42:	4b46      	ldr	r3, [pc, #280]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d116      	bne.n	8005b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4e:	4b43      	ldr	r3, [pc, #268]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_RCC_OscConfig+0x176>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d001      	beq.n	8005b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e1c0      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b66:	4b3d      	ldr	r3, [pc, #244]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4939      	ldr	r1, [pc, #228]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7a:	e03a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d020      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b84:	4b36      	ldr	r3, [pc, #216]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fd fffd 	bl	8003b88 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b92:	f7fd fff9 	bl	8003b88 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e1a1      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4927      	ldr	r1, [pc, #156]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	600b      	str	r3, [r1, #0]
 8005bc4:	e015      	b.n	8005bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bc6:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fd ffdc 	bl	8003b88 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7fd ffd8 	bl	8003b88 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e180      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d03a      	beq.n	8005c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d019      	beq.n	8005c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c06:	4b17      	ldr	r3, [pc, #92]	@ (8005c64 <HAL_RCC_OscConfig+0x274>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0c:	f7fd ffbc 	bl	8003b88 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c14:	f7fd ffb8 	bl	8003b88 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e160      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <HAL_RCC_OscConfig+0x26c>)
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c32:	2001      	movs	r0, #1
 8005c34:	f000 fafe 	bl	8006234 <RCC_Delay>
 8005c38:	e01c      	b.n	8005c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <HAL_RCC_OscConfig+0x274>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c40:	f7fd ffa2 	bl	8003b88 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c46:	e00f      	b.n	8005c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c48:	f7fd ff9e 	bl	8003b88 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d908      	bls.n	8005c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e146      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
 8005c5a:	bf00      	nop
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	42420000 	.word	0x42420000
 8005c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c68:	4b92      	ldr	r3, [pc, #584]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e9      	bne.n	8005c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80a6 	beq.w	8005dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c86:	4b8b      	ldr	r3, [pc, #556]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c92:	4b88      	ldr	r3, [pc, #544]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	4a87      	ldr	r2, [pc, #540]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9c:	61d3      	str	r3, [r2, #28]
 8005c9e:	4b85      	ldr	r3, [pc, #532]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cae:	4b82      	ldr	r3, [pc, #520]	@ (8005eb8 <HAL_RCC_OscConfig+0x4c8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d118      	bne.n	8005cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cba:	4b7f      	ldr	r3, [pc, #508]	@ (8005eb8 <HAL_RCC_OscConfig+0x4c8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8005eb8 <HAL_RCC_OscConfig+0x4c8>)
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc6:	f7fd ff5f 	bl	8003b88 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cce:	f7fd ff5b 	bl	8003b88 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b64      	cmp	r3, #100	@ 0x64
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e103      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	4b75      	ldr	r3, [pc, #468]	@ (8005eb8 <HAL_RCC_OscConfig+0x4c8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d106      	bne.n	8005d02 <HAL_RCC_OscConfig+0x312>
 8005cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	6213      	str	r3, [r2, #32]
 8005d00:	e02d      	b.n	8005d5e <HAL_RCC_OscConfig+0x36e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x334>
 8005d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	4a69      	ldr	r2, [pc, #420]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	6213      	str	r3, [r2, #32]
 8005d16:	4b67      	ldr	r3, [pc, #412]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	4a66      	ldr	r2, [pc, #408]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d1c:	f023 0304 	bic.w	r3, r3, #4
 8005d20:	6213      	str	r3, [r2, #32]
 8005d22:	e01c      	b.n	8005d5e <HAL_RCC_OscConfig+0x36e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d10c      	bne.n	8005d46 <HAL_RCC_OscConfig+0x356>
 8005d2c:	4b61      	ldr	r3, [pc, #388]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	4a60      	ldr	r2, [pc, #384]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	6213      	str	r3, [r2, #32]
 8005d38:	4b5e      	ldr	r3, [pc, #376]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6213      	str	r3, [r2, #32]
 8005d44:	e00b      	b.n	8005d5e <HAL_RCC_OscConfig+0x36e>
 8005d46:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	6213      	str	r3, [r2, #32]
 8005d52:	4b58      	ldr	r3, [pc, #352]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	4a57      	ldr	r2, [pc, #348]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	f023 0304 	bic.w	r3, r3, #4
 8005d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d015      	beq.n	8005d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d66:	f7fd ff0f 	bl	8003b88 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fd ff0b 	bl	8003b88 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e0b1      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d84:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ee      	beq.n	8005d6e <HAL_RCC_OscConfig+0x37e>
 8005d90:	e014      	b.n	8005dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d92:	f7fd fef9 	bl	8003b88 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fd fef5 	bl	8003b88 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e09b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db0:	4b40      	ldr	r3, [pc, #256]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ee      	bne.n	8005d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d105      	bne.n	8005dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8087 	beq.w	8005ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dd8:	4b36      	ldr	r3, [pc, #216]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f003 030c 	and.w	r3, r3, #12
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d061      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d146      	bne.n	8005e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dec:	4b33      	ldr	r3, [pc, #204]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df2:	f7fd fec9 	bl	8003b88 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfa:	f7fd fec5 	bl	8003b88 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e06d      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e0c:	4b29      	ldr	r3, [pc, #164]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f0      	bne.n	8005dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e20:	d108      	bne.n	8005e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4921      	ldr	r1, [pc, #132]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e34:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a19      	ldr	r1, [r3, #32]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	430b      	orrs	r3, r1
 8005e46:	491b      	ldr	r1, [pc, #108]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e52:	f7fd fe99 	bl	8003b88 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fd fe95 	bl	8003b88 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e03d      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e6c:	4b11      	ldr	r3, [pc, #68]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x46a>
 8005e78:	e035      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7a:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fd fe82 	bl	8003b88 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fd fe7e 	bl	8003b88 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e026      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x498>
 8005ea6:	e01e      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e019      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40007000 	.word	0x40007000
 8005ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <HAL_RCC_OscConfig+0x500>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d001      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0d0      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f08:	4b6a      	ldr	r3, [pc, #424]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d910      	bls.n	8005f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b67      	ldr	r3, [pc, #412]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 0207 	bic.w	r2, r3, #7
 8005f1e:	4965      	ldr	r1, [pc, #404]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f26:	4b63      	ldr	r3, [pc, #396]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0b8      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d020      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f50:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a58      	ldr	r2, [pc, #352]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f68:	4b53      	ldr	r3, [pc, #332]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4a52      	ldr	r2, [pc, #328]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f74:	4b50      	ldr	r3, [pc, #320]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	494d      	ldr	r1, [pc, #308]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d040      	beq.n	8006014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9a:	4b47      	ldr	r3, [pc, #284]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d115      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e07f      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb2:	4b41      	ldr	r3, [pc, #260]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e073      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e06b      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd2:	4b39      	ldr	r3, [pc, #228]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f023 0203 	bic.w	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4936      	ldr	r1, [pc, #216]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fe4:	f7fd fdd0 	bl	8003b88 <HAL_GetTick>
 8005fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fec:	f7fd fdcc 	bl	8003b88 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e053      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	4b2d      	ldr	r3, [pc, #180]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f003 020c 	and.w	r2, r3, #12
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	429a      	cmp	r2, r3
 8006012:	d1eb      	bne.n	8005fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006014:	4b27      	ldr	r3, [pc, #156]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d210      	bcs.n	8006044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006022:	4b24      	ldr	r3, [pc, #144]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f023 0207 	bic.w	r2, r3, #7
 800602a:	4922      	ldr	r1, [pc, #136]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	4313      	orrs	r3, r2
 8006030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006032:	4b20      	ldr	r3, [pc, #128]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e032      	b.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006050:	4b19      	ldr	r3, [pc, #100]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4916      	ldr	r1, [pc, #88]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 800605e:	4313      	orrs	r3, r2
 8006060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800606e:	4b12      	ldr	r3, [pc, #72]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	490e      	ldr	r1, [pc, #56]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 800607e:	4313      	orrs	r3, r2
 8006080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006082:	f000 f821 	bl	80060c8 <HAL_RCC_GetSysClockFreq>
 8006086:	4602      	mov	r2, r0
 8006088:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	490a      	ldr	r1, [pc, #40]	@ (80060bc <HAL_RCC_ClockConfig+0x1c8>)
 8006094:	5ccb      	ldrb	r3, [r1, r3]
 8006096:	fa22 f303 	lsr.w	r3, r2, r3
 800609a:	4a09      	ldr	r2, [pc, #36]	@ (80060c0 <HAL_RCC_ClockConfig+0x1cc>)
 800609c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800609e:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <HAL_RCC_ClockConfig+0x1d0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fd fc26 	bl	80038f4 <HAL_InitTick>

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40022000 	.word	0x40022000
 80060b8:	40021000 	.word	0x40021000
 80060bc:	0800d4a0 	.word	0x0800d4a0
 80060c0:	20001010 	.word	0x20001010
 80060c4:	20001014 	.word	0x20001014

080060c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060e2:	4b1e      	ldr	r3, [pc, #120]	@ (800615c <HAL_RCC_GetSysClockFreq+0x94>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d002      	beq.n	80060f8 <HAL_RCC_GetSysClockFreq+0x30>
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d003      	beq.n	80060fe <HAL_RCC_GetSysClockFreq+0x36>
 80060f6:	e027      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060f8:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x98>)
 80060fa:	613b      	str	r3, [r7, #16]
      break;
 80060fc:	e027      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	0c9b      	lsrs	r3, r3, #18
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006108:	5cd3      	ldrb	r3, [r2, r3]
 800610a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006116:	4b11      	ldr	r3, [pc, #68]	@ (800615c <HAL_RCC_GetSysClockFreq+0x94>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	0c5b      	lsrs	r3, r3, #17
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	4a11      	ldr	r2, [pc, #68]	@ (8006168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006122:	5cd3      	ldrb	r3, [r2, r3]
 8006124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a0d      	ldr	r2, [pc, #52]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x98>)
 800612a:	fb03 f202 	mul.w	r2, r3, r2
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e004      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a0c      	ldr	r2, [pc, #48]	@ (800616c <HAL_RCC_GetSysClockFreq+0xa4>)
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	613b      	str	r3, [r7, #16]
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x98>)
 800614a:	613b      	str	r3, [r7, #16]
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	693b      	ldr	r3, [r7, #16]
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000
 8006160:	007a1200 	.word	0x007a1200
 8006164:	0800d4b8 	.word	0x0800d4b8
 8006168:	0800d4c8 	.word	0x0800d4c8
 800616c:	003d0900 	.word	0x003d0900

08006170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006174:	4b02      	ldr	r3, [pc, #8]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x10>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	20001010 	.word	0x20001010

08006184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006188:	f7ff fff2 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b05      	ldr	r3, [pc, #20]	@ (80061a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4903      	ldr	r1, [pc, #12]	@ (80061a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	0800d4b0 	.word	0x0800d4b0

080061ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061b0:	f7ff ffde 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b05      	ldr	r3, [pc, #20]	@ (80061cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	0adb      	lsrs	r3, r3, #11
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4903      	ldr	r1, [pc, #12]	@ (80061d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800d4b0 	.word	0x0800d4b0

080061d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	220f      	movs	r2, #15
 80061e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061e4:	4b11      	ldr	r3, [pc, #68]	@ (800622c <HAL_RCC_GetClockConfig+0x58>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0203 	and.w	r2, r3, #3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061f0:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <HAL_RCC_GetClockConfig+0x58>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <HAL_RCC_GetClockConfig+0x58>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006208:	4b08      	ldr	r3, [pc, #32]	@ (800622c <HAL_RCC_GetClockConfig+0x58>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006216:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <HAL_RCC_GetClockConfig+0x5c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0207 	and.w	r2, r3, #7
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40021000 	.word	0x40021000
 8006230:	40022000 	.word	0x40022000

08006234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <RCC_Delay+0x34>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <RCC_Delay+0x38>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	0a5b      	lsrs	r3, r3, #9
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006250:	bf00      	nop
  }
  while (Delay --);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	60fa      	str	r2, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f9      	bne.n	8006250 <RCC_Delay+0x1c>
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr
 8006268:	20001010 	.word	0x20001010
 800626c:	10624dd3 	.word	0x10624dd3

08006270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d07d      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800628c:	2300      	movs	r3, #0
 800628e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006290:	4b4f      	ldr	r3, [pc, #316]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10d      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800629c:	4b4c      	ldr	r3, [pc, #304]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	4a4b      	ldr	r2, [pc, #300]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062a6:	61d3      	str	r3, [r2, #28]
 80062a8:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b8:	4b46      	ldr	r3, [pc, #280]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d118      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062c4:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a42      	ldr	r2, [pc, #264]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d0:	f7fd fc5a 	bl	8003b88 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d6:	e008      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d8:	f7fd fc56 	bl	8003b88 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	@ 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e06d      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ea:	4b3a      	ldr	r3, [pc, #232]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02e      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d027      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006314:	4b2e      	ldr	r3, [pc, #184]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800631e:	4b2e      	ldr	r3, [pc, #184]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006324:	4b2c      	ldr	r3, [pc, #176]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800632a:	4a29      	ldr	r2, [pc, #164]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633a:	f7fd fc25 	bl	8003b88 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006340:	e00a      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006342:	f7fd fc21 	bl	8003b88 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e036      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006358:	4b1d      	ldr	r3, [pc, #116]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ee      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006364:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4917      	ldr	r1, [pc, #92]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006372:	4313      	orrs	r3, r2
 8006374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637c:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006394:	4b0e      	ldr	r3, [pc, #56]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	490b      	ldr	r1, [pc, #44]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063b2:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4904      	ldr	r1, [pc, #16]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
 80063d4:	40007000 	.word	0x40007000
 80063d8:	42420440 	.word	0x42420440

080063dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b10      	cmp	r3, #16
 8006402:	f200 808a 	bhi.w	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d045      	beq.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d075      	beq.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006412:	e082      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006414:	4b46      	ldr	r3, [pc, #280]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800641a:	4b45      	ldr	r3, [pc, #276]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d07b      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	0c9b      	lsrs	r3, r3, #18
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	4a41      	ldr	r2, [pc, #260]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006430:	5cd3      	ldrb	r3, [r2, r3]
 8006432:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800643e:	4b3c      	ldr	r3, [pc, #240]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	0c5b      	lsrs	r3, r3, #17
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	4a3b      	ldr	r2, [pc, #236]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800644a:	5cd3      	ldrb	r3, [r2, r3]
 800644c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006458:	4a38      	ldr	r2, [pc, #224]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4a34      	ldr	r2, [pc, #208]	@ (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006474:	4b2e      	ldr	r3, [pc, #184]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800647c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006480:	d102      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	61bb      	str	r3, [r7, #24]
      break;
 8006486:	e04a      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4a2d      	ldr	r2, [pc, #180]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	61bb      	str	r3, [r7, #24]
      break;
 8006496:	e042      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006498:	4b25      	ldr	r3, [pc, #148]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a8:	d108      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80064b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e01f      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c6:	d109      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80064c8:	4b19      	ldr	r3, [pc, #100]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80064d4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e00f      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e6:	d11c      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80064e8:	4b11      	ldr	r3, [pc, #68]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d016      	beq.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80064f4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80064f8:	61bb      	str	r3, [r7, #24]
      break;
 80064fa:	e012      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80064fc:	e011      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80064fe:	f7ff fe55 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 8006502:	4602      	mov	r2, r0
 8006504:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	0b9b      	lsrs	r3, r3, #14
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	3301      	adds	r3, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	61bb      	str	r3, [r7, #24]
      break;
 8006518:	e004      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006522:	bf00      	nop
    }
  }
  return (frequency);
 8006524:	69bb      	ldr	r3, [r7, #24]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000
 8006534:	0800d4cc 	.word	0x0800d4cc
 8006538:	0800d4dc 	.word	0x0800d4dc
 800653c:	007a1200 	.word	0x007a1200
 8006540:	003d0900 	.word	0x003d0900
 8006544:	aaaaaaab 	.word	0xaaaaaaab

08006548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e041      	b.n	80065de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fd f8b8 	bl	80036e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f000 fc7a 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d001      	beq.n	8006600 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e032      	b.n	8006666 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_TIM_Base_Start+0x88>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_TIM_Base_Start+0x48>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661a:	d009      	beq.n	8006630 <HAL_TIM_Base_Start+0x48>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a14      	ldr	r2, [pc, #80]	@ (8006674 <HAL_TIM_Base_Start+0x8c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIM_Base_Start+0x48>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a13      	ldr	r2, [pc, #76]	@ (8006678 <HAL_TIM_Base_Start+0x90>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d111      	bne.n	8006654 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b06      	cmp	r3, #6
 8006640:	d010      	beq.n	8006664 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	e007      	b.n	8006664 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800

0800667c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b01      	cmp	r3, #1
 800668e:	d001      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e03a      	b.n	800670a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a18      	ldr	r2, [pc, #96]	@ (8006714 <HAL_TIM_Base_Start_IT+0x98>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00e      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x58>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066be:	d009      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x58>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <HAL_TIM_Base_Start_IT+0x9c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x58>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a13      	ldr	r2, [pc, #76]	@ (800671c <HAL_TIM_Base_Start_IT+0xa0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d111      	bne.n	80066f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d010      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f6:	e007      	b.n	8006708 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40000400 	.word	0x40000400
 800671c:	40000800 	.word	0x40000800

08006720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e041      	b.n	80067b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f839 	bl	80067be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f000 fb8e 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d109      	bne.n	80067f4 <HAL_TIM_PWM_Start+0x24>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e022      	b.n	800683a <HAL_TIM_PWM_Start+0x6a>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d109      	bne.n	800680e <HAL_TIM_PWM_Start+0x3e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b01      	cmp	r3, #1
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e015      	b.n	800683a <HAL_TIM_PWM_Start+0x6a>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d109      	bne.n	8006828 <HAL_TIM_PWM_Start+0x58>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e008      	b.n	800683a <HAL_TIM_PWM_Start+0x6a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e05e      	b.n	8006900 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start+0x82>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006850:	e013      	b.n	800687a <HAL_TIM_PWM_Start+0xaa>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0x92>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006860:	e00b      	b.n	800687a <HAL_TIM_PWM_Start+0xaa>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0xa2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006870:	e003      	b.n	800687a <HAL_TIM_PWM_Start+0xaa>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2201      	movs	r2, #1
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fd7c 	bl	8007380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <HAL_TIM_PWM_Start+0x138>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d107      	bne.n	80068a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	@ (8006908 <HAL_TIM_PWM_Start+0x138>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_TIM_PWM_Start+0xfa>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b4:	d009      	beq.n	80068ca <HAL_TIM_PWM_Start+0xfa>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a14      	ldr	r2, [pc, #80]	@ (800690c <HAL_TIM_PWM_Start+0x13c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_TIM_PWM_Start+0xfa>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a12      	ldr	r2, [pc, #72]	@ (8006910 <HAL_TIM_PWM_Start+0x140>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d111      	bne.n	80068ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d010      	beq.n	80068fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ec:	e007      	b.n	80068fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800

08006914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d122      	bne.n	8006970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d11b      	bne.n	8006970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0202 	mvn.w	r2, #2
 8006940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa76 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa69 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa78 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b04      	cmp	r3, #4
 800697c:	d122      	bne.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d11b      	bne.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0204 	mvn.w	r2, #4
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa4c 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa3f 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa4e 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d122      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d11b      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0208 	mvn.w	r2, #8
 80069e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2204      	movs	r2, #4
 80069ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa22 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006a04:	e005      	b.n	8006a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa15 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa24 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b10      	cmp	r3, #16
 8006a24:	d122      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d11b      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0210 	mvn.w	r2, #16
 8006a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2208      	movs	r2, #8
 8006a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9f8 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006a58:	e005      	b.n	8006a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9eb 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9fa 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10e      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0201 	mvn.w	r2, #1
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc f9a0 	bl	8002dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa2:	2b80      	cmp	r3, #128	@ 0x80
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab0:	2b80      	cmp	r3, #128	@ 0x80
 8006ab2:	d107      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fce9 	bl	8007496 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	d10e      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d107      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9be 	bl	8006e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d10e      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d107      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0220 	mvn.w	r2, #32
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fcb4 	bl	8007484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e0ae      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	f200 809f 	bhi.w	8006c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b52:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006c91 	.word	0x08006c91
 8006b60:	08006c91 	.word	0x08006c91
 8006b64:	08006c91 	.word	0x08006c91
 8006b68:	08006bcd 	.word	0x08006bcd
 8006b6c:	08006c91 	.word	0x08006c91
 8006b70:	08006c91 	.word	0x08006c91
 8006b74:	08006c91 	.word	0x08006c91
 8006b78:	08006c0f 	.word	0x08006c0f
 8006b7c:	08006c91 	.word	0x08006c91
 8006b80:	08006c91 	.word	0x08006c91
 8006b84:	08006c91 	.word	0x08006c91
 8006b88:	08006c4f 	.word	0x08006c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f9d6 	bl	8006f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0204 	bic.w	r2, r2, #4
 8006bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	619a      	str	r2, [r3, #24]
      break;
 8006bca:	e064      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fa1c 	bl	8007010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6999      	ldr	r1, [r3, #24]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	021a      	lsls	r2, r3, #8
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	619a      	str	r2, [r3, #24]
      break;
 8006c0c:	e043      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fa65 	bl	80070e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0208 	orr.w	r2, r2, #8
 8006c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0204 	bic.w	r2, r2, #4
 8006c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69d9      	ldr	r1, [r3, #28]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	61da      	str	r2, [r3, #28]
      break;
 8006c4c:	e023      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 faaf 	bl	80071b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	021a      	lsls	r2, r3, #8
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	61da      	str	r2, [r3, #28]
      break;
 8006c8e:	e002      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
      break;
 8006c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0b4      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x186>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cfc:	d03e      	beq.n	8006d7c <HAL_TIM_ConfigClockSource+0xd4>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d02:	f200 8087 	bhi.w	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	f000 8086 	beq.w	8006e1a <HAL_TIM_ConfigClockSource+0x172>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d12:	d87f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b70      	cmp	r3, #112	@ 0x70
 8006d16:	d01a      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xa6>
 8006d18:	2b70      	cmp	r3, #112	@ 0x70
 8006d1a:	d87b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b60      	cmp	r3, #96	@ 0x60
 8006d1e:	d050      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8006d20:	2b60      	cmp	r3, #96	@ 0x60
 8006d22:	d877      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b50      	cmp	r3, #80	@ 0x50
 8006d26:	d03c      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0xfa>
 8006d28:	2b50      	cmp	r3, #80	@ 0x50
 8006d2a:	d873      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b40      	cmp	r3, #64	@ 0x40
 8006d2e:	d058      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x13a>
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	d86f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b30      	cmp	r3, #48	@ 0x30
 8006d36:	d064      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d38:	2b30      	cmp	r3, #48	@ 0x30
 8006d3a:	d86b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d060      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d867      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d05c      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d05a      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d4c:	e062      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d5e:	f000 faf0 	bl	8007342 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	609a      	str	r2, [r3, #8]
      break;
 8006d7a:	e04f      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d8c:	f000 fad9 	bl	8007342 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d9e:	609a      	str	r2, [r3, #8]
      break;
 8006da0:	e03c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fa50 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2150      	movs	r1, #80	@ 0x50
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 faa7 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e02c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 fa6e 	bl	80072b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2160      	movs	r1, #96	@ 0x60
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fa97 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006de0:	e01c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 fa30 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2140      	movs	r1, #64	@ 0x40
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fa87 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006e00:	e00c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f000 fa7e 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006e12:	e003      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e000      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
	...

08006e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a29      	ldr	r2, [pc, #164]	@ (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e9e:	d007      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a26      	ldr	r2, [pc, #152]	@ (8006f3c <TIM_Base_SetConfig+0xbc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a25      	ldr	r2, [pc, #148]	@ (8006f40 <TIM_Base_SetConfig+0xc0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00b      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed0:	d007      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a19      	ldr	r2, [pc, #100]	@ (8006f3c <TIM_Base_SetConfig+0xbc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a18      	ldr	r2, [pc, #96]	@ (8006f40 <TIM_Base_SetConfig+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d108      	bne.n	8006ef4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a07      	ldr	r2, [pc, #28]	@ (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800

08006f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f023 0201 	bic.w	r2, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0302 	bic.w	r3, r3, #2
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <TIM_OC1_SetConfig+0xc8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d10c      	bne.n	8006fba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0308 	bic.w	r3, r3, #8
 8006fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 0304 	bic.w	r3, r3, #4
 8006fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a13      	ldr	r2, [pc, #76]	@ (800700c <TIM_OC1_SetConfig+0xc8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d111      	bne.n	8006fe6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	621a      	str	r2, [r3, #32]
}
 8007000:	bf00      	nop
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00

08007010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f023 0210 	bic.w	r2, r3, #16
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0320 	bic.w	r3, r3, #32
 800705a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <TIM_OC2_SetConfig+0xd0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10d      	bne.n	800708c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800708a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a14      	ldr	r2, [pc, #80]	@ (80070e0 <TIM_OC2_SetConfig+0xd0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d113      	bne.n	80070bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800709a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr
 80070e0:	40012c00 	.word	0x40012c00

080070e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1d      	ldr	r2, [pc, #116]	@ (80071b4 <TIM_OC3_SetConfig+0xd0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10d      	bne.n	800715e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800715c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a14      	ldr	r2, [pc, #80]	@ (80071b4 <TIM_OC3_SetConfig+0xd0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d113      	bne.n	800718e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800716c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00

080071b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	031b      	lsls	r3, r3, #12
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a0f      	ldr	r2, [pc, #60]	@ (8007250 <TIM_OC4_SetConfig+0x98>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d109      	bne.n	800722c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800721e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	019b      	lsls	r3, r3, #6
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	40012c00 	.word	0x40012c00

08007254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800727e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 030a 	bic.w	r3, r3, #10
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0210 	bic.w	r2, r3, #16
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	031b      	lsls	r3, r3, #12
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	621a      	str	r2, [r3, #32]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	f043 0307 	orr.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800735c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	021a      	lsls	r2, r3, #8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	431a      	orrs	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4313      	orrs	r3, r2
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	609a      	str	r2, [r3, #8]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2201      	movs	r2, #1
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1a      	ldr	r2, [r3, #32]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	fa01 f303 	lsl.w	r3, r1, r3
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e046      	b.n	800746e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a16      	ldr	r2, [pc, #88]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742c:	d009      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a12      	ldr	r2, [pc, #72]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a10      	ldr	r2, [pc, #64]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10c      	bne.n	800745c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	4313      	orrs	r3, r2
 8007452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800

08007484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e042      	b.n	8007540 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fc f9c4 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2224      	movs	r2, #36	@ 0x24
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f91d 	bl	800772c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691a      	ldr	r2, [r3, #16]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08a      	sub	sp, #40	@ 0x28
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b20      	cmp	r3, #32
 8007566:	d16d      	bne.n	8007644 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_UART_Transmit+0x2c>
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e066      	b.n	8007646 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2221      	movs	r2, #33	@ 0x21
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007586:	f7fc faff 	bl	8003b88 <HAL_GetTick>
 800758a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	88fa      	ldrh	r2, [r7, #6]
 8007590:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a0:	d108      	bne.n	80075b4 <HAL_UART_Transmit+0x6c>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e003      	b.n	80075bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075bc:	e02a      	b.n	8007614 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2200      	movs	r2, #0
 80075c6:	2180      	movs	r1, #128	@ 0x80
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f840 	bl	800764e <UART_WaitOnFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e036      	b.n	8007646 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	3302      	adds	r3, #2
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	e007      	b.n	8007606 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	3301      	adds	r3, #1
 8007604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1cf      	bne.n	80075be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2200      	movs	r2, #0
 8007626:	2140      	movs	r1, #64	@ 0x40
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f810 	bl	800764e <UART_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e006      	b.n	8007646 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	e000      	b.n	8007646 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007644:	2302      	movs	r3, #2
  }
}
 8007646:	4618      	mov	r0, r3
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b090      	sub	sp, #64	@ 0x40
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765e:	e050      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d04c      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0x30>
 800766e:	f7fc fa8b 	bl	8003b88 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800767a:	429a      	cmp	r2, r3
 800767c:	d241      	bcs.n	8007702 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800768e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007690:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800769e:	637a      	str	r2, [r7, #52]	@ 0x34
 80076a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	613b      	str	r3, [r7, #16]
   return(result);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076d2:	623a      	str	r2, [r7, #32]
 80076d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	69f9      	ldr	r1, [r7, #28]
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	61bb      	str	r3, [r7, #24]
   return(result);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e00f      	b.n	8007722 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4013      	ands	r3, r2
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	429a      	cmp	r2, r3
 8007710:	bf0c      	ite	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	2300      	movne	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	429a      	cmp	r2, r3
 800771e:	d09f      	beq.n	8007660 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3740      	adds	r7, #64	@ 0x40
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007766:	f023 030c 	bic.w	r3, r3, #12
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	430b      	orrs	r3, r1
 8007772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a2c      	ldr	r2, [pc, #176]	@ (8007840 <UART_SetConfig+0x114>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d103      	bne.n	800779c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007794:	f7fe fd0a 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	e002      	b.n	80077a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800779c:	f7fe fcf2 	bl	8006184 <HAL_RCC_GetPCLK1Freq>
 80077a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009a      	lsls	r2, r3, #2
 80077ac:	441a      	add	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b8:	4a22      	ldr	r2, [pc, #136]	@ (8007844 <UART_SetConfig+0x118>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	0119      	lsls	r1, r3, #4
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009a      	lsls	r2, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80077d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007844 <UART_SetConfig+0x118>)
 80077da:	fba3 0302 	umull	r0, r3, r3, r2
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	2064      	movs	r0, #100	@ 0x64
 80077e2:	fb00 f303 	mul.w	r3, r0, r3
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	3332      	adds	r3, #50	@ 0x32
 80077ec:	4a15      	ldr	r2, [pc, #84]	@ (8007844 <UART_SetConfig+0x118>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077f8:	4419      	add	r1, r3
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009a      	lsls	r2, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007810:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <UART_SetConfig+0x118>)
 8007812:	fba3 0302 	umull	r0, r3, r3, r2
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	2064      	movs	r0, #100	@ 0x64
 800781a:	fb00 f303 	mul.w	r3, r0, r3
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	3332      	adds	r3, #50	@ 0x32
 8007824:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <UART_SetConfig+0x118>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	440a      	add	r2, r1
 8007836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40013800 	.word	0x40013800
 8007844:	51eb851f 	.word	0x51eb851f

08007848 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784e:	f3ef 8305 	mrs	r3, IPSR
 8007852:	60bb      	str	r3, [r7, #8]
  return(result);
 8007854:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785a:	f3ef 8310 	mrs	r3, PRIMASK
 800785e:	607b      	str	r3, [r7, #4]
  return(result);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <osKernelInitialize+0x32>
 8007866:	4b10      	ldr	r3, [pc, #64]	@ (80078a8 <osKernelInitialize+0x60>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d109      	bne.n	8007882 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800786e:	f3ef 8311 	mrs	r3, BASEPRI
 8007872:	603b      	str	r3, [r7, #0]
  return(result);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800787a:	f06f 0305 	mvn.w	r3, #5
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e00c      	b.n	800789c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007882:	4b09      	ldr	r3, [pc, #36]	@ (80078a8 <osKernelInitialize+0x60>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800788a:	4b07      	ldr	r3, [pc, #28]	@ (80078a8 <osKernelInitialize+0x60>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e002      	b.n	800789c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
 800789a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	20002488 	.word	0x20002488

080078ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078b2:	f3ef 8305 	mrs	r3, IPSR
 80078b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078be:	f3ef 8310 	mrs	r3, PRIMASK
 80078c2:	607b      	str	r3, [r7, #4]
  return(result);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <osKernelStart+0x32>
 80078ca:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <osKernelStart+0x64>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d109      	bne.n	80078e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078d2:	f3ef 8311 	mrs	r3, BASEPRI
 80078d6:	603b      	str	r3, [r7, #0]
  return(result);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80078de:	f06f 0305 	mvn.w	r3, #5
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e00e      	b.n	8007904 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80078e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <osKernelStart+0x64>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d107      	bne.n	80078fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80078ee:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <osKernelStart+0x64>)
 80078f0:	2202      	movs	r2, #2
 80078f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80078f4:	f001 fd66 	bl	80093c4 <vTaskStartScheduler>
      stat = osOK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e002      	b.n	8007904 <osKernelStart+0x58>
    } else {
      stat = osError;
 80078fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007902:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007904:	68fb      	ldr	r3, [r7, #12]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20002488 	.word	0x20002488

08007914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b092      	sub	sp, #72	@ 0x48
 8007918:	af04      	add	r7, sp, #16
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007924:	f3ef 8305 	mrs	r3, IPSR
 8007928:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8094 	bne.w	8007a5a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007932:	f3ef 8310 	mrs	r3, PRIMASK
 8007936:	623b      	str	r3, [r7, #32]
  return(result);
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 808d 	bne.w	8007a5a <osThreadNew+0x146>
 8007940:	4b48      	ldr	r3, [pc, #288]	@ (8007a64 <osThreadNew+0x150>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d106      	bne.n	8007956 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007948:	f3ef 8311 	mrs	r3, BASEPRI
 800794c:	61fb      	str	r3, [r7, #28]
  return(result);
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 8082 	bne.w	8007a5a <osThreadNew+0x146>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d07e      	beq.n	8007a5a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800795c:	2380      	movs	r3, #128	@ 0x80
 800795e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007960:	2318      	movs	r3, #24
 8007962:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8007964:	2300      	movs	r3, #0
 8007966:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007968:	f107 031b 	add.w	r3, r7, #27
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800796e:	f04f 33ff 	mov.w	r3, #4294967295
 8007972:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d045      	beq.n	8007a06 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <osThreadNew+0x74>
        name = attr->name;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d008      	beq.n	80079ae <osThreadNew+0x9a>
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	2b38      	cmp	r3, #56	@ 0x38
 80079a0:	d805      	bhi.n	80079ae <osThreadNew+0x9a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <osThreadNew+0x9e>
        return (NULL);
 80079ae:	2300      	movs	r3, #0
 80079b0:	e054      	b.n	8007a5c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	089b      	lsrs	r3, r3, #2
 80079c0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00e      	beq.n	80079e8 <osThreadNew+0xd4>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2bab      	cmp	r3, #171	@ 0xab
 80079d0:	d90a      	bls.n	80079e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d006      	beq.n	80079e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <osThreadNew+0xd4>
        mem = 1;
 80079e2:	2301      	movs	r3, #1
 80079e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079e6:	e010      	b.n	8007a0a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10c      	bne.n	8007a0a <osThreadNew+0xf6>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d108      	bne.n	8007a0a <osThreadNew+0xf6>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <osThreadNew+0xf6>
          mem = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a04:	e001      	b.n	8007a0a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d110      	bne.n	8007a32 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a18:	9202      	str	r2, [sp, #8]
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a24:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f001 fae0 	bl	8008fec <xTaskCreateStatic>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e013      	b.n	8007a5a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d110      	bne.n	8007a5a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	f107 0314 	add.w	r3, r7, #20
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f001 fb2d 	bl	80090aa <xTaskCreate>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d001      	beq.n	8007a5a <osThreadNew+0x146>
          hTask = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a5a:	697b      	ldr	r3, [r7, #20]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3738      	adds	r7, #56	@ 0x38
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20002488 	.word	0x20002488

08007a68 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a74:	f3ef 8305 	mrs	r3, IPSR
 8007a78:	617b      	str	r3, [r7, #20]
  return(result);
 8007a7a:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d112      	bne.n	8007aa6 <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a80:	f3ef 8310 	mrs	r3, PRIMASK
 8007a84:	613b      	str	r3, [r7, #16]
  return(result);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10c      	bne.n	8007aa6 <osThreadGetStackSpace+0x3e>
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <osThreadGetStackSpace+0x58>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d105      	bne.n	8007aa0 <osThreadGetStackSpace+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a94:	f3ef 8311 	mrs	r3, BASEPRI
 8007a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d102      	bne.n	8007aa6 <osThreadGetStackSpace+0x3e>
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <osThreadGetStackSpace+0x44>
    sz = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e003      	b.n	8007ab4 <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8007aac:	69b8      	ldr	r0, [r7, #24]
 8007aae:	f002 f8dd 	bl	8009c6c <uxTaskGetStackHighWaterMark>
 8007ab2:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 8007ab4:	69fb      	ldr	r3, [r7, #28]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20002488 	.word	0x20002488

08007ac4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007acc:	f3ef 8305 	mrs	r3, IPSR
 8007ad0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ad2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10f      	bne.n	8007af8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8007adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d109      	bne.n	8007af8 <osDelay+0x34>
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8007b1c <osDelay+0x58>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d109      	bne.n	8007b00 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aec:	f3ef 8311 	mrs	r3, BASEPRI
 8007af0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <osDelay+0x3c>
    stat = osErrorISR;
 8007af8:	f06f 0305 	mvn.w	r3, #5
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	e007      	b.n	8007b10 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fc24 	bl	8009358 <vTaskDelay>
    }
  }

  return (stat);
 8007b10:	697b      	ldr	r3, [r7, #20]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20002488 	.word	0x20002488

08007b20 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08c      	sub	sp, #48	@ 0x30
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b30:	f3ef 8305 	mrs	r3, IPSR
 8007b34:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b36:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 8086 	bne.w	8007c4a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b42:	617b      	str	r3, [r7, #20]
  return(result);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d17f      	bne.n	8007c4a <osSemaphoreNew+0x12a>
 8007b4a:	4b42      	ldr	r3, [pc, #264]	@ (8007c54 <osSemaphoreNew+0x134>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d105      	bne.n	8007b5e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b52:	f3ef 8311 	mrs	r3, BASEPRI
 8007b56:	613b      	str	r3, [r7, #16]
  return(result);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d175      	bne.n	8007c4a <osSemaphoreNew+0x12a>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d072      	beq.n	8007c4a <osSemaphoreNew+0x12a>
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d86e      	bhi.n	8007c4a <osSemaphoreNew+0x12a>
    mem = -1;
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d015      	beq.n	8007ba4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <osSemaphoreNew+0x6e>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b4f      	cmp	r3, #79	@ 0x4f
 8007b86:	d902      	bls.n	8007b8e <osSemaphoreNew+0x6e>
        mem = 1;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	623b      	str	r3, [r7, #32]
 8007b8c:	e00c      	b.n	8007ba8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d108      	bne.n	8007ba8 <osSemaphoreNew+0x88>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d104      	bne.n	8007ba8 <osSemaphoreNew+0x88>
          mem = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	623b      	str	r3, [r7, #32]
 8007ba2:	e001      	b.n	8007ba8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bae:	d04c      	beq.n	8007c4a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d128      	bne.n	8007c08 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d10a      	bne.n	8007bd2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	9200      	str	r2, [sp, #0]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f000 fa4f 	bl	800806c <xQueueGenericCreateStatic>
 8007bce:	6278      	str	r0, [r7, #36]	@ 0x24
 8007bd0:	e005      	b.n	8007bde <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	f000 fac4 	bl	8008164 <xQueueGenericCreate>
 8007bdc:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d022      	beq.n	8007c2a <osSemaphoreNew+0x10a>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01f      	beq.n	8007c2a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bf2:	f000 fb87 	bl	8008304 <xQueueGenericSend>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d016      	beq.n	8007c2a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007bfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bfe:	f001 f823 	bl	8008c48 <vQueueDelete>
            hSemaphore = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c06:	e010      	b.n	8007c2a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d108      	bne.n	8007c20 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	461a      	mov	r2, r3
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fb06 	bl	8008228 <xQueueCreateCountingSemaphoreStatic>
 8007c1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c1e:	e004      	b.n	8007c2a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fb39 	bl	800829a <xQueueCreateCountingSemaphore>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00c      	beq.n	8007c4a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <osSemaphoreNew+0x11e>
          name = attr->name;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	e001      	b.n	8007c42 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007c42:	69f9      	ldr	r1, [r7, #28]
 8007c44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c46:	f001 f94b 	bl	8008ee0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3728      	adds	r7, #40	@ 0x28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20002488 	.word	0x20002488

08007c58 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007c70:	f06f 0303 	mvn.w	r3, #3
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	e04b      	b.n	8007d10 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c78:	f3ef 8305 	mrs	r3, IPSR
 8007c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c7e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10f      	bne.n	8007ca4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c84:	f3ef 8310 	mrs	r3, PRIMASK
 8007c88:	613b      	str	r3, [r7, #16]
  return(result);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <osSemaphoreAcquire+0x4c>
 8007c90:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <osSemaphoreAcquire+0xc4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d128      	bne.n	8007cea <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c98:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d022      	beq.n	8007cea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007caa:	f06f 0303 	mvn.w	r3, #3
 8007cae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007cb0:	e02d      	b.n	8007d0e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	461a      	mov	r2, r3
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	69b8      	ldr	r0, [r7, #24]
 8007cc0:	f000 ff40 	bl	8008b44 <xQueueReceiveFromISR>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d003      	beq.n	8007cd2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007cca:	f06f 0302 	mvn.w	r3, #2
 8007cce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007cd0:	e01d      	b.n	8007d0e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01a      	beq.n	8007d0e <osSemaphoreAcquire+0xb6>
 8007cd8:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <osSemaphoreAcquire+0xc8>)
 8007cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007ce8:	e011      	b.n	8007d0e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	69b8      	ldr	r0, [r7, #24]
 8007cee:	f000 fe19 	bl	8008924 <xQueueSemaphoreTake>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d00b      	beq.n	8007d10 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007cfe:	f06f 0301 	mvn.w	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e004      	b.n	8007d10 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007d06:	f06f 0302 	mvn.w	r3, #2
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e000      	b.n	8007d10 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007d0e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007d10:	69fb      	ldr	r3, [r7, #28]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3720      	adds	r7, #32
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20002488 	.word	0x20002488
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007d3a:	f06f 0303 	mvn.w	r3, #3
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	e03e      	b.n	8007dc0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d42:	f3ef 8305 	mrs	r3, IPSR
 8007d46:	617b      	str	r3, [r7, #20]
  return(result);
 8007d48:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10f      	bne.n	8007d6e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d52:	613b      	str	r3, [r7, #16]
  return(result);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <osSemaphoreRelease+0x4a>
 8007d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8007dcc <osSemaphoreRelease+0xa8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d120      	bne.n	8007da4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d62:	f3ef 8311 	mrs	r3, BASEPRI
 8007d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007d72:	f107 0308 	add.w	r3, r7, #8
 8007d76:	4619      	mov	r1, r3
 8007d78:	69b8      	ldr	r0, [r7, #24]
 8007d7a:	f000 fc60 	bl	800863e <xQueueGiveFromISR>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d003      	beq.n	8007d8c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007d84:	f06f 0302 	mvn.w	r3, #2
 8007d88:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007d8a:	e018      	b.n	8007dbe <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d015      	beq.n	8007dbe <osSemaphoreRelease+0x9a>
 8007d92:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <osSemaphoreRelease+0xac>)
 8007d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007da2:	e00c      	b.n	8007dbe <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007da4:	2300      	movs	r3, #0
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	69b8      	ldr	r0, [r7, #24]
 8007dac:	f000 faaa 	bl	8008304 <xQueueGenericSend>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d004      	beq.n	8007dc0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007db6:	f06f 0302 	mvn.w	r3, #2
 8007dba:	61fb      	str	r3, [r7, #28]
 8007dbc:	e000      	b.n	8007dc0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007dbe:	bf00      	nop
    }
  }

  return (stat);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20002488 	.word	0x20002488
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a06      	ldr	r2, [pc, #24]	@ (8007dfc <vApplicationGetIdleTaskMemory+0x28>)
 8007de4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4a05      	ldr	r2, [pc, #20]	@ (8007e00 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2280      	movs	r2, #128	@ 0x80
 8007df0:	601a      	str	r2, [r3, #0]
}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr
 8007dfc:	2000248c 	.word	0x2000248c
 8007e00:	20002538 	.word	0x20002538

08007e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4a07      	ldr	r2, [pc, #28]	@ (8007e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	4a06      	ldr	r2, [pc, #24]	@ (8007e34 <vApplicationGetTimerTaskMemory+0x30>)
 8007e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20002738 	.word	0x20002738
 8007e34:	200027e4 	.word	0x200027e4

08007e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f103 0208 	add.w	r2, r3, #8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f103 0208 	add.w	r2, r3, #8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 0208 	add.w	r2, r3, #8
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr

08007e76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eea:	d103      	bne.n	8007ef4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e00c      	b.n	8007f0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e002      	b.n	8007f02 <vListInsert+0x2e>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d2f6      	bcs.n	8007efc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6892      	ldr	r2, [r2, #8]
 8007f5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6852      	ldr	r2, [r2, #4]
 8007f64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d103      	bne.n	8007f78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	1e5a      	subs	r2, r3, #1
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
	...

08007f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10b      	bne.n	8007fc4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fc4:	f002 fcc2 	bl	800a94c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	441a      	add	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ffa:	fb01 f303 	mul.w	r3, r1, r3
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	22ff      	movs	r2, #255	@ 0xff
 8008008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	22ff      	movs	r2, #255	@ 0xff
 8008010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d114      	bne.n	8008044 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01a      	beq.n	8008058 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3310      	adds	r3, #16
 8008026:	4618      	mov	r0, r3
 8008028:	f001 fc94 	bl	8009954 <xTaskRemoveFromEventList>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d012      	beq.n	8008058 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008032:	4b0d      	ldr	r3, [pc, #52]	@ (8008068 <xQueueGenericReset+0xd0>)
 8008034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	e009      	b.n	8008058 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3310      	adds	r3, #16
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fef5 	bl	8007e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3324      	adds	r3, #36	@ 0x24
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff fef0 	bl	8007e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008058:	f002 fca8 	bl	800a9ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800805c:	2301      	movs	r3, #1
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08e      	sub	sp, #56	@ 0x38
 8008070:	af02      	add	r7, sp, #8
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10b      	bne.n	8008098 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	e7fd      	b.n	8008094 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <xQueueGenericCreateStatic+0x56>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <xQueueGenericCreateStatic+0x5a>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e000      	b.n	80080c8 <xQueueGenericCreateStatic+0x5c>
 80080c6:	2300      	movs	r3, #0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	623b      	str	r3, [r7, #32]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <xQueueGenericCreateStatic+0x84>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <xQueueGenericCreateStatic+0x88>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <xQueueGenericCreateStatic+0x8a>
 80080f4:	2300      	movs	r3, #0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	61fb      	str	r3, [r7, #28]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008112:	2350      	movs	r3, #80	@ 0x50
 8008114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b50      	cmp	r3, #80	@ 0x50
 800811a:	d00b      	beq.n	8008134 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	61bb      	str	r3, [r7, #24]
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800813e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008146:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800814a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	4613      	mov	r3, r2
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f844 	bl	80081e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800815c:	4618      	mov	r0, r3
 800815e:	3730      	adds	r7, #48	@ 0x30
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	@ 0x28
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10b      	bne.n	8008190 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	613b      	str	r3, [r7, #16]
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	e7fd      	b.n	800818c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
 800819a:	e004      	b.n	80081a6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3350      	adds	r3, #80	@ 0x50
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 fcd0 	bl	800ab50 <pvPortMalloc>
 80081b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00f      	beq.n	80081d8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	3350      	adds	r3, #80	@ 0x50
 80081bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081c6:	79fa      	ldrb	r2, [r7, #7]
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	4613      	mov	r3, r2
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f805 	bl	80081e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80081d8:	69bb      	ldr	r3, [r7, #24]
	}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e002      	b.n	8008204 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008210:	2101      	movs	r1, #1
 8008212:	69b8      	ldr	r0, [r7, #24]
 8008214:	f7ff fec0 	bl	8007f98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	@ 0x28
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10b      	bne.n	8008252 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61bb      	str	r3, [r7, #24]
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	e7fd      	b.n	800824e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	429a      	cmp	r2, r3
 8008258:	d90b      	bls.n	8008272 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	617b      	str	r3, [r7, #20]
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	e7fd      	b.n	800826e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008272:	2302      	movs	r3, #2
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff fef5 	bl	800806c <xQueueGenericCreateStatic>
 8008282:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008290:	69fb      	ldr	r3, [r7, #28]
	}
 8008292:	4618      	mov	r0, r3
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	613b      	str	r3, [r7, #16]
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	e7fd      	b.n	80082be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d90b      	bls.n	80082e2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60fb      	str	r3, [r7, #12]
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082e2:	2202      	movs	r2, #2
 80082e4:	2100      	movs	r1, #0
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ff3c 	bl	8008164 <xQueueGenericCreate>
 80082ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082fa:	697b      	ldr	r3, [r7, #20]
	}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08e      	sub	sp, #56	@ 0x38
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008312:	2300      	movs	r3, #0
 8008314:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xQueueGenericSend+0x34>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <xQueueGenericSend+0x42>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <xQueueGenericSend+0x46>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueGenericSend+0x48>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <xQueueGenericSend+0x64>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d103      	bne.n	8008376 <xQueueGenericSend+0x72>
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <xQueueGenericSend+0x76>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <xQueueGenericSend+0x78>
 800837a:	2300      	movs	r3, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <xQueueGenericSend+0x94>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	623b      	str	r3, [r7, #32]
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	e7fd      	b.n	8008394 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008398:	f001 fcde 	bl	8009d58 <xTaskGetSchedulerState>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d102      	bne.n	80083a8 <xQueueGenericSend+0xa4>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <xQueueGenericSend+0xa8>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <xQueueGenericSend+0xaa>
 80083ac:	2300      	movs	r3, #0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10b      	bne.n	80083ca <xQueueGenericSend+0xc6>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	61fb      	str	r3, [r7, #28]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ca:	f002 fabf 	bl	800a94c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <xQueueGenericSend+0xdc>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d129      	bne.n	8008434 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083e6:	f000 fc6a 	bl	8008cbe <prvCopyDataToQueue>
 80083ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d010      	beq.n	8008416 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	3324      	adds	r3, #36	@ 0x24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 faab 	bl	8009954 <xTaskRemoveFromEventList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d013      	beq.n	800842c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008404:	4b3f      	ldr	r3, [pc, #252]	@ (8008504 <xQueueGenericSend+0x200>)
 8008406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	e00a      	b.n	800842c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800841c:	4b39      	ldr	r3, [pc, #228]	@ (8008504 <xQueueGenericSend+0x200>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800842c:	f002 fabe 	bl	800a9ac <vPortExitCritical>
				return pdPASS;
 8008430:	2301      	movs	r3, #1
 8008432:	e063      	b.n	80084fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d103      	bne.n	8008442 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800843a:	f002 fab7 	bl	800a9ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800843e:	2300      	movs	r3, #0
 8008440:	e05c      	b.n	80084fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008448:	f107 0314 	add.w	r3, r7, #20
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fae5 	bl	8009a1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008456:	f002 faa9 	bl	800a9ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800845a:	f001 f823 	bl	80094a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800845e:	f002 fa75 	bl	800a94c <vPortEnterCritical>
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008468:	b25b      	sxtb	r3, r3
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d103      	bne.n	8008478 <xQueueGenericSend+0x174>
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800847e:	b25b      	sxtb	r3, r3
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008484:	d103      	bne.n	800848e <xQueueGenericSend+0x18a>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800848e:	f002 fa8d 	bl	800a9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008492:	1d3a      	adds	r2, r7, #4
 8008494:	f107 0314 	add.w	r3, r7, #20
 8008498:	4611      	mov	r1, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f001 fad4 	bl	8009a48 <xTaskCheckForTimeOut>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d124      	bne.n	80084f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084a8:	f000 fd01 	bl	8008eae <prvIsQueueFull>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d018      	beq.n	80084e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	3310      	adds	r3, #16
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 f9f8 	bl	80098b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084c2:	f000 fc8c 	bl	8008dde <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084c6:	f000 fffb 	bl	80094c0 <xTaskResumeAll>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f af7c 	bne.w	80083ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80084d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <xQueueGenericSend+0x200>)
 80084d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	e772      	b.n	80083ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084e6:	f000 fc7a 	bl	8008dde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ea:	f000 ffe9 	bl	80094c0 <xTaskResumeAll>
 80084ee:	e76c      	b.n	80083ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084f2:	f000 fc74 	bl	8008dde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084f6:	f000 ffe3 	bl	80094c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084fa:	2300      	movs	r3, #0
		}
	}
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3738      	adds	r7, #56	@ 0x38
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	@ 0x38
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10b      	bne.n	8008538 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	e7fd      	b.n	8008534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d103      	bne.n	8008546 <xQueueGenericSendFromISR+0x3e>
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <xQueueGenericSendFromISR+0x42>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <xQueueGenericSendFromISR+0x44>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	623b      	str	r3, [r7, #32]
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d103      	bne.n	8008576 <xQueueGenericSendFromISR+0x6e>
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <xQueueGenericSendFromISR+0x72>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <xQueueGenericSendFromISR+0x74>
 800857a:	2300      	movs	r3, #0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10b      	bne.n	8008598 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	61fb      	str	r3, [r7, #28]
}
 8008592:	bf00      	nop
 8008594:	bf00      	nop
 8008596:	e7fd      	b.n	8008594 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008598:	f002 fa9a 	bl	800aad0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800859c:	f3ef 8211 	mrs	r2, BASEPRI
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	61ba      	str	r2, [r7, #24]
 80085b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d302      	bcc.n	80085ca <xQueueGenericSendFromISR+0xc2>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d12c      	bne.n	8008624 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085da:	f000 fb70 	bl	8008cbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085de:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d112      	bne.n	800860e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d016      	beq.n	800861e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	3324      	adds	r3, #36	@ 0x24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 f9ad 	bl	8009954 <xTaskRemoveFromEventList>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00e      	beq.n	800861e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e007      	b.n	800861e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800860e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008612:	3301      	adds	r3, #1
 8008614:	b2db      	uxtb	r3, r3
 8008616:	b25a      	sxtb	r2, r3
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800861e:	2301      	movs	r3, #1
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008622:	e001      	b.n	8008628 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008624:	2300      	movs	r3, #0
 8008626:	637b      	str	r3, [r7, #52]	@ 0x34
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008636:	4618      	mov	r0, r3
 8008638:	3738      	adds	r7, #56	@ 0x38
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b08e      	sub	sp, #56	@ 0x38
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	623b      	str	r3, [r7, #32]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00b      	beq.n	800868a <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	61fb      	str	r3, [r7, #28]
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	e7fd      	b.n	8008686 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d103      	bne.n	800869a <xQueueGiveFromISR+0x5c>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <xQueueGiveFromISR+0x60>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGiveFromISR+0x62>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <xQueueGiveFromISR+0x7e>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	61bb      	str	r3, [r7, #24]
}
 80086b6:	bf00      	nop
 80086b8:	bf00      	nop
 80086ba:	e7fd      	b.n	80086b8 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086bc:	f002 fa08 	bl	800aad0 <vPortValidateInterruptPriority>
	__asm volatile
 80086c0:	f3ef 8211 	mrs	r2, BASEPRI
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	617a      	str	r2, [r7, #20]
 80086d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80086d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d22b      	bcs.n	8008744 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d112      	bne.n	800872e <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d016      	beq.n	800873e <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	3324      	adds	r3, #36	@ 0x24
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f91d 	bl	8009954 <xTaskRemoveFromEventList>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e007      	b.n	800873e <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800872e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008732:	3301      	adds	r3, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	b25a      	sxtb	r2, r3
 8008738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800873e:	2301      	movs	r3, #1
 8008740:	637b      	str	r3, [r7, #52]	@ 0x34
 8008742:	e001      	b.n	8008748 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008744:	2300      	movs	r3, #0
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f383 8811 	msr	BASEPRI, r3
}
 8008752:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008756:	4618      	mov	r0, r3
 8008758:	3738      	adds	r7, #56	@ 0x38
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08c      	sub	sp, #48	@ 0x30
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800876c:	2300      	movs	r3, #0
 800876e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <xQueueReceive+0x32>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	623b      	str	r3, [r7, #32]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <xQueueReceive+0x40>
 8008798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <xQueueReceive+0x44>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <xQueueReceive+0x46>
 80087a4:	2300      	movs	r3, #0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <xQueueReceive+0x62>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	61fb      	str	r3, [r7, #28]
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087c2:	f001 fac9 	bl	8009d58 <xTaskGetSchedulerState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <xQueueReceive+0x72>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <xQueueReceive+0x76>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <xQueueReceive+0x78>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10b      	bne.n	80087f4 <xQueueReceive+0x94>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	61bb      	str	r3, [r7, #24]
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	e7fd      	b.n	80087f0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087f4:	f002 f8aa 	bl	800a94c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01f      	beq.n	8008844 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008808:	f000 fac3 	bl	8008d92 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	1e5a      	subs	r2, r3, #1
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00f      	beq.n	800883c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881e:	3310      	adds	r3, #16
 8008820:	4618      	mov	r0, r3
 8008822:	f001 f897 	bl	8009954 <xTaskRemoveFromEventList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d007      	beq.n	800883c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800882c:	4b3c      	ldr	r3, [pc, #240]	@ (8008920 <xQueueReceive+0x1c0>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800883c:	f002 f8b6 	bl	800a9ac <vPortExitCritical>
				return pdPASS;
 8008840:	2301      	movs	r3, #1
 8008842:	e069      	b.n	8008918 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800884a:	f002 f8af 	bl	800a9ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800884e:	2300      	movs	r3, #0
 8008850:	e062      	b.n	8008918 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008858:	f107 0310 	add.w	r3, r7, #16
 800885c:	4618      	mov	r0, r3
 800885e:	f001 f8dd 	bl	8009a1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008862:	2301      	movs	r3, #1
 8008864:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008866:	f002 f8a1 	bl	800a9ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800886a:	f000 fe1b 	bl	80094a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800886e:	f002 f86d 	bl	800a94c <vPortEnterCritical>
 8008872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008874:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008878:	b25b      	sxtb	r3, r3
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d103      	bne.n	8008888 <xQueueReceive+0x128>
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800888e:	b25b      	sxtb	r3, r3
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d103      	bne.n	800889e <xQueueReceive+0x13e>
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800889e:	f002 f885 	bl	800a9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088a2:	1d3a      	adds	r2, r7, #4
 80088a4:	f107 0310 	add.w	r3, r7, #16
 80088a8:	4611      	mov	r1, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 f8cc 	bl	8009a48 <xTaskCheckForTimeOut>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d123      	bne.n	80088fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088b8:	f000 fae3 	bl	8008e82 <prvIsQueueEmpty>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d017      	beq.n	80088f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c4:	3324      	adds	r3, #36	@ 0x24
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fff0 	bl	80098b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d2:	f000 fa84 	bl	8008dde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088d6:	f000 fdf3 	bl	80094c0 <xTaskResumeAll>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d189      	bne.n	80087f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80088e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008920 <xQueueReceive+0x1c0>)
 80088e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	e780      	b.n	80087f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f4:	f000 fa73 	bl	8008dde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088f8:	f000 fde2 	bl	80094c0 <xTaskResumeAll>
 80088fc:	e77a      	b.n	80087f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008900:	f000 fa6d 	bl	8008dde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008904:	f000 fddc 	bl	80094c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800890a:	f000 faba 	bl	8008e82 <prvIsQueueEmpty>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	f43f af6f 	beq.w	80087f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008916:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008918:	4618      	mov	r0, r3
 800891a:	3730      	adds	r7, #48	@ 0x30
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	@ 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800892e:	2300      	movs	r3, #0
 8008930:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	623b      	str	r3, [r7, #32]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	61fb      	str	r3, [r7, #28]
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	e7fd      	b.n	8008974 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008978:	f001 f9ee 	bl	8009d58 <xTaskGetSchedulerState>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <xQueueSemaphoreTake+0x64>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <xQueueSemaphoreTake+0x68>
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <xQueueSemaphoreTake+0x6a>
 800898c:	2300      	movs	r3, #0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	61bb      	str	r3, [r7, #24]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80089aa:	f001 ffcf 	bl	800a94c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d024      	beq.n	8008a04 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	1e5a      	subs	r2, r3, #1
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80089ca:	f001 fb49 	bl	800a060 <pvTaskIncrementMutexHeldCount>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00f      	beq.n	80089fc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	3310      	adds	r3, #16
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 ffb7 	bl	8009954 <xTaskRemoveFromEventList>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d007      	beq.n	80089fc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089ec:	4b54      	ldr	r3, [pc, #336]	@ (8008b40 <xQueueSemaphoreTake+0x21c>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089fc:	f001 ffd6 	bl	800a9ac <vPortExitCritical>
				return pdPASS;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e098      	b.n	8008b36 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d112      	bne.n	8008a30 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	617b      	str	r3, [r7, #20]
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a28:	f001 ffc0 	bl	800a9ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e082      	b.n	8008b36 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 ffee 	bl	8009a1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a44:	f001 ffb2 	bl	800a9ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a48:	f000 fd2c 	bl	80094a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a4c:	f001 ff7e 	bl	800a94c <vPortEnterCritical>
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d103      	bne.n	8008a66 <xQueueSemaphoreTake+0x142>
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a6c:	b25b      	sxtb	r3, r3
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d103      	bne.n	8008a7c <xQueueSemaphoreTake+0x158>
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a7c:	f001 ff96 	bl	800a9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a80:	463a      	mov	r2, r7
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 ffdd 	bl	8009a48 <xTaskCheckForTimeOut>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d132      	bne.n	8008afa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a96:	f000 f9f4 	bl	8008e82 <prvIsQueueEmpty>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d026      	beq.n	8008aee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008aa8:	f001 ff50 	bl	800a94c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f96f 	bl	8009d94 <xTaskPriorityInherit>
 8008ab6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008ab8:	f001 ff78 	bl	800a9ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	3324      	adds	r3, #36	@ 0x24
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fef3 	bl	80098b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008acc:	f000 f987 	bl	8008dde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ad0:	f000 fcf6 	bl	80094c0 <xTaskResumeAll>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f47f af67 	bne.w	80089aa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008adc:	4b18      	ldr	r3, [pc, #96]	@ (8008b40 <xQueueSemaphoreTake+0x21c>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	e75d      	b.n	80089aa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008aee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008af0:	f000 f975 	bl	8008dde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008af4:	f000 fce4 	bl	80094c0 <xTaskResumeAll>
 8008af8:	e757      	b.n	80089aa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008afa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008afc:	f000 f96f 	bl	8008dde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b00:	f000 fcde 	bl	80094c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b06:	f000 f9bc 	bl	8008e82 <prvIsQueueEmpty>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f43f af4c 	beq.w	80089aa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00d      	beq.n	8008b34 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b18:	f001 ff18 	bl	800a94c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b1e:	f000 f8b7 	bl	8008c90 <prvGetDisinheritPriorityAfterTimeout>
 8008b22:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fa10 	bl	8009f50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b30:	f001 ff3c 	bl	800a9ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3738      	adds	r7, #56	@ 0x38
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	@ 0x38
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	623b      	str	r3, [r7, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <xQueueReceiveFromISR+0x3c>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <xQueueReceiveFromISR+0x40>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <xQueueReceiveFromISR+0x42>
 8008b84:	2300      	movs	r3, #0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10b      	bne.n	8008ba2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	61fb      	str	r3, [r7, #28]
}
 8008b9c:	bf00      	nop
 8008b9e:	bf00      	nop
 8008ba0:	e7fd      	b.n	8008b9e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ba2:	f001 ff95 	bl	800aad0 <vPortValidateInterruptPriority>
	__asm volatile
 8008ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	61ba      	str	r2, [r7, #24]
 8008bbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008bbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d02f      	beq.n	8008c2e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bdc:	f000 f8d9 	bl	8008d92 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	1e5a      	subs	r2, r3, #1
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008be8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d112      	bne.n	8008c18 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d016      	beq.n	8008c28 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfc:	3310      	adds	r3, #16
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fea8 	bl	8009954 <xTaskRemoveFromEventList>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00e      	beq.n	8008c28 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	e007      	b.n	8008c28 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	b25a      	sxtb	r2, r3
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2c:	e001      	b.n	8008c32 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f383 8811 	msr	BASEPRI, r3
}
 8008c3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3738      	adds	r7, #56	@ 0x38
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10b      	bne.n	8008c72 <vQueueDelete+0x2a>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	60bb      	str	r3, [r7, #8]
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	e7fd      	b.n	8008c6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f95c 	bl	8008f30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f002 f82c 	bl	800ace0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	e001      	b.n	8008cb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
	}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr

08008cbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b086      	sub	sp, #24
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d14d      	bne.n	8008d80 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 f8c1 	bl	8009e70 <xTaskPriorityDisinherit>
 8008cee:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	e043      	b.n	8008d80 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d119      	bne.n	8008d32 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6898      	ldr	r0, [r3, #8]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d06:	461a      	mov	r2, r3
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	f002 fa23 	bl	800b154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d16:	441a      	add	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d32b      	bcc.n	8008d80 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	609a      	str	r2, [r3, #8]
 8008d30:	e026      	b.n	8008d80 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	68d8      	ldr	r0, [r3, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	f002 fa09 	bl	800b154 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4a:	425b      	negs	r3, r3
 8008d4c:	441a      	add	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d207      	bcs.n	8008d6e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d66:	425b      	negs	r3, r3
 8008d68:	441a      	add	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d105      	bne.n	8008d80 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d88:	697b      	ldr	r3, [r7, #20]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d018      	beq.n	8008dd6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68da      	ldr	r2, [r3, #12]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dac:	441a      	add	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d303      	bcc.n	8008dc6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68d9      	ldr	r1, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6838      	ldr	r0, [r7, #0]
 8008dd2:	f002 f9bf 	bl	800b154 <memcpy>
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008de6:	f001 fdb1 	bl	800a94c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008df0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008df2:	e011      	b.n	8008e18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d012      	beq.n	8008e22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3324      	adds	r3, #36	@ 0x24
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fda7 	bl	8009954 <xTaskRemoveFromEventList>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e0c:	f000 fe80 	bl	8009b10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dce9      	bgt.n	8008df4 <prvUnlockQueue+0x16>
 8008e20:	e000      	b.n	8008e24 <prvUnlockQueue+0x46>
					break;
 8008e22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	22ff      	movs	r2, #255	@ 0xff
 8008e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008e2c:	f001 fdbe 	bl	800a9ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e30:	f001 fd8c 	bl	800a94c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e3c:	e011      	b.n	8008e62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d012      	beq.n	8008e6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3310      	adds	r3, #16
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fd82 	bl	8009954 <xTaskRemoveFromEventList>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e56:	f000 fe5b 	bl	8009b10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dce9      	bgt.n	8008e3e <prvUnlockQueue+0x60>
 8008e6a:	e000      	b.n	8008e6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	22ff      	movs	r2, #255	@ 0xff
 8008e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e76:	f001 fd99 	bl	800a9ac <vPortExitCritical>
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e8a:	f001 fd5f 	bl	800a94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d102      	bne.n	8008e9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	e001      	b.n	8008ea0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ea0:	f001 fd84 	bl	800a9ac <vPortExitCritical>

	return xReturn;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb6:	f001 fd49 	bl	800a94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d102      	bne.n	8008ecc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	e001      	b.n	8008ed0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ed0:	f001 fd6c 	bl	800a9ac <vPortExitCritical>

	return xReturn;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e014      	b.n	8008f1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8008f2c <vQueueAddToRegistry+0x4c>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008efc:	490b      	ldr	r1, [pc, #44]	@ (8008f2c <vQueueAddToRegistry+0x4c>)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f06:	4a09      	ldr	r2, [pc, #36]	@ (8008f2c <vQueueAddToRegistry+0x4c>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f12:	e006      	b.n	8008f22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b07      	cmp	r3, #7
 8008f1e:	d9e7      	bls.n	8008ef0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr
 8008f2c:	20002be4 	.word	0x20002be4

08008f30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	e016      	b.n	8008f6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f3e:	4a10      	ldr	r2, [pc, #64]	@ (8008f80 <vQueueUnregisterQueue+0x50>)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	4413      	add	r3, r2
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d10b      	bne.n	8008f66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008f80 <vQueueUnregisterQueue+0x50>)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2100      	movs	r1, #0
 8008f54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f58:	4a09      	ldr	r2, [pc, #36]	@ (8008f80 <vQueueUnregisterQueue+0x50>)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	4413      	add	r3, r2
 8008f60:	2200      	movs	r2, #0
 8008f62:	605a      	str	r2, [r3, #4]
				break;
 8008f64:	e006      	b.n	8008f74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b07      	cmp	r3, #7
 8008f70:	d9e5      	bls.n	8008f3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20002be4 	.word	0x20002be4

08008f84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f94:	f001 fcda 	bl	800a94c <vPortEnterCritical>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f9e:	b25b      	sxtb	r3, r3
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d103      	bne.n	8008fae <vQueueWaitForMessageRestricted+0x2a>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fb4:	b25b      	sxtb	r3, r3
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d103      	bne.n	8008fc4 <vQueueWaitForMessageRestricted+0x40>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fc4:	f001 fcf2 	bl	800a9ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3324      	adds	r3, #36	@ 0x24
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fc8f 	bl	80098fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7ff fefd 	bl	8008dde <prvUnlockQueue>
	}
 8008fe4:	bf00      	nop
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	@ 0x38
 8008ff0:	af04      	add	r7, sp, #16
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	623b      	str	r3, [r7, #32]
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10b      	bne.n	8009036 <xTaskCreateStatic+0x4a>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	61fb      	str	r3, [r7, #28]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009036:	23ac      	movs	r3, #172	@ 0xac
 8009038:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2bac      	cmp	r3, #172	@ 0xac
 800903e:	d00b      	beq.n	8009058 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	61bb      	str	r3, [r7, #24]
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01e      	beq.n	800909c <xTaskCreateStatic+0xb0>
 800905e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01b      	beq.n	800909c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800906c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	2202      	movs	r2, #2
 8009072:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009076:	2300      	movs	r3, #0
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	f107 0314 	add.w	r3, r7, #20
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f850 	bl	8009134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009094:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009096:	f000 f8ef 	bl	8009278 <prvAddNewTaskToReadyList>
 800909a:	e001      	b.n	80090a0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800909c:	2300      	movs	r3, #0
 800909e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090a0:	697b      	ldr	r3, [r7, #20]
	}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3728      	adds	r7, #40	@ 0x28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b08c      	sub	sp, #48	@ 0x30
 80090ae:	af04      	add	r7, sp, #16
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	603b      	str	r3, [r7, #0]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fd46 	bl	800ab50 <pvPortMalloc>
 80090c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00e      	beq.n	80090ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80090cc:	20ac      	movs	r0, #172	@ 0xac
 80090ce:	f001 fd3f 	bl	800ab50 <pvPortMalloc>
 80090d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	631a      	str	r2, [r3, #48]	@ 0x30
 80090e0:	e005      	b.n	80090ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f001 fdfc 	bl	800ace0 <vPortFree>
 80090e8:	e001      	b.n	80090ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d017      	beq.n	8009124 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090fc:	88fa      	ldrh	r2, [r7, #6]
 80090fe:	2300      	movs	r3, #0
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	9302      	str	r3, [sp, #8]
 8009106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 f80e 	bl	8009134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009118:	69f8      	ldr	r0, [r7, #28]
 800911a:	f000 f8ad 	bl	8009278 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800911e:	2301      	movs	r3, #1
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	e002      	b.n	800912a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009124:	f04f 33ff 	mov.w	r3, #4294967295
 8009128:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800912a:	69bb      	ldr	r3, [r7, #24]
	}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009144:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	461a      	mov	r2, r3
 800914c:	21a5      	movs	r1, #165	@ 0xa5
 800914e:	f001 ff77 	bl	800b040 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800915c:	3b01      	subs	r3, #1
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	f023 0307 	bic.w	r3, r3, #7
 800916a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00b      	beq.n	800918e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	617b      	str	r3, [r7, #20]
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	e7fd      	b.n	800918a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800918e:	2300      	movs	r3, #0
 8009190:	61fb      	str	r3, [r7, #28]
 8009192:	e012      	b.n	80091ba <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	4413      	add	r3, r2
 800919a:	7819      	ldrb	r1, [r3, #0]
 800919c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	3334      	adds	r3, #52	@ 0x34
 80091a4:	460a      	mov	r2, r1
 80091a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d006      	beq.n	80091c2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	3301      	adds	r3, #1
 80091b8:	61fb      	str	r3, [r7, #28]
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	2b0f      	cmp	r3, #15
 80091be:	d9e9      	bls.n	8009194 <prvInitialiseNewTask+0x60>
 80091c0:	e000      	b.n	80091c4 <prvInitialiseNewTask+0x90>
		{
			break;
 80091c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	2b37      	cmp	r3, #55	@ 0x37
 80091d0:	d901      	bls.n	80091d6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091d2:	2337      	movs	r3, #55	@ 0x37
 80091d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2200      	movs	r2, #0
 80091e6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	3304      	adds	r3, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe fe42 	bl	8007e76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f4:	3318      	adds	r3, #24
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fe3d 	bl	8007e76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009200:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009210:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	2200      	movs	r2, #0
 8009216:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	2200      	movs	r2, #0
 8009224:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	3358      	adds	r3, #88	@ 0x58
 800922c:	224c      	movs	r2, #76	@ 0x4c
 800922e:	2100      	movs	r1, #0
 8009230:	4618      	mov	r0, r3
 8009232:	f001 ff05 	bl	800b040 <memset>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	4a0c      	ldr	r2, [pc, #48]	@ (800926c <prvInitialiseNewTask+0x138>)
 800923a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	4a0c      	ldr	r2, [pc, #48]	@ (8009270 <prvInitialiseNewTask+0x13c>)
 8009240:	661a      	str	r2, [r3, #96]	@ 0x60
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	4a0b      	ldr	r2, [pc, #44]	@ (8009274 <prvInitialiseNewTask+0x140>)
 8009246:	665a      	str	r2, [r3, #100]	@ 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	69b8      	ldr	r0, [r7, #24]
 800924e:	f001 fa8f 	bl	800a770 <pxPortInitialiseStack>
 8009252:	4602      	mov	r2, r0
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009262:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009264:	bf00      	nop
 8009266:	3720      	adds	r7, #32
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20003fec 	.word	0x20003fec
 8009270:	20004054 	.word	0x20004054
 8009274:	200040bc 	.word	0x200040bc

08009278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009280:	f001 fb64 	bl	800a94c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009284:	4b2d      	ldr	r3, [pc, #180]	@ (800933c <prvAddNewTaskToReadyList+0xc4>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	4a2c      	ldr	r2, [pc, #176]	@ (800933c <prvAddNewTaskToReadyList+0xc4>)
 800928c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800928e:	4b2c      	ldr	r3, [pc, #176]	@ (8009340 <prvAddNewTaskToReadyList+0xc8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d109      	bne.n	80092aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009296:	4a2a      	ldr	r2, [pc, #168]	@ (8009340 <prvAddNewTaskToReadyList+0xc8>)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800929c:	4b27      	ldr	r3, [pc, #156]	@ (800933c <prvAddNewTaskToReadyList+0xc4>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d110      	bne.n	80092c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092a4:	f000 fc58 	bl	8009b58 <prvInitialiseTaskLists>
 80092a8:	e00d      	b.n	80092c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092aa:	4b26      	ldr	r3, [pc, #152]	@ (8009344 <prvAddNewTaskToReadyList+0xcc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092b2:	4b23      	ldr	r3, [pc, #140]	@ (8009340 <prvAddNewTaskToReadyList+0xc8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092bc:	429a      	cmp	r2, r3
 80092be:	d802      	bhi.n	80092c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009340 <prvAddNewTaskToReadyList+0xc8>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092c6:	4b20      	ldr	r3, [pc, #128]	@ (8009348 <prvAddNewTaskToReadyList+0xd0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3301      	adds	r3, #1
 80092cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009348 <prvAddNewTaskToReadyList+0xd0>)
 80092ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <prvAddNewTaskToReadyList+0xd0>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	4b1b      	ldr	r3, [pc, #108]	@ (800934c <prvAddNewTaskToReadyList+0xd4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d903      	bls.n	80092ec <prvAddNewTaskToReadyList+0x74>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	4a18      	ldr	r2, [pc, #96]	@ (800934c <prvAddNewTaskToReadyList+0xd4>)
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4a15      	ldr	r2, [pc, #84]	@ (8009350 <prvAddNewTaskToReadyList+0xd8>)
 80092fa:	441a      	add	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3304      	adds	r3, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe fdc3 	bl	8007e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009308:	f001 fb50 	bl	800a9ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800930c:	4b0d      	ldr	r3, [pc, #52]	@ (8009344 <prvAddNewTaskToReadyList+0xcc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00e      	beq.n	8009332 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009314:	4b0a      	ldr	r3, [pc, #40]	@ (8009340 <prvAddNewTaskToReadyList+0xc8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	429a      	cmp	r2, r3
 8009320:	d207      	bcs.n	8009332 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009322:	4b0c      	ldr	r3, [pc, #48]	@ (8009354 <prvAddNewTaskToReadyList+0xdc>)
 8009324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	200030f8 	.word	0x200030f8
 8009340:	20002c24 	.word	0x20002c24
 8009344:	20003104 	.word	0x20003104
 8009348:	20003114 	.word	0x20003114
 800934c:	20003100 	.word	0x20003100
 8009350:	20002c28 	.word	0x20002c28
 8009354:	e000ed04 	.word	0xe000ed04

08009358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d018      	beq.n	800939c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800936a:	4b14      	ldr	r3, [pc, #80]	@ (80093bc <vTaskDelay+0x64>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00b      	beq.n	800938a <vTaskDelay+0x32>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	60bb      	str	r3, [r7, #8]
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	e7fd      	b.n	8009386 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800938a:	f000 f88b 	bl	80094a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800938e:	2100      	movs	r1, #0
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fe79 	bl	800a088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009396:	f000 f893 	bl	80094c0 <xTaskResumeAll>
 800939a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d107      	bne.n	80093b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80093a2:	4b07      	ldr	r3, [pc, #28]	@ (80093c0 <vTaskDelay+0x68>)
 80093a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20003120 	.word	0x20003120
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	@ 0x28
 80093c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093d2:	463a      	mov	r2, r7
 80093d4:	1d39      	adds	r1, r7, #4
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fcfa 	bl	8007dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	9202      	str	r2, [sp, #8]
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	2300      	movs	r3, #0
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2300      	movs	r3, #0
 80093f0:	460a      	mov	r2, r1
 80093f2:	4924      	ldr	r1, [pc, #144]	@ (8009484 <vTaskStartScheduler+0xc0>)
 80093f4:	4824      	ldr	r0, [pc, #144]	@ (8009488 <vTaskStartScheduler+0xc4>)
 80093f6:	f7ff fdf9 	bl	8008fec <xTaskCreateStatic>
 80093fa:	4603      	mov	r3, r0
 80093fc:	4a23      	ldr	r2, [pc, #140]	@ (800948c <vTaskStartScheduler+0xc8>)
 80093fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009400:	4b22      	ldr	r3, [pc, #136]	@ (800948c <vTaskStartScheduler+0xc8>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009408:	2301      	movs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e001      	b.n	8009412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d102      	bne.n	800941e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009418:	f000 fe8a 	bl	800a130 <xTimerCreateTimerTask>
 800941c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d11b      	bne.n	800945c <vTaskStartScheduler+0x98>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	613b      	str	r3, [r7, #16]
}
 8009436:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009438:	4b15      	ldr	r3, [pc, #84]	@ (8009490 <vTaskStartScheduler+0xcc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3358      	adds	r3, #88	@ 0x58
 800943e:	4a15      	ldr	r2, [pc, #84]	@ (8009494 <vTaskStartScheduler+0xd0>)
 8009440:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009442:	4b15      	ldr	r3, [pc, #84]	@ (8009498 <vTaskStartScheduler+0xd4>)
 8009444:	f04f 32ff 	mov.w	r2, #4294967295
 8009448:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800944a:	4b14      	ldr	r3, [pc, #80]	@ (800949c <vTaskStartScheduler+0xd8>)
 800944c:	2201      	movs	r2, #1
 800944e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009450:	4b13      	ldr	r3, [pc, #76]	@ (80094a0 <vTaskStartScheduler+0xdc>)
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009456:	f001 fa07 	bl	800a868 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800945a:	e00f      	b.n	800947c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d10b      	bne.n	800947c <vTaskStartScheduler+0xb8>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	60fb      	str	r3, [r7, #12]
}
 8009476:	bf00      	nop
 8009478:	bf00      	nop
 800947a:	e7fd      	b.n	8009478 <vTaskStartScheduler+0xb4>
}
 800947c:	bf00      	nop
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	0800cca0 	.word	0x0800cca0
 8009488:	08009b29 	.word	0x08009b29
 800948c:	2000311c 	.word	0x2000311c
 8009490:	20002c24 	.word	0x20002c24
 8009494:	20001020 	.word	0x20001020
 8009498:	20003118 	.word	0x20003118
 800949c:	20003104 	.word	0x20003104
 80094a0:	200030fc 	.word	0x200030fc

080094a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <vTaskSuspendAll+0x18>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	4a03      	ldr	r2, [pc, #12]	@ (80094bc <vTaskSuspendAll+0x18>)
 80094b0:	6013      	str	r3, [r2, #0]
}
 80094b2:	bf00      	nop
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20003120 	.word	0x20003120

080094c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094ce:	4b42      	ldr	r3, [pc, #264]	@ (80095d8 <xTaskResumeAll+0x118>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10b      	bne.n	80094ee <xTaskResumeAll+0x2e>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	603b      	str	r3, [r7, #0]
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094ee:	f001 fa2d 	bl	800a94c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094f2:	4b39      	ldr	r3, [pc, #228]	@ (80095d8 <xTaskResumeAll+0x118>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	4a37      	ldr	r2, [pc, #220]	@ (80095d8 <xTaskResumeAll+0x118>)
 80094fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094fc:	4b36      	ldr	r3, [pc, #216]	@ (80095d8 <xTaskResumeAll+0x118>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d162      	bne.n	80095ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009504:	4b35      	ldr	r3, [pc, #212]	@ (80095dc <xTaskResumeAll+0x11c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d05e      	beq.n	80095ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800950c:	e02f      	b.n	800956e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800950e:	4b34      	ldr	r3, [pc, #208]	@ (80095e0 <xTaskResumeAll+0x120>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3318      	adds	r3, #24
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fd12 	bl	8007f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3304      	adds	r3, #4
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fd0d 	bl	8007f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952e:	4b2d      	ldr	r3, [pc, #180]	@ (80095e4 <xTaskResumeAll+0x124>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d903      	bls.n	800953e <xTaskResumeAll+0x7e>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953a:	4a2a      	ldr	r2, [pc, #168]	@ (80095e4 <xTaskResumeAll+0x124>)
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4a27      	ldr	r2, [pc, #156]	@ (80095e8 <xTaskResumeAll+0x128>)
 800954c:	441a      	add	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fe fc9a 	bl	8007e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955e:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <xTaskResumeAll+0x12c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	429a      	cmp	r2, r3
 8009566:	d302      	bcc.n	800956e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009568:	4b21      	ldr	r3, [pc, #132]	@ (80095f0 <xTaskResumeAll+0x130>)
 800956a:	2201      	movs	r2, #1
 800956c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800956e:	4b1c      	ldr	r3, [pc, #112]	@ (80095e0 <xTaskResumeAll+0x120>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1cb      	bne.n	800950e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800957c:	f000 fbc8 	bl	8009d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009580:	4b1c      	ldr	r3, [pc, #112]	@ (80095f4 <xTaskResumeAll+0x134>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d010      	beq.n	80095ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800958c:	f000 f844 	bl	8009618 <xTaskIncrementTick>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009596:	4b16      	ldr	r3, [pc, #88]	@ (80095f0 <xTaskResumeAll+0x130>)
 8009598:	2201      	movs	r2, #1
 800959a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3b01      	subs	r3, #1
 80095a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1f1      	bne.n	800958c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80095a8:	4b12      	ldr	r3, [pc, #72]	@ (80095f4 <xTaskResumeAll+0x134>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095ae:	4b10      	ldr	r3, [pc, #64]	@ (80095f0 <xTaskResumeAll+0x130>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095b6:	2301      	movs	r3, #1
 80095b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095ba:	4b0f      	ldr	r3, [pc, #60]	@ (80095f8 <xTaskResumeAll+0x138>)
 80095bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095ca:	f001 f9ef 	bl	800a9ac <vPortExitCritical>

	return xAlreadyYielded;
 80095ce:	68bb      	ldr	r3, [r7, #8]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20003120 	.word	0x20003120
 80095dc:	200030f8 	.word	0x200030f8
 80095e0:	200030b8 	.word	0x200030b8
 80095e4:	20003100 	.word	0x20003100
 80095e8:	20002c28 	.word	0x20002c28
 80095ec:	20002c24 	.word	0x20002c24
 80095f0:	2000310c 	.word	0x2000310c
 80095f4:	20003108 	.word	0x20003108
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009602:	4b04      	ldr	r3, [pc, #16]	@ (8009614 <xTaskGetTickCount+0x18>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009608:	687b      	ldr	r3, [r7, #4]
}
 800960a:	4618      	mov	r0, r3
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	bc80      	pop	{r7}
 8009612:	4770      	bx	lr
 8009614:	200030fc 	.word	0x200030fc

08009618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009622:	4b52      	ldr	r3, [pc, #328]	@ (800976c <xTaskIncrementTick+0x154>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f040 808f 	bne.w	800974a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800962c:	4b50      	ldr	r3, [pc, #320]	@ (8009770 <xTaskIncrementTick+0x158>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3301      	adds	r3, #1
 8009632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009634:	4a4e      	ldr	r2, [pc, #312]	@ (8009770 <xTaskIncrementTick+0x158>)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d121      	bne.n	8009684 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009640:	4b4c      	ldr	r3, [pc, #304]	@ (8009774 <xTaskIncrementTick+0x15c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <xTaskIncrementTick+0x4a>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	603b      	str	r3, [r7, #0]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <xTaskIncrementTick+0x46>
 8009662:	4b44      	ldr	r3, [pc, #272]	@ (8009774 <xTaskIncrementTick+0x15c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	4b43      	ldr	r3, [pc, #268]	@ (8009778 <xTaskIncrementTick+0x160>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a41      	ldr	r2, [pc, #260]	@ (8009774 <xTaskIncrementTick+0x15c>)
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	4a41      	ldr	r2, [pc, #260]	@ (8009778 <xTaskIncrementTick+0x160>)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	4b41      	ldr	r3, [pc, #260]	@ (800977c <xTaskIncrementTick+0x164>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	4a3f      	ldr	r2, [pc, #252]	@ (800977c <xTaskIncrementTick+0x164>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	f000 fb46 	bl	8009d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009684:	4b3e      	ldr	r3, [pc, #248]	@ (8009780 <xTaskIncrementTick+0x168>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	429a      	cmp	r2, r3
 800968c:	d34e      	bcc.n	800972c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800968e:	4b39      	ldr	r3, [pc, #228]	@ (8009774 <xTaskIncrementTick+0x15c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <xTaskIncrementTick+0x84>
 8009698:	2301      	movs	r3, #1
 800969a:	e000      	b.n	800969e <xTaskIncrementTick+0x86>
 800969c:	2300      	movs	r3, #0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a2:	4b37      	ldr	r3, [pc, #220]	@ (8009780 <xTaskIncrementTick+0x168>)
 80096a4:	f04f 32ff 	mov.w	r2, #4294967295
 80096a8:	601a      	str	r2, [r3, #0]
					break;
 80096aa:	e03f      	b.n	800972c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096ac:	4b31      	ldr	r3, [pc, #196]	@ (8009774 <xTaskIncrementTick+0x15c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d203      	bcs.n	80096cc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096c4:	4a2e      	ldr	r2, [pc, #184]	@ (8009780 <xTaskIncrementTick+0x168>)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6013      	str	r3, [r2, #0]
						break;
 80096ca:	e02f      	b.n	800972c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe fc37 	bl	8007f44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	3318      	adds	r3, #24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fc2e 	bl	8007f44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ec:	4b25      	ldr	r3, [pc, #148]	@ (8009784 <xTaskIncrementTick+0x16c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d903      	bls.n	80096fc <xTaskIncrementTick+0xe4>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	4a22      	ldr	r2, [pc, #136]	@ (8009784 <xTaskIncrementTick+0x16c>)
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4a1f      	ldr	r2, [pc, #124]	@ (8009788 <xTaskIncrementTick+0x170>)
 800970a:	441a      	add	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fe fbbb 	bl	8007e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971c:	4b1b      	ldr	r3, [pc, #108]	@ (800978c <xTaskIncrementTick+0x174>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009722:	429a      	cmp	r2, r3
 8009724:	d3b3      	bcc.n	800968e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009726:	2301      	movs	r3, #1
 8009728:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800972a:	e7b0      	b.n	800968e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800972c:	4b17      	ldr	r3, [pc, #92]	@ (800978c <xTaskIncrementTick+0x174>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009732:	4915      	ldr	r1, [pc, #84]	@ (8009788 <xTaskIncrementTick+0x170>)
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d907      	bls.n	8009754 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009744:	2301      	movs	r3, #1
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e004      	b.n	8009754 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800974a:	4b11      	ldr	r3, [pc, #68]	@ (8009790 <xTaskIncrementTick+0x178>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3301      	adds	r3, #1
 8009750:	4a0f      	ldr	r2, [pc, #60]	@ (8009790 <xTaskIncrementTick+0x178>)
 8009752:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <xTaskIncrementTick+0x17c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800975c:	2301      	movs	r3, #1
 800975e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009760:	697b      	ldr	r3, [r7, #20]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20003120 	.word	0x20003120
 8009770:	200030fc 	.word	0x200030fc
 8009774:	200030b0 	.word	0x200030b0
 8009778:	200030b4 	.word	0x200030b4
 800977c:	20003110 	.word	0x20003110
 8009780:	20003118 	.word	0x20003118
 8009784:	20003100 	.word	0x20003100
 8009788:	20002c28 	.word	0x20002c28
 800978c:	20002c24 	.word	0x20002c24
 8009790:	20003108 	.word	0x20003108
 8009794:	2000310c 	.word	0x2000310c

08009798 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80097a8:	4b08      	ldr	r3, [pc, #32]	@ (80097cc <vTaskSetApplicationTaskTag+0x34>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e001      	b.n	80097b4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80097b4:	f001 f8ca 	bl	800a94c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	655a      	str	r2, [r3, #84]	@ 0x54
		taskEXIT_CRITICAL();
 80097be:	f001 f8f5 	bl	800a9ac <vPortExitCritical>
	}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20002c24 	.word	0x20002c24

080097d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097d6:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <vTaskSwitchContext+0xc8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097de:	4b2f      	ldr	r3, [pc, #188]	@ (800989c <vTaskSwitchContext+0xcc>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097e4:	e053      	b.n	800988e <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 80097e6:	4b2d      	ldr	r3, [pc, #180]	@ (800989c <vTaskSwitchContext+0xcc>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80097ec:	4b2c      	ldr	r3, [pc, #176]	@ (80098a0 <vTaskSwitchContext+0xd0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f8 f93c 	bl	8001a70 <callback_out>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80097f8:	4b2a      	ldr	r3, [pc, #168]	@ (80098a4 <vTaskSwitchContext+0xd4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e011      	b.n	8009824 <vTaskSwitchContext+0x54>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10b      	bne.n	800981e <vTaskSwitchContext+0x4e>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	607b      	str	r3, [r7, #4]
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <vTaskSwitchContext+0x4a>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3b01      	subs	r3, #1
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	4920      	ldr	r1, [pc, #128]	@ (80098a8 <vTaskSwitchContext+0xd8>)
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0e3      	beq.n	8009800 <vTaskSwitchContext+0x30>
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4a19      	ldr	r2, [pc, #100]	@ (80098a8 <vTaskSwitchContext+0xd8>)
 8009844:	4413      	add	r3, r2
 8009846:	60bb      	str	r3, [r7, #8]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	605a      	str	r2, [r3, #4]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	3308      	adds	r3, #8
 800985a:	429a      	cmp	r2, r3
 800985c:	d104      	bne.n	8009868 <vTaskSwitchContext+0x98>
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4a0c      	ldr	r2, [pc, #48]	@ (80098a0 <vTaskSwitchContext+0xd0>)
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	4a0c      	ldr	r2, [pc, #48]	@ (80098a4 <vTaskSwitchContext+0xd4>)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009878:	4b09      	ldr	r3, [pc, #36]	@ (80098a0 <vTaskSwitchContext+0xd0>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	4618      	mov	r0, r3
 8009880:	f7f8 f8c4 	bl	8001a0c <callback_in>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009884:	4b06      	ldr	r3, [pc, #24]	@ (80098a0 <vTaskSwitchContext+0xd0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3358      	adds	r3, #88	@ 0x58
 800988a:	4a08      	ldr	r2, [pc, #32]	@ (80098ac <vTaskSwitchContext+0xdc>)
 800988c:	6013      	str	r3, [r2, #0]
}
 800988e:	bf00      	nop
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20003120 	.word	0x20003120
 800989c:	2000310c 	.word	0x2000310c
 80098a0:	20002c24 	.word	0x20002c24
 80098a4:	20003100 	.word	0x20003100
 80098a8:	20002c28 	.word	0x20002c28
 80098ac:	20001020 	.word	0x20001020

080098b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10b      	bne.n	80098d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	60fb      	str	r3, [r7, #12]
}
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
 80098d6:	e7fd      	b.n	80098d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098d8:	4b07      	ldr	r3, [pc, #28]	@ (80098f8 <vTaskPlaceOnEventList+0x48>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3318      	adds	r3, #24
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fe faf7 	bl	8007ed4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098e6:	2101      	movs	r1, #1
 80098e8:	6838      	ldr	r0, [r7, #0]
 80098ea:	f000 fbcd 	bl	800a088 <prvAddCurrentTaskToDelayedList>
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20002c24 	.word	0x20002c24

080098fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	617b      	str	r3, [r7, #20]
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	e7fd      	b.n	8009922 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009926:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <vTaskPlaceOnEventListRestricted+0x54>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3318      	adds	r3, #24
 800992c:	4619      	mov	r1, r3
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7fe faad 	bl	8007e8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d002      	beq.n	8009940 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800993a:	f04f 33ff 	mov.w	r3, #4294967295
 800993e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	68b8      	ldr	r0, [r7, #8]
 8009944:	f000 fba0 	bl	800a088 <prvAddCurrentTaskToDelayedList>
	}
 8009948:	bf00      	nop
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20002c24 	.word	0x20002c24

08009954 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	60fb      	str	r3, [r7, #12]
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	e7fd      	b.n	800997e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	3318      	adds	r3, #24
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe fadc 	bl	8007f44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a04 <xTaskRemoveFromEventList+0xb0>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d11d      	bne.n	80099d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	3304      	adds	r3, #4
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fad3 	bl	8007f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a2:	4b19      	ldr	r3, [pc, #100]	@ (8009a08 <xTaskRemoveFromEventList+0xb4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d903      	bls.n	80099b2 <xTaskRemoveFromEventList+0x5e>
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ae:	4a16      	ldr	r2, [pc, #88]	@ (8009a08 <xTaskRemoveFromEventList+0xb4>)
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4a13      	ldr	r2, [pc, #76]	@ (8009a0c <xTaskRemoveFromEventList+0xb8>)
 80099c0:	441a      	add	r2, r3
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f7fe fa60 	bl	8007e8e <vListInsertEnd>
 80099ce:	e005      	b.n	80099dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	3318      	adds	r3, #24
 80099d4:	4619      	mov	r1, r3
 80099d6:	480e      	ldr	r0, [pc, #56]	@ (8009a10 <xTaskRemoveFromEventList+0xbc>)
 80099d8:	f7fe fa59 	bl	8007e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <xTaskRemoveFromEventList+0xc0>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d905      	bls.n	80099f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099ea:	2301      	movs	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <xTaskRemoveFromEventList+0xc4>)
 80099f0:	2201      	movs	r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	e001      	b.n	80099fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80099fa:	697b      	ldr	r3, [r7, #20]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20003120 	.word	0x20003120
 8009a08:	20003100 	.word	0x20003100
 8009a0c:	20002c28 	.word	0x20002c28
 8009a10:	200030b8 	.word	0x200030b8
 8009a14:	20002c24 	.word	0x20002c24
 8009a18:	2000310c 	.word	0x2000310c

08009a1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <vTaskInternalSetTimeOutState+0x24>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <vTaskInternalSetTimeOutState+0x28>)
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	605a      	str	r2, [r3, #4]
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bc80      	pop	{r7}
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20003110 	.word	0x20003110
 8009a44:	200030fc 	.word	0x200030fc

08009a48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10b      	bne.n	8009a70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	613b      	str	r3, [r7, #16]
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	e7fd      	b.n	8009a6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10b      	bne.n	8009a8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60fb      	str	r3, [r7, #12]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a8e:	f000 ff5d 	bl	800a94c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a92:	4b1d      	ldr	r3, [pc, #116]	@ (8009b08 <xTaskCheckForTimeOut+0xc0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d102      	bne.n	8009ab2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	e023      	b.n	8009afa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	4b15      	ldr	r3, [pc, #84]	@ (8009b0c <xTaskCheckForTimeOut+0xc4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d007      	beq.n	8009ace <xTaskCheckForTimeOut+0x86>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d302      	bcc.n	8009ace <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	61fb      	str	r3, [r7, #28]
 8009acc:	e015      	b.n	8009afa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d20b      	bcs.n	8009af0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	1ad2      	subs	r2, r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff ff99 	bl	8009a1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	e004      	b.n	8009afa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009af6:	2301      	movs	r3, #1
 8009af8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009afa:	f000 ff57 	bl	800a9ac <vPortExitCritical>

	return xReturn;
 8009afe:	69fb      	ldr	r3, [r7, #28]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	200030fc 	.word	0x200030fc
 8009b0c:	20003110 	.word	0x20003110

08009b10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b14:	4b03      	ldr	r3, [pc, #12]	@ (8009b24 <vTaskMissedYield+0x14>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	601a      	str	r2, [r3, #0]
}
 8009b1a:	bf00      	nop
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bc80      	pop	{r7}
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	2000310c 	.word	0x2000310c

08009b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b30:	f000 f852 	bl	8009bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b34:	4b06      	ldr	r3, [pc, #24]	@ (8009b50 <prvIdleTask+0x28>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d9f9      	bls.n	8009b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b3c:	4b05      	ldr	r3, [pc, #20]	@ (8009b54 <prvIdleTask+0x2c>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b4c:	e7f0      	b.n	8009b30 <prvIdleTask+0x8>
 8009b4e:	bf00      	nop
 8009b50:	20002c28 	.word	0x20002c28
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b5e:	2300      	movs	r3, #0
 8009b60:	607b      	str	r3, [r7, #4]
 8009b62:	e00c      	b.n	8009b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4a12      	ldr	r2, [pc, #72]	@ (8009bb8 <prvInitialiseTaskLists+0x60>)
 8009b70:	4413      	add	r3, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe f960 	bl	8007e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b37      	cmp	r3, #55	@ 0x37
 8009b82:	d9ef      	bls.n	8009b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b84:	480d      	ldr	r0, [pc, #52]	@ (8009bbc <prvInitialiseTaskLists+0x64>)
 8009b86:	f7fe f957 	bl	8007e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b8a:	480d      	ldr	r0, [pc, #52]	@ (8009bc0 <prvInitialiseTaskLists+0x68>)
 8009b8c:	f7fe f954 	bl	8007e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b90:	480c      	ldr	r0, [pc, #48]	@ (8009bc4 <prvInitialiseTaskLists+0x6c>)
 8009b92:	f7fe f951 	bl	8007e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b96:	480c      	ldr	r0, [pc, #48]	@ (8009bc8 <prvInitialiseTaskLists+0x70>)
 8009b98:	f7fe f94e 	bl	8007e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b9c:	480b      	ldr	r0, [pc, #44]	@ (8009bcc <prvInitialiseTaskLists+0x74>)
 8009b9e:	f7fe f94b 	bl	8007e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd0 <prvInitialiseTaskLists+0x78>)
 8009ba4:	4a05      	ldr	r2, [pc, #20]	@ (8009bbc <prvInitialiseTaskLists+0x64>)
 8009ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd4 <prvInitialiseTaskLists+0x7c>)
 8009baa:	4a05      	ldr	r2, [pc, #20]	@ (8009bc0 <prvInitialiseTaskLists+0x68>)
 8009bac:	601a      	str	r2, [r3, #0]
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20002c28 	.word	0x20002c28
 8009bbc:	20003088 	.word	0x20003088
 8009bc0:	2000309c 	.word	0x2000309c
 8009bc4:	200030b8 	.word	0x200030b8
 8009bc8:	200030cc 	.word	0x200030cc
 8009bcc:	200030e4 	.word	0x200030e4
 8009bd0:	200030b0 	.word	0x200030b0
 8009bd4:	200030b4 	.word	0x200030b4

08009bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bde:	e019      	b.n	8009c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009be0:	f000 feb4 	bl	800a94c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009be4:	4b10      	ldr	r3, [pc, #64]	@ (8009c28 <prvCheckTasksWaitingTermination+0x50>)
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe f9a7 	bl	8007f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <prvCheckTasksWaitingTermination+0x54>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8009c2c <prvCheckTasksWaitingTermination+0x54>)
 8009bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c00:	4b0b      	ldr	r3, [pc, #44]	@ (8009c30 <prvCheckTasksWaitingTermination+0x58>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	4a0a      	ldr	r2, [pc, #40]	@ (8009c30 <prvCheckTasksWaitingTermination+0x58>)
 8009c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c0a:	f000 fecf 	bl	800a9ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f848 	bl	8009ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c14:	4b06      	ldr	r3, [pc, #24]	@ (8009c30 <prvCheckTasksWaitingTermination+0x58>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e1      	bne.n	8009be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c1c:	bf00      	nop
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	200030cc 	.word	0x200030cc
 8009c2c:	200030f8 	.word	0x200030f8
 8009c30:	200030e0 	.word	0x200030e0

08009c34 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009c40:	e005      	b.n	8009c4e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3301      	adds	r3, #1
 8009c46:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2ba5      	cmp	r3, #165	@ 0xa5
 8009c54:	d0f5      	beq.n	8009c42 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	089b      	lsrs	r3, r3, #2
 8009c5a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	b29b      	uxth	r3, r3
	}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr
	...

08009c6c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <uxTaskGetStackHighWaterMark+0x14>
 8009c7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <uxTaskGetStackHighWaterMark+0x34>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	e000      	b.n	8009c82 <uxTaskGetStackHighWaterMark+0x16>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c88:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f7ff ffd2 	bl	8009c34 <prvTaskCheckFreeStackSpace>
 8009c90:	4603      	mov	r3, r0
 8009c92:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009c94:	68fb      	ldr	r3, [r7, #12]
	}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20002c24 	.word	0x20002c24

08009ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3358      	adds	r3, #88	@ 0x58
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f9cd 	bl	800b050 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 f80b 	bl	800ace0 <vPortFree>
				vPortFree( pxTCB );
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 f808 	bl	800ace0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cd0:	e019      	b.n	8009d06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d103      	bne.n	8009ce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 ffff 	bl	800ace0 <vPortFree>
	}
 8009ce2:	e010      	b.n	8009d06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d00b      	beq.n	8009d06 <prvDeleteTCB+0x62>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	60fb      	str	r3, [r7, #12]
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	e7fd      	b.n	8009d02 <prvDeleteTCB+0x5e>
	}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d16:	4b0e      	ldr	r3, [pc, #56]	@ (8009d50 <prvResetNextTaskUnblockTime+0x40>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <prvResetNextTaskUnblockTime+0x14>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e000      	b.n	8009d26 <prvResetNextTaskUnblockTime+0x16>
 8009d24:	2300      	movs	r3, #0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <prvResetNextTaskUnblockTime+0x44>)
 8009d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d32:	e008      	b.n	8009d46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d34:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <prvResetNextTaskUnblockTime+0x40>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4a04      	ldr	r2, [pc, #16]	@ (8009d54 <prvResetNextTaskUnblockTime+0x44>)
 8009d44:	6013      	str	r3, [r2, #0]
}
 8009d46:	bf00      	nop
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bc80      	pop	{r7}
 8009d4e:	4770      	bx	lr
 8009d50:	200030b0 	.word	0x200030b0
 8009d54:	20003118 	.word	0x20003118

08009d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d8c <xTaskGetSchedulerState+0x34>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d66:	2301      	movs	r3, #1
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	e008      	b.n	8009d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d6c:	4b08      	ldr	r3, [pc, #32]	@ (8009d90 <xTaskGetSchedulerState+0x38>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d74:	2302      	movs	r3, #2
 8009d76:	607b      	str	r3, [r7, #4]
 8009d78:	e001      	b.n	8009d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d7e:	687b      	ldr	r3, [r7, #4]
	}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20003104 	.word	0x20003104
 8009d90:	20003120 	.word	0x20003120

08009d94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d056      	beq.n	8009e58 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dae:	4b2d      	ldr	r3, [pc, #180]	@ (8009e64 <xTaskPriorityInherit+0xd0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d246      	bcs.n	8009e46 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	db06      	blt.n	8009dce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dc0:	4b28      	ldr	r3, [pc, #160]	@ (8009e64 <xTaskPriorityInherit+0xd0>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	6959      	ldr	r1, [r3, #20]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a22      	ldr	r2, [pc, #136]	@ (8009e68 <xTaskPriorityInherit+0xd4>)
 8009de0:	4413      	add	r3, r2
 8009de2:	4299      	cmp	r1, r3
 8009de4:	d101      	bne.n	8009dea <xTaskPriorityInherit+0x56>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <xTaskPriorityInherit+0x58>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d022      	beq.n	8009e36 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe f8a5 	bl	8007f44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8009e64 <xTaskPriorityInherit+0xd0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e08:	4b18      	ldr	r3, [pc, #96]	@ (8009e6c <xTaskPriorityInherit+0xd8>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d903      	bls.n	8009e18 <xTaskPriorityInherit+0x84>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e14:	4a15      	ldr	r2, [pc, #84]	@ (8009e6c <xTaskPriorityInherit+0xd8>)
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4a10      	ldr	r2, [pc, #64]	@ (8009e68 <xTaskPriorityInherit+0xd4>)
 8009e26:	441a      	add	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f7fe f82d 	bl	8007e8e <vListInsertEnd>
 8009e34:	e004      	b.n	8009e40 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e36:	4b0b      	ldr	r3, [pc, #44]	@ (8009e64 <xTaskPriorityInherit+0xd0>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e40:	2301      	movs	r3, #1
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e008      	b.n	8009e58 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e4a:	4b06      	ldr	r3, [pc, #24]	@ (8009e64 <xTaskPriorityInherit+0xd0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d201      	bcs.n	8009e58 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e58:	68fb      	ldr	r3, [r7, #12]
	}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20002c24 	.word	0x20002c24
 8009e68:	20002c28 	.word	0x20002c28
 8009e6c:	20003100 	.word	0x20003100

08009e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d058      	beq.n	8009f38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e86:	4b2f      	ldr	r3, [pc, #188]	@ (8009f44 <xTaskPriorityDisinherit+0xd4>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d00b      	beq.n	8009ea8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60fb      	str	r3, [r7, #12]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10b      	bne.n	8009ec8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60bb      	str	r3, [r7, #8]
}
 8009ec2:	bf00      	nop
 8009ec4:	bf00      	nop
 8009ec6:	e7fd      	b.n	8009ec4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ecc:	1e5a      	subs	r2, r3, #1
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d02c      	beq.n	8009f38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d128      	bne.n	8009f38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe f82a 	bl	8007f44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f08:	4b0f      	ldr	r3, [pc, #60]	@ (8009f48 <xTaskPriorityDisinherit+0xd8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d903      	bls.n	8009f18 <xTaskPriorityDisinherit+0xa8>
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f14:	4a0c      	ldr	r2, [pc, #48]	@ (8009f48 <xTaskPriorityDisinherit+0xd8>)
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4a09      	ldr	r2, [pc, #36]	@ (8009f4c <xTaskPriorityDisinherit+0xdc>)
 8009f26:	441a      	add	r2, r3
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fd ffad 	bl	8007e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f34:	2301      	movs	r3, #1
 8009f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f38:	697b      	ldr	r3, [r7, #20]
	}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20002c24 	.word	0x20002c24
 8009f48:	20003100 	.word	0x20003100
 8009f4c:	20002c28 	.word	0x20002c28

08009f50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d071      	beq.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10b      	bne.n	8009f88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	60fb      	str	r3, [r7, #12]
}
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
 8009f86:	e7fd      	b.n	8009f84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d902      	bls.n	8009f98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	e002      	b.n	8009f9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	69fa      	ldr	r2, [r7, #28]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d051      	beq.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d14c      	bne.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009fb2:	4b28      	ldr	r3, [pc, #160]	@ (800a054 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d10b      	bne.n	8009fd4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	60bb      	str	r3, [r7, #8]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	db04      	blt.n	8009ff2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	6959      	ldr	r1, [r3, #20]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4a15      	ldr	r2, [pc, #84]	@ (800a058 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a002:	4413      	add	r3, r2
 800a004:	4299      	cmp	r1, r3
 800a006:	d101      	bne.n	800a00c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800a008:	2301      	movs	r3, #1
 800a00a:	e000      	b.n	800a00e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800a00c:	2300      	movs	r3, #0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d01c      	beq.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	3304      	adds	r3, #4
 800a016:	4618      	mov	r0, r3
 800a018:	f7fd ff94 	bl	8007f44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a020:	4b0e      	ldr	r3, [pc, #56]	@ (800a05c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d903      	bls.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	4a0b      	ldr	r2, [pc, #44]	@ (800a05c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4a06      	ldr	r2, [pc, #24]	@ (800a058 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a03e:	441a      	add	r2, r3
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	3304      	adds	r3, #4
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f7fd ff21 	bl	8007e8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a04c:	bf00      	nop
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20002c24 	.word	0x20002c24
 800a058:	20002c28 	.word	0x20002c28
 800a05c:	20003100 	.word	0x20003100

0800a060 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a064:	4b07      	ldr	r3, [pc, #28]	@ (800a084 <pvTaskIncrementMutexHeldCount+0x24>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d004      	beq.n	800a076 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a06c:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <pvTaskIncrementMutexHeldCount+0x24>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a072:	3201      	adds	r2, #1
 800a074:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a076:	4b03      	ldr	r3, [pc, #12]	@ (800a084 <pvTaskIncrementMutexHeldCount+0x24>)
 800a078:	681b      	ldr	r3, [r3, #0]
	}
 800a07a:	4618      	mov	r0, r3
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20002c24 	.word	0x20002c24

0800a088 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a092:	4b21      	ldr	r3, [pc, #132]	@ (800a118 <prvAddCurrentTaskToDelayedList+0x90>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a098:	4b20      	ldr	r3, [pc, #128]	@ (800a11c <prvAddCurrentTaskToDelayedList+0x94>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fd ff50 	bl	8007f44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0aa:	d10a      	bne.n	800a0c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a11c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4819      	ldr	r0, [pc, #100]	@ (800a120 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0bc:	f7fd fee7 	bl	8007e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0c0:	e026      	b.n	800a110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ca:	4b14      	ldr	r3, [pc, #80]	@ (800a11c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d209      	bcs.n	800a0ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0da:	4b12      	ldr	r3, [pc, #72]	@ (800a124 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b0f      	ldr	r3, [pc, #60]	@ (800a11c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7fd fef4 	bl	8007ed4 <vListInsert>
}
 800a0ec:	e010      	b.n	800a110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fd feea 	bl	8007ed4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a100:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	429a      	cmp	r2, r3
 800a108:	d202      	bcs.n	800a110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a10a:	4a08      	ldr	r2, [pc, #32]	@ (800a12c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	6013      	str	r3, [r2, #0]
}
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	200030fc 	.word	0x200030fc
 800a11c:	20002c24 	.word	0x20002c24
 800a120:	200030e4 	.word	0x200030e4
 800a124:	200030b4 	.word	0x200030b4
 800a128:	200030b0 	.word	0x200030b0
 800a12c:	20003118 	.word	0x20003118

0800a130 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a13a:	f000 fad9 	bl	800a6f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a13e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b4 <xTimerCreateTimerTask+0x84>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d021      	beq.n	800a18a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a146:	2300      	movs	r3, #0
 800a148:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a14e:	1d3a      	adds	r2, r7, #4
 800a150:	f107 0108 	add.w	r1, r7, #8
 800a154:	f107 030c 	add.w	r3, r7, #12
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd fe53 	bl	8007e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	9202      	str	r2, [sp, #8]
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	2302      	movs	r3, #2
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	2300      	movs	r3, #0
 800a16e:	460a      	mov	r2, r1
 800a170:	4911      	ldr	r1, [pc, #68]	@ (800a1b8 <xTimerCreateTimerTask+0x88>)
 800a172:	4812      	ldr	r0, [pc, #72]	@ (800a1bc <xTimerCreateTimerTask+0x8c>)
 800a174:	f7fe ff3a 	bl	8008fec <xTaskCreateStatic>
 800a178:	4603      	mov	r3, r0
 800a17a:	4a11      	ldr	r2, [pc, #68]	@ (800a1c0 <xTimerCreateTimerTask+0x90>)
 800a17c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a17e:	4b10      	ldr	r3, [pc, #64]	@ (800a1c0 <xTimerCreateTimerTask+0x90>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a186:	2301      	movs	r3, #1
 800a188:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10b      	bne.n	800a1a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a1a8:	697b      	ldr	r3, [r7, #20]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20003154 	.word	0x20003154
 800a1b8:	0800cca8 	.word	0x0800cca8
 800a1bc:	0800a2e5 	.word	0x0800a2e5
 800a1c0:	20003158 	.word	0x20003158

0800a1c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	@ 0x28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10b      	bne.n	800a1f4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	623b      	str	r3, [r7, #32]
}
 800a1ee:	bf00      	nop
 800a1f0:	bf00      	nop
 800a1f2:	e7fd      	b.n	800a1f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1f4:	4b19      	ldr	r3, [pc, #100]	@ (800a25c <xTimerGenericCommand+0x98>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d02a      	beq.n	800a252 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2b05      	cmp	r3, #5
 800a20c:	dc18      	bgt.n	800a240 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a20e:	f7ff fda3 	bl	8009d58 <xTaskGetSchedulerState>
 800a212:	4603      	mov	r3, r0
 800a214:	2b02      	cmp	r3, #2
 800a216:	d109      	bne.n	800a22c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a218:	4b10      	ldr	r3, [pc, #64]	@ (800a25c <xTimerGenericCommand+0x98>)
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	f107 0110 	add.w	r1, r7, #16
 800a220:	2300      	movs	r3, #0
 800a222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a224:	f7fe f86e 	bl	8008304 <xQueueGenericSend>
 800a228:	6278      	str	r0, [r7, #36]	@ 0x24
 800a22a:	e012      	b.n	800a252 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a22c:	4b0b      	ldr	r3, [pc, #44]	@ (800a25c <xTimerGenericCommand+0x98>)
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	f107 0110 	add.w	r1, r7, #16
 800a234:	2300      	movs	r3, #0
 800a236:	2200      	movs	r2, #0
 800a238:	f7fe f864 	bl	8008304 <xQueueGenericSend>
 800a23c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a23e:	e008      	b.n	800a252 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a240:	4b06      	ldr	r3, [pc, #24]	@ (800a25c <xTimerGenericCommand+0x98>)
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	f107 0110 	add.w	r1, r7, #16
 800a248:	2300      	movs	r3, #0
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	f7fe f95c 	bl	8008508 <xQueueGenericSendFromISR>
 800a250:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a254:	4618      	mov	r0, r3
 800a256:	3728      	adds	r7, #40	@ 0x28
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20003154 	.word	0x20003154

0800a260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a26a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2e0 <prvProcessExpiredTimer+0x80>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	3304      	adds	r3, #4
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fd fe63 	bl	8007f44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d123      	bne.n	800a2ce <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	699a      	ldr	r2, [r3, #24]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	18d1      	adds	r1, r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	6978      	ldr	r0, [r7, #20]
 800a294:	f000 f8cc 	bl	800a430 <prvInsertTimerInActiveList>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d017      	beq.n	800a2ce <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6978      	ldr	r0, [r7, #20]
 800a2aa:	f7ff ff8b 	bl	800a1c4 <xTimerGenericCommand>
 800a2ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	60fb      	str	r3, [r7, #12]
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	e7fd      	b.n	800a2ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	4798      	blx	r3
}
 800a2d6:	bf00      	nop
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	2000314c 	.word	0x2000314c

0800a2e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f859 	bl	800a3a8 <prvGetNextExpireTime>
 800a2f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f805 	bl	800a30c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a302:	f000 f8d7 	bl	800a4b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a306:	bf00      	nop
 800a308:	e7f0      	b.n	800a2ec <prvTimerTask+0x8>
	...

0800a30c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a316:	f7ff f8c5 	bl	80094a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f866 	bl	800a3f0 <prvSampleTimeNow>
 800a324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d130      	bne.n	800a38e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <prvProcessTimerOrBlockTask+0x3c>
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	429a      	cmp	r2, r3
 800a338:	d806      	bhi.n	800a348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a33a:	f7ff f8c1 	bl	80094c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff ff8d 	bl	800a260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a346:	e024      	b.n	800a392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d008      	beq.n	800a360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a34e:	4b13      	ldr	r3, [pc, #76]	@ (800a39c <prvProcessTimerOrBlockTask+0x90>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	bf0c      	ite	eq
 800a358:	2301      	moveq	r3, #1
 800a35a:	2300      	movne	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a360:	4b0f      	ldr	r3, [pc, #60]	@ (800a3a0 <prvProcessTimerOrBlockTask+0x94>)
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4619      	mov	r1, r3
 800a36e:	f7fe fe09 	bl	8008f84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a372:	f7ff f8a5 	bl	80094c0 <xTaskResumeAll>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a37c:	4b09      	ldr	r3, [pc, #36]	@ (800a3a4 <prvProcessTimerOrBlockTask+0x98>)
 800a37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	f3bf 8f6f 	isb	sy
}
 800a38c:	e001      	b.n	800a392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a38e:	f7ff f897 	bl	80094c0 <xTaskResumeAll>
}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20003150 	.word	0x20003150
 800a3a0:	20003154 	.word	0x20003154
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a3ec <prvGetNextExpireTime+0x44>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bf0c      	ite	eq
 800a3ba:	2301      	moveq	r3, #1
 800a3bc:	2300      	movne	r3, #0
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3ce:	4b07      	ldr	r3, [pc, #28]	@ (800a3ec <prvGetNextExpireTime+0x44>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	e001      	b.n	800a3de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3de:	68fb      	ldr	r3, [r7, #12]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bc80      	pop	{r7}
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2000314c 	.word	0x2000314c

0800a3f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3f8:	f7ff f900 	bl	80095fc <xTaskGetTickCount>
 800a3fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a42c <prvSampleTimeNow+0x3c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	429a      	cmp	r2, r3
 800a406:	d205      	bcs.n	800a414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a408:	f000 f910 	bl	800a62c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	e002      	b.n	800a41a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a41a:	4a04      	ldr	r2, [pc, #16]	@ (800a42c <prvSampleTimeNow+0x3c>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a420:	68fb      	ldr	r3, [r7, #12]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	2000315c 	.word	0x2000315c

0800a430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d812      	bhi.n	800a47c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	1ad2      	subs	r2, r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	429a      	cmp	r2, r3
 800a462:	d302      	bcc.n	800a46a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a464:	2301      	movs	r3, #1
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e01b      	b.n	800a4a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a46a:	4b10      	ldr	r3, [pc, #64]	@ (800a4ac <prvInsertTimerInActiveList+0x7c>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7fd fd2d 	bl	8007ed4 <vListInsert>
 800a47a:	e012      	b.n	800a4a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	d206      	bcs.n	800a492 <prvInsertTimerInActiveList+0x62>
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d302      	bcc.n	800a492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	617b      	str	r3, [r7, #20]
 800a490:	e007      	b.n	800a4a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a492:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <prvInsertTimerInActiveList+0x80>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3304      	adds	r3, #4
 800a49a:	4619      	mov	r1, r3
 800a49c:	4610      	mov	r0, r2
 800a49e:	f7fd fd19 	bl	8007ed4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4a2:	697b      	ldr	r3, [r7, #20]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20003150 	.word	0x20003150
 800a4b0:	2000314c 	.word	0x2000314c

0800a4b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	@ 0x38
 800a4b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4ba:	e0a5      	b.n	800a608 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da19      	bge.n	800a4f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4c2:	1d3b      	adds	r3, r7, #4
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10b      	bne.n	800a4e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61fb      	str	r3, [r7, #28]
}
 800a4e0:	bf00      	nop
 800a4e2:	bf00      	nop
 800a4e4:	e7fd      	b.n	800a4e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ec:	6850      	ldr	r0, [r2, #4]
 800a4ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4f0:	6892      	ldr	r2, [r2, #8]
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f2c0 8085 	blt.w	800a608 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d004      	beq.n	800a514 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	3304      	adds	r3, #4
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fd fd18 	bl	8007f44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a514:	463b      	mov	r3, r7
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff ff6a 	bl	800a3f0 <prvSampleTimeNow>
 800a51c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b09      	cmp	r3, #9
 800a522:	d86c      	bhi.n	800a5fe <prvProcessReceivedCommands+0x14a>
 800a524:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <prvProcessReceivedCommands+0x78>)
 800a526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52a:	bf00      	nop
 800a52c:	0800a555 	.word	0x0800a555
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a555 	.word	0x0800a555
 800a538:	0800a5ff 	.word	0x0800a5ff
 800a53c:	0800a5b3 	.word	0x0800a5b3
 800a540:	0800a5ed 	.word	0x0800a5ed
 800a544:	0800a555 	.word	0x0800a555
 800a548:	0800a555 	.word	0x0800a555
 800a54c:	0800a5ff 	.word	0x0800a5ff
 800a550:	0800a5b3 	.word	0x0800a5b3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	18d1      	adds	r1, r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a562:	f7ff ff65 	bl	800a430 <prvInsertTimerInActiveList>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d04a      	beq.n	800a602 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a572:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d142      	bne.n	800a602 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	441a      	add	r2, r3
 800a584:	2300      	movs	r3, #0
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	2100      	movs	r1, #0
 800a58c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a58e:	f7ff fe19 	bl	800a1c4 <xTimerGenericCommand>
 800a592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d133      	bne.n	800a602 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	61bb      	str	r3, [r7, #24]
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10b      	bne.n	800a5d8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	617b      	str	r3, [r7, #20]
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	699a      	ldr	r2, [r3, #24]
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	18d1      	adds	r1, r2, r3
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e6:	f7ff ff23 	bl	800a430 <prvInsertTimerInActiveList>
					break;
 800a5ea:	e00d      	b.n	800a608 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d107      	bne.n	800a606 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f8:	f000 fb72 	bl	800ace0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5fc:	e003      	b.n	800a606 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800a5fe:	bf00      	nop
 800a600:	e002      	b.n	800a608 <prvProcessReceivedCommands+0x154>
					break;
 800a602:	bf00      	nop
 800a604:	e000      	b.n	800a608 <prvProcessReceivedCommands+0x154>
					break;
 800a606:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a608:	4b07      	ldr	r3, [pc, #28]	@ (800a628 <prvProcessReceivedCommands+0x174>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	1d39      	adds	r1, r7, #4
 800a60e:	2200      	movs	r2, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe f8a5 	bl	8008760 <xQueueReceive>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f47f af4f 	bne.w	800a4bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a61e:	bf00      	nop
 800a620:	bf00      	nop
 800a622:	3730      	adds	r7, #48	@ 0x30
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20003154 	.word	0x20003154

0800a62c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a632:	e046      	b.n	800a6c2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a634:	4b2c      	ldr	r3, [pc, #176]	@ (800a6e8 <prvSwitchTimerLists+0xbc>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a63e:	4b2a      	ldr	r3, [pc, #168]	@ (800a6e8 <prvSwitchTimerLists+0xbc>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3304      	adds	r3, #4
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fd fc79 	bl	8007f44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d12f      	bne.n	800a6c2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	4413      	add	r3, r2
 800a66a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	429a      	cmp	r2, r3
 800a672:	d90e      	bls.n	800a692 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a680:	4b19      	ldr	r3, [pc, #100]	@ (800a6e8 <prvSwitchTimerLists+0xbc>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3304      	adds	r3, #4
 800a688:	4619      	mov	r1, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f7fd fc22 	bl	8007ed4 <vListInsert>
 800a690:	e017      	b.n	800a6c2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a692:	2300      	movs	r3, #0
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	2300      	movs	r3, #0
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	2100      	movs	r1, #0
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fd91 	bl	800a1c4 <xTimerGenericCommand>
 800a6a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10b      	bne.n	800a6c2 <prvSwitchTimerLists+0x96>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	603b      	str	r3, [r7, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	e7fd      	b.n	800a6be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6c2:	4b09      	ldr	r3, [pc, #36]	@ (800a6e8 <prvSwitchTimerLists+0xbc>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1b3      	bne.n	800a634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6cc:	4b06      	ldr	r3, [pc, #24]	@ (800a6e8 <prvSwitchTimerLists+0xbc>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6d2:	4b06      	ldr	r3, [pc, #24]	@ (800a6ec <prvSwitchTimerLists+0xc0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a04      	ldr	r2, [pc, #16]	@ (800a6e8 <prvSwitchTimerLists+0xbc>)
 800a6d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6da:	4a04      	ldr	r2, [pc, #16]	@ (800a6ec <prvSwitchTimerLists+0xc0>)
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	6013      	str	r3, [r2, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	2000314c 	.word	0x2000314c
 800a6ec:	20003150 	.word	0x20003150

0800a6f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6f6:	f000 f929 	bl	800a94c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6fa:	4b15      	ldr	r3, [pc, #84]	@ (800a750 <prvCheckForValidListAndQueue+0x60>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d120      	bne.n	800a744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a702:	4814      	ldr	r0, [pc, #80]	@ (800a754 <prvCheckForValidListAndQueue+0x64>)
 800a704:	f7fd fb98 	bl	8007e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a708:	4813      	ldr	r0, [pc, #76]	@ (800a758 <prvCheckForValidListAndQueue+0x68>)
 800a70a:	f7fd fb95 	bl	8007e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a70e:	4b13      	ldr	r3, [pc, #76]	@ (800a75c <prvCheckForValidListAndQueue+0x6c>)
 800a710:	4a10      	ldr	r2, [pc, #64]	@ (800a754 <prvCheckForValidListAndQueue+0x64>)
 800a712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a714:	4b12      	ldr	r3, [pc, #72]	@ (800a760 <prvCheckForValidListAndQueue+0x70>)
 800a716:	4a10      	ldr	r2, [pc, #64]	@ (800a758 <prvCheckForValidListAndQueue+0x68>)
 800a718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a71a:	2300      	movs	r3, #0
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4b11      	ldr	r3, [pc, #68]	@ (800a764 <prvCheckForValidListAndQueue+0x74>)
 800a720:	4a11      	ldr	r2, [pc, #68]	@ (800a768 <prvCheckForValidListAndQueue+0x78>)
 800a722:	2110      	movs	r1, #16
 800a724:	200a      	movs	r0, #10
 800a726:	f7fd fca1 	bl	800806c <xQueueGenericCreateStatic>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4a08      	ldr	r2, [pc, #32]	@ (800a750 <prvCheckForValidListAndQueue+0x60>)
 800a72e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a730:	4b07      	ldr	r3, [pc, #28]	@ (800a750 <prvCheckForValidListAndQueue+0x60>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a738:	4b05      	ldr	r3, [pc, #20]	@ (800a750 <prvCheckForValidListAndQueue+0x60>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	490b      	ldr	r1, [pc, #44]	@ (800a76c <prvCheckForValidListAndQueue+0x7c>)
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe fbce 	bl	8008ee0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a744:	f000 f932 	bl	800a9ac <vPortExitCritical>
}
 800a748:	bf00      	nop
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20003154 	.word	0x20003154
 800a754:	20003124 	.word	0x20003124
 800a758:	20003138 	.word	0x20003138
 800a75c:	2000314c 	.word	0x2000314c
 800a760:	20003150 	.word	0x20003150
 800a764:	20003200 	.word	0x20003200
 800a768:	20003160 	.word	0x20003160
 800a76c:	0800ccb0 	.word	0x0800ccb0

0800a770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3b04      	subs	r3, #4
 800a780:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3b04      	subs	r3, #4
 800a78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f023 0201 	bic.w	r2, r3, #1
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3b04      	subs	r3, #4
 800a79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7a0:	4a08      	ldr	r2, [pc, #32]	@ (800a7c4 <pxPortInitialiseStack+0x54>)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3b14      	subs	r3, #20
 800a7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3b20      	subs	r3, #32
 800a7b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bc80      	pop	{r7}
 800a7c2:	4770      	bx	lr
 800a7c4:	0800a7c9 	.word	0x0800a7c9

0800a7c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7d2:	4b12      	ldr	r3, [pc, #72]	@ (800a81c <prvTaskExitError+0x54>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d00b      	beq.n	800a7f4 <prvTaskExitError+0x2c>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	60fb      	str	r3, [r7, #12]
}
 800a7ee:	bf00      	nop
 800a7f0:	bf00      	nop
 800a7f2:	e7fd      	b.n	800a7f0 <prvTaskExitError+0x28>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60bb      	str	r3, [r7, #8]
}
 800a806:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a808:	bf00      	nop
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d0fc      	beq.n	800a80a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	2000101c 	.word	0x2000101c

0800a820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a820:	4b07      	ldr	r3, [pc, #28]	@ (800a840 <pxCurrentTCBConst2>)
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	6808      	ldr	r0, [r1, #0]
 800a826:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a82a:	f380 8809 	msr	PSP, r0
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8811 	msr	BASEPRI, r0
 800a83a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a83e:	4770      	bx	lr

0800a840 <pxCurrentTCBConst2>:
 800a840:	20002c24 	.word	0x20002c24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop

0800a848 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a848:	4806      	ldr	r0, [pc, #24]	@ (800a864 <prvPortStartFirstTask+0x1c>)
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	f380 8808 	msr	MSP, r0
 800a852:	b662      	cpsie	i
 800a854:	b661      	cpsie	f
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	df00      	svc	0
 800a860:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a862:	bf00      	nop
 800a864:	e000ed08 	.word	0xe000ed08

0800a868 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a86e:	4b32      	ldr	r3, [pc, #200]	@ (800a938 <xPortStartScheduler+0xd0>)
 800a870:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	b2db      	uxtb	r3, r3
 800a878:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	22ff      	movs	r2, #255	@ 0xff
 800a87e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a890:	b2da      	uxtb	r2, r3
 800a892:	4b2a      	ldr	r3, [pc, #168]	@ (800a93c <xPortStartScheduler+0xd4>)
 800a894:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a896:	4b2a      	ldr	r3, [pc, #168]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a898:	2207      	movs	r2, #7
 800a89a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a89c:	e009      	b.n	800a8b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a89e:	4b28      	ldr	r3, [pc, #160]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	4a26      	ldr	r2, [pc, #152]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ba:	2b80      	cmp	r3, #128	@ 0x80
 800a8bc:	d0ef      	beq.n	800a89e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8be:	4b20      	ldr	r3, [pc, #128]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f1c3 0307 	rsb	r3, r3, #7
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d00b      	beq.n	800a8e2 <xPortStartScheduler+0x7a>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	60bb      	str	r3, [r7, #8]
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	e7fd      	b.n	800a8de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8e2:	4b17      	ldr	r3, [pc, #92]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	4a15      	ldr	r2, [pc, #84]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8ec:	4b14      	ldr	r3, [pc, #80]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8f4:	4a12      	ldr	r2, [pc, #72]	@ (800a940 <xPortStartScheduler+0xd8>)
 800a8f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a900:	4b10      	ldr	r3, [pc, #64]	@ (800a944 <xPortStartScheduler+0xdc>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a0f      	ldr	r2, [pc, #60]	@ (800a944 <xPortStartScheduler+0xdc>)
 800a906:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a90a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a90c:	4b0d      	ldr	r3, [pc, #52]	@ (800a944 <xPortStartScheduler+0xdc>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0c      	ldr	r2, [pc, #48]	@ (800a944 <xPortStartScheduler+0xdc>)
 800a912:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a918:	f000 f8b8 	bl	800aa8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a91c:	4b0a      	ldr	r3, [pc, #40]	@ (800a948 <xPortStartScheduler+0xe0>)
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a922:	f7ff ff91 	bl	800a848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a926:	f7fe ff53 	bl	80097d0 <vTaskSwitchContext>
	prvTaskExitError();
 800a92a:	f7ff ff4d 	bl	800a7c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	e000e400 	.word	0xe000e400
 800a93c:	20003250 	.word	0x20003250
 800a940:	20003254 	.word	0x20003254
 800a944:	e000ed20 	.word	0xe000ed20
 800a948:	2000101c 	.word	0x2000101c

0800a94c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	607b      	str	r3, [r7, #4]
}
 800a964:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a966:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a4 <vPortEnterCritical+0x58>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3301      	adds	r3, #1
 800a96c:	4a0d      	ldr	r2, [pc, #52]	@ (800a9a4 <vPortEnterCritical+0x58>)
 800a96e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a970:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a4 <vPortEnterCritical+0x58>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d110      	bne.n	800a99a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a978:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a8 <vPortEnterCritical+0x5c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <vPortEnterCritical+0x4e>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	603b      	str	r3, [r7, #0]
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop
 800a998:	e7fd      	b.n	800a996 <vPortEnterCritical+0x4a>
	}
}
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bc80      	pop	{r7}
 800a9a2:	4770      	bx	lr
 800a9a4:	2000101c 	.word	0x2000101c
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9b2:	4b12      	ldr	r3, [pc, #72]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10b      	bne.n	800a9d2 <vPortExitCritical+0x26>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	607b      	str	r3, [r7, #4]
}
 800a9cc:	bf00      	nop
 800a9ce:	bf00      	nop
 800a9d0:	e7fd      	b.n	800a9ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	4a08      	ldr	r2, [pc, #32]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9dc:	4b07      	ldr	r3, [pc, #28]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <vPortExitCritical+0x44>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f383 8811 	msr	BASEPRI, r3
}
 800a9ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bc80      	pop	{r7}
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	2000101c 	.word	0x2000101c

0800aa00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa00:	f3ef 8009 	mrs	r0, PSP
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	4b0d      	ldr	r3, [pc, #52]	@ (800aa40 <pxCurrentTCBConst>)
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa10:	6010      	str	r0, [r2, #0]
 800aa12:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aa16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa1a:	f380 8811 	msr	BASEPRI, r0
 800aa1e:	f7fe fed7 	bl	80097d0 <vTaskSwitchContext>
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8811 	msr	BASEPRI, r0
 800aa2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	6808      	ldr	r0, [r1, #0]
 800aa32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa36:	f380 8809 	msr	PSP, r0
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	4770      	bx	lr

0800aa40 <pxCurrentTCBConst>:
 800aa40:	20002c24 	.word	0x20002c24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	607b      	str	r3, [r7, #4]
}
 800aa60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa62:	f7fe fdd9 	bl	8009618 <xTaskIncrementTick>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa6c:	4b06      	ldr	r3, [pc, #24]	@ (800aa88 <SysTick_Handler+0x40>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f383 8811 	msr	BASEPRI, r3
}
 800aa7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa90:	4b0a      	ldr	r3, [pc, #40]	@ (800aabc <vPortSetupTimerInterrupt+0x30>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa96:	4b0a      	ldr	r3, [pc, #40]	@ (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa9c:	4b09      	ldr	r3, [pc, #36]	@ (800aac4 <vPortSetupTimerInterrupt+0x38>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a09      	ldr	r2, [pc, #36]	@ (800aac8 <vPortSetupTimerInterrupt+0x3c>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	4a08      	ldr	r2, [pc, #32]	@ (800aacc <vPortSetupTimerInterrupt+0x40>)
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaae:	4b03      	ldr	r3, [pc, #12]	@ (800aabc <vPortSetupTimerInterrupt+0x30>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bc80      	pop	{r7}
 800aaba:	4770      	bx	lr
 800aabc:	e000e010 	.word	0xe000e010
 800aac0:	e000e018 	.word	0xe000e018
 800aac4:	20001010 	.word	0x20001010
 800aac8:	10624dd3 	.word	0x10624dd3
 800aacc:	e000e014 	.word	0xe000e014

0800aad0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aad6:	f3ef 8305 	mrs	r3, IPSR
 800aada:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b0f      	cmp	r3, #15
 800aae0:	d915      	bls.n	800ab0e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aae2:	4a17      	ldr	r2, [pc, #92]	@ (800ab40 <vPortValidateInterruptPriority+0x70>)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aaec:	4b15      	ldr	r3, [pc, #84]	@ (800ab44 <vPortValidateInterruptPriority+0x74>)
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	7afa      	ldrb	r2, [r7, #11]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d20b      	bcs.n	800ab0e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	607b      	str	r3, [r7, #4]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <vPortValidateInterruptPriority+0x78>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab16:	4b0d      	ldr	r3, [pc, #52]	@ (800ab4c <vPortValidateInterruptPriority+0x7c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d90b      	bls.n	800ab36 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	603b      	str	r3, [r7, #0]
}
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	e7fd      	b.n	800ab32 <vPortValidateInterruptPriority+0x62>
	}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bc80      	pop	{r7}
 800ab3e:	4770      	bx	lr
 800ab40:	e000e3f0 	.word	0xe000e3f0
 800ab44:	20003250 	.word	0x20003250
 800ab48:	e000ed0c 	.word	0xe000ed0c
 800ab4c:	20003254 	.word	0x20003254

0800ab50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08a      	sub	sp, #40	@ 0x28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab5c:	f7fe fca2 	bl	80094a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab60:	4b5a      	ldr	r3, [pc, #360]	@ (800accc <pvPortMalloc+0x17c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab68:	f000 f920 	bl	800adac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab6c:	4b58      	ldr	r3, [pc, #352]	@ (800acd0 <pvPortMalloc+0x180>)
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4013      	ands	r3, r2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 8090 	bne.w	800ac9a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01e      	beq.n	800abbe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab80:	2208      	movs	r2, #8
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4413      	add	r3, r2
 800ab86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d015      	beq.n	800abbe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f023 0307 	bic.w	r3, r3, #7
 800ab98:	3308      	adds	r3, #8
 800ab9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f003 0307 	and.w	r3, r3, #7
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <pvPortMalloc+0x6e>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	617b      	str	r3, [r7, #20]
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	e7fd      	b.n	800abba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d06a      	beq.n	800ac9a <pvPortMalloc+0x14a>
 800abc4:	4b43      	ldr	r3, [pc, #268]	@ (800acd4 <pvPortMalloc+0x184>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d865      	bhi.n	800ac9a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abce:	4b42      	ldr	r3, [pc, #264]	@ (800acd8 <pvPortMalloc+0x188>)
 800abd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abd2:	4b41      	ldr	r3, [pc, #260]	@ (800acd8 <pvPortMalloc+0x188>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abd8:	e004      	b.n	800abe4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	429a      	cmp	r2, r3
 800abec:	d903      	bls.n	800abf6 <pvPortMalloc+0xa6>
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1f1      	bne.n	800abda <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abf6:	4b35      	ldr	r3, [pc, #212]	@ (800accc <pvPortMalloc+0x17c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d04c      	beq.n	800ac9a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2208      	movs	r2, #8
 800ac06:	4413      	add	r3, r2
 800ac08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	1ad2      	subs	r2, r2, r3
 800ac1a:	2308      	movs	r3, #8
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d920      	bls.n	800ac64 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4413      	add	r3, r2
 800ac28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	f003 0307 	and.w	r3, r3, #7
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <pvPortMalloc+0xfc>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	613b      	str	r3, [r7, #16]
}
 800ac46:	bf00      	nop
 800ac48:	bf00      	nop
 800ac4a:	e7fd      	b.n	800ac48 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	1ad2      	subs	r2, r2, r3
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac5e:	69b8      	ldr	r0, [r7, #24]
 800ac60:	f000 f906 	bl	800ae70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac64:	4b1b      	ldr	r3, [pc, #108]	@ (800acd4 <pvPortMalloc+0x184>)
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	4a19      	ldr	r2, [pc, #100]	@ (800acd4 <pvPortMalloc+0x184>)
 800ac70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac72:	4b18      	ldr	r3, [pc, #96]	@ (800acd4 <pvPortMalloc+0x184>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	4b19      	ldr	r3, [pc, #100]	@ (800acdc <pvPortMalloc+0x18c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d203      	bcs.n	800ac86 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac7e:	4b15      	ldr	r3, [pc, #84]	@ (800acd4 <pvPortMalloc+0x184>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a16      	ldr	r2, [pc, #88]	@ (800acdc <pvPortMalloc+0x18c>)
 800ac84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	4b11      	ldr	r3, [pc, #68]	@ (800acd0 <pvPortMalloc+0x180>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac9a:	f7fe fc11 	bl	80094c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	f003 0307 	and.w	r3, r3, #7
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <pvPortMalloc+0x170>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60fb      	str	r3, [r7, #12]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <pvPortMalloc+0x16c>
	return pvReturn;
 800acc0:	69fb      	ldr	r3, [r7, #28]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3728      	adds	r7, #40	@ 0x28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20003fdc 	.word	0x20003fdc
 800acd0:	20003fe8 	.word	0x20003fe8
 800acd4:	20003fe0 	.word	0x20003fe0
 800acd8:	20003fd4 	.word	0x20003fd4
 800acdc:	20003fe4 	.word	0x20003fe4

0800ace0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d04a      	beq.n	800ad88 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acf2:	2308      	movs	r3, #8
 800acf4:	425b      	negs	r3, r3
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4413      	add	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	4b22      	ldr	r3, [pc, #136]	@ (800ad90 <vPortFree+0xb0>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <vPortFree+0x46>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <vPortFree+0x66>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60bb      	str	r3, [r7, #8]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	4b11      	ldr	r3, [pc, #68]	@ (800ad90 <vPortFree+0xb0>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d019      	beq.n	800ad88 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d115      	bne.n	800ad88 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b0b      	ldr	r3, [pc, #44]	@ (800ad90 <vPortFree+0xb0>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	43db      	mvns	r3, r3
 800ad66:	401a      	ands	r2, r3
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad6c:	f7fe fb9a 	bl	80094a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	4b07      	ldr	r3, [pc, #28]	@ (800ad94 <vPortFree+0xb4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4413      	add	r3, r2
 800ad7a:	4a06      	ldr	r2, [pc, #24]	@ (800ad94 <vPortFree+0xb4>)
 800ad7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad7e:	6938      	ldr	r0, [r7, #16]
 800ad80:	f000 f876 	bl	800ae70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad84:	f7fe fb9c 	bl	80094c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad88:	bf00      	nop
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20003fe8 	.word	0x20003fe8
 800ad94:	20003fe0 	.word	0x20003fe0

0800ad98 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800ad9c:	4b02      	ldr	r3, [pc, #8]	@ (800ada8 <xPortGetFreeHeapSize+0x10>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr
 800ada8:	20003fe0 	.word	0x20003fe0

0800adac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adb2:	f640 537a 	movw	r3, #3450	@ 0xd7a
 800adb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adb8:	4b27      	ldr	r3, [pc, #156]	@ (800ae58 <prvHeapInit+0xac>)
 800adba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00c      	beq.n	800ade0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3307      	adds	r3, #7
 800adca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 0307 	bic.w	r3, r3, #7
 800add2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	4a1f      	ldr	r2, [pc, #124]	@ (800ae58 <prvHeapInit+0xac>)
 800addc:	4413      	add	r3, r2
 800adde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ade4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae5c <prvHeapInit+0xb0>)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adea:	4b1c      	ldr	r3, [pc, #112]	@ (800ae5c <prvHeapInit+0xb0>)
 800adec:	2200      	movs	r2, #0
 800adee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	4413      	add	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adf8:	2208      	movs	r2, #8
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1a9b      	subs	r3, r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f023 0307 	bic.w	r3, r3, #7
 800ae06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4a15      	ldr	r2, [pc, #84]	@ (800ae60 <prvHeapInit+0xb4>)
 800ae0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae0e:	4b14      	ldr	r3, [pc, #80]	@ (800ae60 <prvHeapInit+0xb4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2200      	movs	r2, #0
 800ae14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae16:	4b12      	ldr	r3, [pc, #72]	@ (800ae60 <prvHeapInit+0xb4>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	1ad2      	subs	r2, r2, r3
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <prvHeapInit+0xb4>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	4a0a      	ldr	r2, [pc, #40]	@ (800ae64 <prvHeapInit+0xb8>)
 800ae3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	4a09      	ldr	r2, [pc, #36]	@ (800ae68 <prvHeapInit+0xbc>)
 800ae42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae44:	4b09      	ldr	r3, [pc, #36]	@ (800ae6c <prvHeapInit+0xc0>)
 800ae46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae4a:	601a      	str	r2, [r3, #0]
}
 800ae4c:	bf00      	nop
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bc80      	pop	{r7}
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	20003258 	.word	0x20003258
 800ae5c:	20003fd4 	.word	0x20003fd4
 800ae60:	20003fdc 	.word	0x20003fdc
 800ae64:	20003fe4 	.word	0x20003fe4
 800ae68:	20003fe0 	.word	0x20003fe0
 800ae6c:	20003fe8 	.word	0x20003fe8

0800ae70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae78:	4b27      	ldr	r3, [pc, #156]	@ (800af18 <prvInsertBlockIntoFreeList+0xa8>)
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	e002      	b.n	800ae84 <prvInsertBlockIntoFreeList+0x14>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d8f7      	bhi.n	800ae7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d108      	bne.n	800aeb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	441a      	add	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	441a      	add	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d118      	bne.n	800aef8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	4b14      	ldr	r3, [pc, #80]	@ (800af1c <prvInsertBlockIntoFreeList+0xac>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d00d      	beq.n	800aeee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	441a      	add	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	e008      	b.n	800af00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aeee:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <prvInsertBlockIntoFreeList+0xac>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	e003      	b.n	800af00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d002      	beq.n	800af0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	bc80      	pop	{r7}
 800af16:	4770      	bx	lr
 800af18:	20003fd4 	.word	0x20003fd4
 800af1c:	20003fdc 	.word	0x20003fdc

0800af20 <__itoa>:
 800af20:	1e93      	subs	r3, r2, #2
 800af22:	2b22      	cmp	r3, #34	@ 0x22
 800af24:	b510      	push	{r4, lr}
 800af26:	460c      	mov	r4, r1
 800af28:	d904      	bls.n	800af34 <__itoa+0x14>
 800af2a:	2300      	movs	r3, #0
 800af2c:	461c      	mov	r4, r3
 800af2e:	700b      	strb	r3, [r1, #0]
 800af30:	4620      	mov	r0, r4
 800af32:	bd10      	pop	{r4, pc}
 800af34:	2a0a      	cmp	r2, #10
 800af36:	d109      	bne.n	800af4c <__itoa+0x2c>
 800af38:	2800      	cmp	r0, #0
 800af3a:	da07      	bge.n	800af4c <__itoa+0x2c>
 800af3c:	232d      	movs	r3, #45	@ 0x2d
 800af3e:	700b      	strb	r3, [r1, #0]
 800af40:	2101      	movs	r1, #1
 800af42:	4240      	negs	r0, r0
 800af44:	4421      	add	r1, r4
 800af46:	f000 f805 	bl	800af54 <__utoa>
 800af4a:	e7f1      	b.n	800af30 <__itoa+0x10>
 800af4c:	2100      	movs	r1, #0
 800af4e:	e7f9      	b.n	800af44 <__itoa+0x24>

0800af50 <itoa>:
 800af50:	f7ff bfe6 	b.w	800af20 <__itoa>

0800af54 <__utoa>:
 800af54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af56:	b08b      	sub	sp, #44	@ 0x2c
 800af58:	4605      	mov	r5, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	466e      	mov	r6, sp
 800af5e:	4c1d      	ldr	r4, [pc, #116]	@ (800afd4 <__utoa+0x80>)
 800af60:	f104 0c20 	add.w	ip, r4, #32
 800af64:	4637      	mov	r7, r6
 800af66:	6820      	ldr	r0, [r4, #0]
 800af68:	6861      	ldr	r1, [r4, #4]
 800af6a:	3408      	adds	r4, #8
 800af6c:	c703      	stmia	r7!, {r0, r1}
 800af6e:	4564      	cmp	r4, ip
 800af70:	463e      	mov	r6, r7
 800af72:	d1f7      	bne.n	800af64 <__utoa+0x10>
 800af74:	7921      	ldrb	r1, [r4, #4]
 800af76:	6820      	ldr	r0, [r4, #0]
 800af78:	7139      	strb	r1, [r7, #4]
 800af7a:	1e91      	subs	r1, r2, #2
 800af7c:	2922      	cmp	r1, #34	@ 0x22
 800af7e:	6038      	str	r0, [r7, #0]
 800af80:	f04f 0100 	mov.w	r1, #0
 800af84:	d904      	bls.n	800af90 <__utoa+0x3c>
 800af86:	7019      	strb	r1, [r3, #0]
 800af88:	460b      	mov	r3, r1
 800af8a:	4618      	mov	r0, r3
 800af8c:	b00b      	add	sp, #44	@ 0x2c
 800af8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af90:	1e58      	subs	r0, r3, #1
 800af92:	4684      	mov	ip, r0
 800af94:	fbb5 f7f2 	udiv	r7, r5, r2
 800af98:	fb02 5617 	mls	r6, r2, r7, r5
 800af9c:	3628      	adds	r6, #40	@ 0x28
 800af9e:	446e      	add	r6, sp
 800afa0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800afa4:	460c      	mov	r4, r1
 800afa6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800afaa:	462e      	mov	r6, r5
 800afac:	42b2      	cmp	r2, r6
 800afae:	463d      	mov	r5, r7
 800afb0:	f101 0101 	add.w	r1, r1, #1
 800afb4:	d9ee      	bls.n	800af94 <__utoa+0x40>
 800afb6:	2200      	movs	r2, #0
 800afb8:	545a      	strb	r2, [r3, r1]
 800afba:	1919      	adds	r1, r3, r4
 800afbc:	1aa5      	subs	r5, r4, r2
 800afbe:	42aa      	cmp	r2, r5
 800afc0:	dae3      	bge.n	800af8a <__utoa+0x36>
 800afc2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800afc6:	780e      	ldrb	r6, [r1, #0]
 800afc8:	3201      	adds	r2, #1
 800afca:	7006      	strb	r6, [r0, #0]
 800afcc:	f801 5901 	strb.w	r5, [r1], #-1
 800afd0:	e7f4      	b.n	800afbc <__utoa+0x68>
 800afd2:	bf00      	nop
 800afd4:	0800d4de 	.word	0x0800d4de

0800afd8 <sniprintf>:
 800afd8:	b40c      	push	{r2, r3}
 800afda:	b530      	push	{r4, r5, lr}
 800afdc:	4b17      	ldr	r3, [pc, #92]	@ (800b03c <sniprintf+0x64>)
 800afde:	1e0c      	subs	r4, r1, #0
 800afe0:	681d      	ldr	r5, [r3, #0]
 800afe2:	b09d      	sub	sp, #116	@ 0x74
 800afe4:	da08      	bge.n	800aff8 <sniprintf+0x20>
 800afe6:	238b      	movs	r3, #139	@ 0x8b
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	b01d      	add	sp, #116	@ 0x74
 800aff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aff4:	b002      	add	sp, #8
 800aff6:	4770      	bx	lr
 800aff8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800affc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b000:	bf0c      	ite	eq
 800b002:	4623      	moveq	r3, r4
 800b004:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	9307      	str	r3, [sp, #28]
 800b00c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b010:	9002      	str	r0, [sp, #8]
 800b012:	9006      	str	r0, [sp, #24]
 800b014:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b018:	4628      	mov	r0, r5
 800b01a:	ab21      	add	r3, sp, #132	@ 0x84
 800b01c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b01e:	a902      	add	r1, sp, #8
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	f000 f9f7 	bl	800b414 <_svfiprintf_r>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	bfbc      	itt	lt
 800b02a:	238b      	movlt	r3, #139	@ 0x8b
 800b02c:	602b      	strlt	r3, [r5, #0]
 800b02e:	2c00      	cmp	r4, #0
 800b030:	d0dd      	beq.n	800afee <sniprintf+0x16>
 800b032:	2200      	movs	r2, #0
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	701a      	strb	r2, [r3, #0]
 800b038:	e7d9      	b.n	800afee <sniprintf+0x16>
 800b03a:	bf00      	nop
 800b03c:	20001020 	.word	0x20001020

0800b040 <memset>:
 800b040:	4603      	mov	r3, r0
 800b042:	4402      	add	r2, r0
 800b044:	4293      	cmp	r3, r2
 800b046:	d100      	bne.n	800b04a <memset+0xa>
 800b048:	4770      	bx	lr
 800b04a:	f803 1b01 	strb.w	r1, [r3], #1
 800b04e:	e7f9      	b.n	800b044 <memset+0x4>

0800b050 <_reclaim_reent>:
 800b050:	4b29      	ldr	r3, [pc, #164]	@ (800b0f8 <_reclaim_reent+0xa8>)
 800b052:	b570      	push	{r4, r5, r6, lr}
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4604      	mov	r4, r0
 800b058:	4283      	cmp	r3, r0
 800b05a:	d04b      	beq.n	800b0f4 <_reclaim_reent+0xa4>
 800b05c:	69c3      	ldr	r3, [r0, #28]
 800b05e:	b1ab      	cbz	r3, 800b08c <_reclaim_reent+0x3c>
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	b16b      	cbz	r3, 800b080 <_reclaim_reent+0x30>
 800b064:	2500      	movs	r5, #0
 800b066:	69e3      	ldr	r3, [r4, #28]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	5959      	ldr	r1, [r3, r5]
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d13b      	bne.n	800b0e8 <_reclaim_reent+0x98>
 800b070:	3504      	adds	r5, #4
 800b072:	2d80      	cmp	r5, #128	@ 0x80
 800b074:	d1f7      	bne.n	800b066 <_reclaim_reent+0x16>
 800b076:	69e3      	ldr	r3, [r4, #28]
 800b078:	4620      	mov	r0, r4
 800b07a:	68d9      	ldr	r1, [r3, #12]
 800b07c:	f000 f878 	bl	800b170 <_free_r>
 800b080:	69e3      	ldr	r3, [r4, #28]
 800b082:	6819      	ldr	r1, [r3, #0]
 800b084:	b111      	cbz	r1, 800b08c <_reclaim_reent+0x3c>
 800b086:	4620      	mov	r0, r4
 800b088:	f000 f872 	bl	800b170 <_free_r>
 800b08c:	6961      	ldr	r1, [r4, #20]
 800b08e:	b111      	cbz	r1, 800b096 <_reclaim_reent+0x46>
 800b090:	4620      	mov	r0, r4
 800b092:	f000 f86d 	bl	800b170 <_free_r>
 800b096:	69e1      	ldr	r1, [r4, #28]
 800b098:	b111      	cbz	r1, 800b0a0 <_reclaim_reent+0x50>
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 f868 	bl	800b170 <_free_r>
 800b0a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b0a2:	b111      	cbz	r1, 800b0aa <_reclaim_reent+0x5a>
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 f863 	bl	800b170 <_free_r>
 800b0aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ac:	b111      	cbz	r1, 800b0b4 <_reclaim_reent+0x64>
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f85e 	bl	800b170 <_free_r>
 800b0b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b0b6:	b111      	cbz	r1, 800b0be <_reclaim_reent+0x6e>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 f859 	bl	800b170 <_free_r>
 800b0be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b0c0:	b111      	cbz	r1, 800b0c8 <_reclaim_reent+0x78>
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 f854 	bl	800b170 <_free_r>
 800b0c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b0ca:	b111      	cbz	r1, 800b0d2 <_reclaim_reent+0x82>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 f84f 	bl	800b170 <_free_r>
 800b0d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b0d4:	b111      	cbz	r1, 800b0dc <_reclaim_reent+0x8c>
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 f84a 	bl	800b170 <_free_r>
 800b0dc:	6a23      	ldr	r3, [r4, #32]
 800b0de:	b14b      	cbz	r3, 800b0f4 <_reclaim_reent+0xa4>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0e6:	4718      	bx	r3
 800b0e8:	680e      	ldr	r6, [r1, #0]
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 f840 	bl	800b170 <_free_r>
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	e7bb      	b.n	800b06c <_reclaim_reent+0x1c>
 800b0f4:	bd70      	pop	{r4, r5, r6, pc}
 800b0f6:	bf00      	nop
 800b0f8:	20001020 	.word	0x20001020

0800b0fc <__errno>:
 800b0fc:	4b01      	ldr	r3, [pc, #4]	@ (800b104 <__errno+0x8>)
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20001020 	.word	0x20001020

0800b108 <__libc_init_array>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	2600      	movs	r6, #0
 800b10c:	4d0c      	ldr	r5, [pc, #48]	@ (800b140 <__libc_init_array+0x38>)
 800b10e:	4c0d      	ldr	r4, [pc, #52]	@ (800b144 <__libc_init_array+0x3c>)
 800b110:	1b64      	subs	r4, r4, r5
 800b112:	10a4      	asrs	r4, r4, #2
 800b114:	42a6      	cmp	r6, r4
 800b116:	d109      	bne.n	800b12c <__libc_init_array+0x24>
 800b118:	f001 fd4a 	bl	800cbb0 <_init>
 800b11c:	2600      	movs	r6, #0
 800b11e:	4d0a      	ldr	r5, [pc, #40]	@ (800b148 <__libc_init_array+0x40>)
 800b120:	4c0a      	ldr	r4, [pc, #40]	@ (800b14c <__libc_init_array+0x44>)
 800b122:	1b64      	subs	r4, r4, r5
 800b124:	10a4      	asrs	r4, r4, #2
 800b126:	42a6      	cmp	r6, r4
 800b128:	d105      	bne.n	800b136 <__libc_init_array+0x2e>
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b130:	4798      	blx	r3
 800b132:	3601      	adds	r6, #1
 800b134:	e7ee      	b.n	800b114 <__libc_init_array+0xc>
 800b136:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13a:	4798      	blx	r3
 800b13c:	3601      	adds	r6, #1
 800b13e:	e7f2      	b.n	800b126 <__libc_init_array+0x1e>
 800b140:	0800d718 	.word	0x0800d718
 800b144:	0800d718 	.word	0x0800d718
 800b148:	0800d718 	.word	0x0800d718
 800b14c:	0800d71c 	.word	0x0800d71c

0800b150 <__retarget_lock_acquire_recursive>:
 800b150:	4770      	bx	lr

0800b152 <__retarget_lock_release_recursive>:
 800b152:	4770      	bx	lr

0800b154 <memcpy>:
 800b154:	440a      	add	r2, r1
 800b156:	4291      	cmp	r1, r2
 800b158:	f100 33ff 	add.w	r3, r0, #4294967295
 800b15c:	d100      	bne.n	800b160 <memcpy+0xc>
 800b15e:	4770      	bx	lr
 800b160:	b510      	push	{r4, lr}
 800b162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b166:	4291      	cmp	r1, r2
 800b168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b16c:	d1f9      	bne.n	800b162 <memcpy+0xe>
 800b16e:	bd10      	pop	{r4, pc}

0800b170 <_free_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4605      	mov	r5, r0
 800b174:	2900      	cmp	r1, #0
 800b176:	d040      	beq.n	800b1fa <_free_r+0x8a>
 800b178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b17c:	1f0c      	subs	r4, r1, #4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bfb8      	it	lt
 800b182:	18e4      	addlt	r4, r4, r3
 800b184:	f000 f8de 	bl	800b344 <__malloc_lock>
 800b188:	4a1c      	ldr	r2, [pc, #112]	@ (800b1fc <_free_r+0x8c>)
 800b18a:	6813      	ldr	r3, [r2, #0]
 800b18c:	b933      	cbnz	r3, 800b19c <_free_r+0x2c>
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	6014      	str	r4, [r2, #0]
 800b192:	4628      	mov	r0, r5
 800b194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b198:	f000 b8da 	b.w	800b350 <__malloc_unlock>
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d908      	bls.n	800b1b2 <_free_r+0x42>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	1821      	adds	r1, r4, r0
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6819      	ldreq	r1, [r3, #0]
 800b1aa:	685b      	ldreq	r3, [r3, #4]
 800b1ac:	1809      	addeq	r1, r1, r0
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	e7ed      	b.n	800b18e <_free_r+0x1e>
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	b10b      	cbz	r3, 800b1bc <_free_r+0x4c>
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	d9fa      	bls.n	800b1b2 <_free_r+0x42>
 800b1bc:	6811      	ldr	r1, [r2, #0]
 800b1be:	1850      	adds	r0, r2, r1
 800b1c0:	42a0      	cmp	r0, r4
 800b1c2:	d10b      	bne.n	800b1dc <_free_r+0x6c>
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	4401      	add	r1, r0
 800b1c8:	1850      	adds	r0, r2, r1
 800b1ca:	4283      	cmp	r3, r0
 800b1cc:	6011      	str	r1, [r2, #0]
 800b1ce:	d1e0      	bne.n	800b192 <_free_r+0x22>
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	4408      	add	r0, r1
 800b1d6:	6010      	str	r0, [r2, #0]
 800b1d8:	6053      	str	r3, [r2, #4]
 800b1da:	e7da      	b.n	800b192 <_free_r+0x22>
 800b1dc:	d902      	bls.n	800b1e4 <_free_r+0x74>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	e7d6      	b.n	800b192 <_free_r+0x22>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	1821      	adds	r1, r4, r0
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	bf01      	itttt	eq
 800b1ec:	6819      	ldreq	r1, [r3, #0]
 800b1ee:	685b      	ldreq	r3, [r3, #4]
 800b1f0:	1809      	addeq	r1, r1, r0
 800b1f2:	6021      	streq	r1, [r4, #0]
 800b1f4:	6063      	str	r3, [r4, #4]
 800b1f6:	6054      	str	r4, [r2, #4]
 800b1f8:	e7cb      	b.n	800b192 <_free_r+0x22>
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	20004130 	.word	0x20004130

0800b200 <sbrk_aligned>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4e0f      	ldr	r6, [pc, #60]	@ (800b240 <sbrk_aligned+0x40>)
 800b204:	460c      	mov	r4, r1
 800b206:	6831      	ldr	r1, [r6, #0]
 800b208:	4605      	mov	r5, r0
 800b20a:	b911      	cbnz	r1, 800b212 <sbrk_aligned+0x12>
 800b20c:	f000 fbaa 	bl	800b964 <_sbrk_r>
 800b210:	6030      	str	r0, [r6, #0]
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f000 fba5 	bl	800b964 <_sbrk_r>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d103      	bne.n	800b226 <sbrk_aligned+0x26>
 800b21e:	f04f 34ff 	mov.w	r4, #4294967295
 800b222:	4620      	mov	r0, r4
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	1cc4      	adds	r4, r0, #3
 800b228:	f024 0403 	bic.w	r4, r4, #3
 800b22c:	42a0      	cmp	r0, r4
 800b22e:	d0f8      	beq.n	800b222 <sbrk_aligned+0x22>
 800b230:	1a21      	subs	r1, r4, r0
 800b232:	4628      	mov	r0, r5
 800b234:	f000 fb96 	bl	800b964 <_sbrk_r>
 800b238:	3001      	adds	r0, #1
 800b23a:	d1f2      	bne.n	800b222 <sbrk_aligned+0x22>
 800b23c:	e7ef      	b.n	800b21e <sbrk_aligned+0x1e>
 800b23e:	bf00      	nop
 800b240:	2000412c 	.word	0x2000412c

0800b244 <_malloc_r>:
 800b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b248:	1ccd      	adds	r5, r1, #3
 800b24a:	f025 0503 	bic.w	r5, r5, #3
 800b24e:	3508      	adds	r5, #8
 800b250:	2d0c      	cmp	r5, #12
 800b252:	bf38      	it	cc
 800b254:	250c      	movcc	r5, #12
 800b256:	2d00      	cmp	r5, #0
 800b258:	4606      	mov	r6, r0
 800b25a:	db01      	blt.n	800b260 <_malloc_r+0x1c>
 800b25c:	42a9      	cmp	r1, r5
 800b25e:	d904      	bls.n	800b26a <_malloc_r+0x26>
 800b260:	230c      	movs	r3, #12
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	2000      	movs	r0, #0
 800b266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b340 <_malloc_r+0xfc>
 800b26e:	f000 f869 	bl	800b344 <__malloc_lock>
 800b272:	f8d8 3000 	ldr.w	r3, [r8]
 800b276:	461c      	mov	r4, r3
 800b278:	bb44      	cbnz	r4, 800b2cc <_malloc_r+0x88>
 800b27a:	4629      	mov	r1, r5
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff ffbf 	bl	800b200 <sbrk_aligned>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	4604      	mov	r4, r0
 800b286:	d158      	bne.n	800b33a <_malloc_r+0xf6>
 800b288:	f8d8 4000 	ldr.w	r4, [r8]
 800b28c:	4627      	mov	r7, r4
 800b28e:	2f00      	cmp	r7, #0
 800b290:	d143      	bne.n	800b31a <_malloc_r+0xd6>
 800b292:	2c00      	cmp	r4, #0
 800b294:	d04b      	beq.n	800b32e <_malloc_r+0xea>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	4639      	mov	r1, r7
 800b29a:	4630      	mov	r0, r6
 800b29c:	eb04 0903 	add.w	r9, r4, r3
 800b2a0:	f000 fb60 	bl	800b964 <_sbrk_r>
 800b2a4:	4581      	cmp	r9, r0
 800b2a6:	d142      	bne.n	800b32e <_malloc_r+0xea>
 800b2a8:	6821      	ldr	r1, [r4, #0]
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	1a6d      	subs	r5, r5, r1
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7ff ffa6 	bl	800b200 <sbrk_aligned>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d03a      	beq.n	800b32e <_malloc_r+0xea>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	442b      	add	r3, r5
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	bb62      	cbnz	r2, 800b320 <_malloc_r+0xdc>
 800b2c6:	f8c8 7000 	str.w	r7, [r8]
 800b2ca:	e00f      	b.n	800b2ec <_malloc_r+0xa8>
 800b2cc:	6822      	ldr	r2, [r4, #0]
 800b2ce:	1b52      	subs	r2, r2, r5
 800b2d0:	d420      	bmi.n	800b314 <_malloc_r+0xd0>
 800b2d2:	2a0b      	cmp	r2, #11
 800b2d4:	d917      	bls.n	800b306 <_malloc_r+0xc2>
 800b2d6:	1961      	adds	r1, r4, r5
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	6025      	str	r5, [r4, #0]
 800b2dc:	bf18      	it	ne
 800b2de:	6059      	strne	r1, [r3, #4]
 800b2e0:	6863      	ldr	r3, [r4, #4]
 800b2e2:	bf08      	it	eq
 800b2e4:	f8c8 1000 	streq.w	r1, [r8]
 800b2e8:	5162      	str	r2, [r4, r5]
 800b2ea:	604b      	str	r3, [r1, #4]
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f82f 	bl	800b350 <__malloc_unlock>
 800b2f2:	f104 000b 	add.w	r0, r4, #11
 800b2f6:	1d23      	adds	r3, r4, #4
 800b2f8:	f020 0007 	bic.w	r0, r0, #7
 800b2fc:	1ac2      	subs	r2, r0, r3
 800b2fe:	bf1c      	itt	ne
 800b300:	1a1b      	subne	r3, r3, r0
 800b302:	50a3      	strne	r3, [r4, r2]
 800b304:	e7af      	b.n	800b266 <_malloc_r+0x22>
 800b306:	6862      	ldr	r2, [r4, #4]
 800b308:	42a3      	cmp	r3, r4
 800b30a:	bf0c      	ite	eq
 800b30c:	f8c8 2000 	streq.w	r2, [r8]
 800b310:	605a      	strne	r2, [r3, #4]
 800b312:	e7eb      	b.n	800b2ec <_malloc_r+0xa8>
 800b314:	4623      	mov	r3, r4
 800b316:	6864      	ldr	r4, [r4, #4]
 800b318:	e7ae      	b.n	800b278 <_malloc_r+0x34>
 800b31a:	463c      	mov	r4, r7
 800b31c:	687f      	ldr	r7, [r7, #4]
 800b31e:	e7b6      	b.n	800b28e <_malloc_r+0x4a>
 800b320:	461a      	mov	r2, r3
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	42a3      	cmp	r3, r4
 800b326:	d1fb      	bne.n	800b320 <_malloc_r+0xdc>
 800b328:	2300      	movs	r3, #0
 800b32a:	6053      	str	r3, [r2, #4]
 800b32c:	e7de      	b.n	800b2ec <_malloc_r+0xa8>
 800b32e:	230c      	movs	r3, #12
 800b330:	4630      	mov	r0, r6
 800b332:	6033      	str	r3, [r6, #0]
 800b334:	f000 f80c 	bl	800b350 <__malloc_unlock>
 800b338:	e794      	b.n	800b264 <_malloc_r+0x20>
 800b33a:	6005      	str	r5, [r0, #0]
 800b33c:	e7d6      	b.n	800b2ec <_malloc_r+0xa8>
 800b33e:	bf00      	nop
 800b340:	20004130 	.word	0x20004130

0800b344 <__malloc_lock>:
 800b344:	4801      	ldr	r0, [pc, #4]	@ (800b34c <__malloc_lock+0x8>)
 800b346:	f7ff bf03 	b.w	800b150 <__retarget_lock_acquire_recursive>
 800b34a:	bf00      	nop
 800b34c:	20004128 	.word	0x20004128

0800b350 <__malloc_unlock>:
 800b350:	4801      	ldr	r0, [pc, #4]	@ (800b358 <__malloc_unlock+0x8>)
 800b352:	f7ff befe 	b.w	800b152 <__retarget_lock_release_recursive>
 800b356:	bf00      	nop
 800b358:	20004128 	.word	0x20004128

0800b35c <__ssputs_r>:
 800b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	461f      	mov	r7, r3
 800b362:	688e      	ldr	r6, [r1, #8]
 800b364:	4682      	mov	sl, r0
 800b366:	42be      	cmp	r6, r7
 800b368:	460c      	mov	r4, r1
 800b36a:	4690      	mov	r8, r2
 800b36c:	680b      	ldr	r3, [r1, #0]
 800b36e:	d82d      	bhi.n	800b3cc <__ssputs_r+0x70>
 800b370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b378:	d026      	beq.n	800b3c8 <__ssputs_r+0x6c>
 800b37a:	6965      	ldr	r5, [r4, #20]
 800b37c:	6909      	ldr	r1, [r1, #16]
 800b37e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b382:	eba3 0901 	sub.w	r9, r3, r1
 800b386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b38a:	1c7b      	adds	r3, r7, #1
 800b38c:	444b      	add	r3, r9
 800b38e:	106d      	asrs	r5, r5, #1
 800b390:	429d      	cmp	r5, r3
 800b392:	bf38      	it	cc
 800b394:	461d      	movcc	r5, r3
 800b396:	0553      	lsls	r3, r2, #21
 800b398:	d527      	bpl.n	800b3ea <__ssputs_r+0x8e>
 800b39a:	4629      	mov	r1, r5
 800b39c:	f7ff ff52 	bl	800b244 <_malloc_r>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	b360      	cbz	r0, 800b3fe <__ssputs_r+0xa2>
 800b3a4:	464a      	mov	r2, r9
 800b3a6:	6921      	ldr	r1, [r4, #16]
 800b3a8:	f7ff fed4 	bl	800b154 <memcpy>
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	6126      	str	r6, [r4, #16]
 800b3ba:	444e      	add	r6, r9
 800b3bc:	6026      	str	r6, [r4, #0]
 800b3be:	463e      	mov	r6, r7
 800b3c0:	6165      	str	r5, [r4, #20]
 800b3c2:	eba5 0509 	sub.w	r5, r5, r9
 800b3c6:	60a5      	str	r5, [r4, #8]
 800b3c8:	42be      	cmp	r6, r7
 800b3ca:	d900      	bls.n	800b3ce <__ssputs_r+0x72>
 800b3cc:	463e      	mov	r6, r7
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	f000 faac 	bl	800b930 <memmove>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	1b9b      	subs	r3, r3, r6
 800b3de:	60a3      	str	r3, [r4, #8]
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	4433      	add	r3, r6
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	f000 fad8 	bl	800b9a0 <_realloc_r>
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d1e0      	bne.n	800b3b8 <__ssputs_r+0x5c>
 800b3f6:	4650      	mov	r0, sl
 800b3f8:	6921      	ldr	r1, [r4, #16]
 800b3fa:	f7ff feb9 	bl	800b170 <_free_r>
 800b3fe:	230c      	movs	r3, #12
 800b400:	f8ca 3000 	str.w	r3, [sl]
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f04f 30ff 	mov.w	r0, #4294967295
 800b40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	e7e9      	b.n	800b3e6 <__ssputs_r+0x8a>
	...

0800b414 <_svfiprintf_r>:
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	4698      	mov	r8, r3
 800b41a:	898b      	ldrh	r3, [r1, #12]
 800b41c:	4607      	mov	r7, r0
 800b41e:	061b      	lsls	r3, r3, #24
 800b420:	460d      	mov	r5, r1
 800b422:	4614      	mov	r4, r2
 800b424:	b09d      	sub	sp, #116	@ 0x74
 800b426:	d510      	bpl.n	800b44a <_svfiprintf_r+0x36>
 800b428:	690b      	ldr	r3, [r1, #16]
 800b42a:	b973      	cbnz	r3, 800b44a <_svfiprintf_r+0x36>
 800b42c:	2140      	movs	r1, #64	@ 0x40
 800b42e:	f7ff ff09 	bl	800b244 <_malloc_r>
 800b432:	6028      	str	r0, [r5, #0]
 800b434:	6128      	str	r0, [r5, #16]
 800b436:	b930      	cbnz	r0, 800b446 <_svfiprintf_r+0x32>
 800b438:	230c      	movs	r3, #12
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	b01d      	add	sp, #116	@ 0x74
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	2340      	movs	r3, #64	@ 0x40
 800b448:	616b      	str	r3, [r5, #20]
 800b44a:	2300      	movs	r3, #0
 800b44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44e:	2320      	movs	r3, #32
 800b450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b454:	2330      	movs	r3, #48	@ 0x30
 800b456:	f04f 0901 	mov.w	r9, #1
 800b45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b5f8 <_svfiprintf_r+0x1e4>
 800b462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b466:	4623      	mov	r3, r4
 800b468:	469a      	mov	sl, r3
 800b46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46e:	b10a      	cbz	r2, 800b474 <_svfiprintf_r+0x60>
 800b470:	2a25      	cmp	r2, #37	@ 0x25
 800b472:	d1f9      	bne.n	800b468 <_svfiprintf_r+0x54>
 800b474:	ebba 0b04 	subs.w	fp, sl, r4
 800b478:	d00b      	beq.n	800b492 <_svfiprintf_r+0x7e>
 800b47a:	465b      	mov	r3, fp
 800b47c:	4622      	mov	r2, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ff6b 	bl	800b35c <__ssputs_r>
 800b486:	3001      	adds	r0, #1
 800b488:	f000 80a7 	beq.w	800b5da <_svfiprintf_r+0x1c6>
 800b48c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b48e:	445a      	add	r2, fp
 800b490:	9209      	str	r2, [sp, #36]	@ 0x24
 800b492:	f89a 3000 	ldrb.w	r3, [sl]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 809f 	beq.w	800b5da <_svfiprintf_r+0x1c6>
 800b49c:	2300      	movs	r3, #0
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a6:	f10a 0a01 	add.w	sl, sl, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	9307      	str	r3, [sp, #28]
 800b4ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4b4:	4654      	mov	r4, sl
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4bc:	484e      	ldr	r0, [pc, #312]	@ (800b5f8 <_svfiprintf_r+0x1e4>)
 800b4be:	f000 fa61 	bl	800b984 <memchr>
 800b4c2:	9a04      	ldr	r2, [sp, #16]
 800b4c4:	b9d8      	cbnz	r0, 800b4fe <_svfiprintf_r+0xea>
 800b4c6:	06d0      	lsls	r0, r2, #27
 800b4c8:	bf44      	itt	mi
 800b4ca:	2320      	movmi	r3, #32
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d0:	0711      	lsls	r1, r2, #28
 800b4d2:	bf44      	itt	mi
 800b4d4:	232b      	movmi	r3, #43	@ 0x2b
 800b4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4da:	f89a 3000 	ldrb.w	r3, [sl]
 800b4de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e0:	d015      	beq.n	800b50e <_svfiprintf_r+0xfa>
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f04f 0c0a 	mov.w	ip, #10
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f2:	3b30      	subs	r3, #48	@ 0x30
 800b4f4:	2b09      	cmp	r3, #9
 800b4f6:	d94b      	bls.n	800b590 <_svfiprintf_r+0x17c>
 800b4f8:	b1b0      	cbz	r0, 800b528 <_svfiprintf_r+0x114>
 800b4fa:	9207      	str	r2, [sp, #28]
 800b4fc:	e014      	b.n	800b528 <_svfiprintf_r+0x114>
 800b4fe:	eba0 0308 	sub.w	r3, r0, r8
 800b502:	fa09 f303 	lsl.w	r3, r9, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	46a2      	mov	sl, r4
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	e7d2      	b.n	800b4b4 <_svfiprintf_r+0xa0>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	1d19      	adds	r1, r3, #4
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	9103      	str	r1, [sp, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	bfbb      	ittet	lt
 800b51a:	425b      	neglt	r3, r3
 800b51c:	f042 0202 	orrlt.w	r2, r2, #2
 800b520:	9307      	strge	r3, [sp, #28]
 800b522:	9307      	strlt	r3, [sp, #28]
 800b524:	bfb8      	it	lt
 800b526:	9204      	strlt	r2, [sp, #16]
 800b528:	7823      	ldrb	r3, [r4, #0]
 800b52a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b52c:	d10a      	bne.n	800b544 <_svfiprintf_r+0x130>
 800b52e:	7863      	ldrb	r3, [r4, #1]
 800b530:	2b2a      	cmp	r3, #42	@ 0x2a
 800b532:	d132      	bne.n	800b59a <_svfiprintf_r+0x186>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	3402      	adds	r4, #2
 800b538:	1d1a      	adds	r2, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9203      	str	r2, [sp, #12]
 800b53e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b5fc <_svfiprintf_r+0x1e8>
 800b548:	2203      	movs	r2, #3
 800b54a:	4650      	mov	r0, sl
 800b54c:	7821      	ldrb	r1, [r4, #0]
 800b54e:	f000 fa19 	bl	800b984 <memchr>
 800b552:	b138      	cbz	r0, 800b564 <_svfiprintf_r+0x150>
 800b554:	2240      	movs	r2, #64	@ 0x40
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	eba0 000a 	sub.w	r0, r0, sl
 800b55c:	4082      	lsls	r2, r0
 800b55e:	4313      	orrs	r3, r2
 800b560:	3401      	adds	r4, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b568:	2206      	movs	r2, #6
 800b56a:	4825      	ldr	r0, [pc, #148]	@ (800b600 <_svfiprintf_r+0x1ec>)
 800b56c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b570:	f000 fa08 	bl	800b984 <memchr>
 800b574:	2800      	cmp	r0, #0
 800b576:	d036      	beq.n	800b5e6 <_svfiprintf_r+0x1d2>
 800b578:	4b22      	ldr	r3, [pc, #136]	@ (800b604 <_svfiprintf_r+0x1f0>)
 800b57a:	bb1b      	cbnz	r3, 800b5c4 <_svfiprintf_r+0x1b0>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	3307      	adds	r3, #7
 800b580:	f023 0307 	bic.w	r3, r3, #7
 800b584:	3308      	adds	r3, #8
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58a:	4433      	add	r3, r6
 800b58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b58e:	e76a      	b.n	800b466 <_svfiprintf_r+0x52>
 800b590:	460c      	mov	r4, r1
 800b592:	2001      	movs	r0, #1
 800b594:	fb0c 3202 	mla	r2, ip, r2, r3
 800b598:	e7a8      	b.n	800b4ec <_svfiprintf_r+0xd8>
 800b59a:	2300      	movs	r3, #0
 800b59c:	f04f 0c0a 	mov.w	ip, #10
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	3401      	adds	r4, #1
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ac:	3a30      	subs	r2, #48	@ 0x30
 800b5ae:	2a09      	cmp	r2, #9
 800b5b0:	d903      	bls.n	800b5ba <_svfiprintf_r+0x1a6>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0c6      	beq.n	800b544 <_svfiprintf_r+0x130>
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	e7c4      	b.n	800b544 <_svfiprintf_r+0x130>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2301      	movs	r3, #1
 800b5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c2:	e7f0      	b.n	800b5a6 <_svfiprintf_r+0x192>
 800b5c4:	ab03      	add	r3, sp, #12
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b608 <_svfiprintf_r+0x1f4>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	f3af 8000 	nop.w
 800b5d4:	1c42      	adds	r2, r0, #1
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	d1d6      	bne.n	800b588 <_svfiprintf_r+0x174>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	065b      	lsls	r3, r3, #25
 800b5de:	f53f af2d 	bmi.w	800b43c <_svfiprintf_r+0x28>
 800b5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5e4:	e72c      	b.n	800b440 <_svfiprintf_r+0x2c>
 800b5e6:	ab03      	add	r3, sp, #12
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	4b06      	ldr	r3, [pc, #24]	@ (800b608 <_svfiprintf_r+0x1f4>)
 800b5f0:	a904      	add	r1, sp, #16
 800b5f2:	f000 f87d 	bl	800b6f0 <_printf_i>
 800b5f6:	e7ed      	b.n	800b5d4 <_svfiprintf_r+0x1c0>
 800b5f8:	0800d503 	.word	0x0800d503
 800b5fc:	0800d509 	.word	0x0800d509
 800b600:	0800d50d 	.word	0x0800d50d
 800b604:	00000000 	.word	0x00000000
 800b608:	0800b35d 	.word	0x0800b35d

0800b60c <_printf_common>:
 800b60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b610:	4616      	mov	r6, r2
 800b612:	4698      	mov	r8, r3
 800b614:	688a      	ldr	r2, [r1, #8]
 800b616:	690b      	ldr	r3, [r1, #16]
 800b618:	4607      	mov	r7, r0
 800b61a:	4293      	cmp	r3, r2
 800b61c:	bfb8      	it	lt
 800b61e:	4613      	movlt	r3, r2
 800b620:	6033      	str	r3, [r6, #0]
 800b622:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b626:	460c      	mov	r4, r1
 800b628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b62c:	b10a      	cbz	r2, 800b632 <_printf_common+0x26>
 800b62e:	3301      	adds	r3, #1
 800b630:	6033      	str	r3, [r6, #0]
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	0699      	lsls	r1, r3, #26
 800b636:	bf42      	ittt	mi
 800b638:	6833      	ldrmi	r3, [r6, #0]
 800b63a:	3302      	addmi	r3, #2
 800b63c:	6033      	strmi	r3, [r6, #0]
 800b63e:	6825      	ldr	r5, [r4, #0]
 800b640:	f015 0506 	ands.w	r5, r5, #6
 800b644:	d106      	bne.n	800b654 <_printf_common+0x48>
 800b646:	f104 0a19 	add.w	sl, r4, #25
 800b64a:	68e3      	ldr	r3, [r4, #12]
 800b64c:	6832      	ldr	r2, [r6, #0]
 800b64e:	1a9b      	subs	r3, r3, r2
 800b650:	42ab      	cmp	r3, r5
 800b652:	dc2b      	bgt.n	800b6ac <_printf_common+0xa0>
 800b654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b658:	6822      	ldr	r2, [r4, #0]
 800b65a:	3b00      	subs	r3, #0
 800b65c:	bf18      	it	ne
 800b65e:	2301      	movne	r3, #1
 800b660:	0692      	lsls	r2, r2, #26
 800b662:	d430      	bmi.n	800b6c6 <_printf_common+0xba>
 800b664:	4641      	mov	r1, r8
 800b666:	4638      	mov	r0, r7
 800b668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b66c:	47c8      	blx	r9
 800b66e:	3001      	adds	r0, #1
 800b670:	d023      	beq.n	800b6ba <_printf_common+0xae>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	6922      	ldr	r2, [r4, #16]
 800b676:	f003 0306 	and.w	r3, r3, #6
 800b67a:	2b04      	cmp	r3, #4
 800b67c:	bf14      	ite	ne
 800b67e:	2500      	movne	r5, #0
 800b680:	6833      	ldreq	r3, [r6, #0]
 800b682:	f04f 0600 	mov.w	r6, #0
 800b686:	bf08      	it	eq
 800b688:	68e5      	ldreq	r5, [r4, #12]
 800b68a:	f104 041a 	add.w	r4, r4, #26
 800b68e:	bf08      	it	eq
 800b690:	1aed      	subeq	r5, r5, r3
 800b692:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b696:	bf08      	it	eq
 800b698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b69c:	4293      	cmp	r3, r2
 800b69e:	bfc4      	itt	gt
 800b6a0:	1a9b      	subgt	r3, r3, r2
 800b6a2:	18ed      	addgt	r5, r5, r3
 800b6a4:	42b5      	cmp	r5, r6
 800b6a6:	d11a      	bne.n	800b6de <_printf_common+0xd2>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e008      	b.n	800b6be <_printf_common+0xb2>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4652      	mov	r2, sl
 800b6b0:	4641      	mov	r1, r8
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	47c8      	blx	r9
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	d103      	bne.n	800b6c2 <_printf_common+0xb6>
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c2:	3501      	adds	r5, #1
 800b6c4:	e7c1      	b.n	800b64a <_printf_common+0x3e>
 800b6c6:	2030      	movs	r0, #48	@ 0x30
 800b6c8:	18e1      	adds	r1, r4, r3
 800b6ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6d4:	4422      	add	r2, r4
 800b6d6:	3302      	adds	r3, #2
 800b6d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6dc:	e7c2      	b.n	800b664 <_printf_common+0x58>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	4641      	mov	r1, r8
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	47c8      	blx	r9
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d0e6      	beq.n	800b6ba <_printf_common+0xae>
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	e7d9      	b.n	800b6a4 <_printf_common+0x98>

0800b6f0 <_printf_i>:
 800b6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f4:	7e0f      	ldrb	r7, [r1, #24]
 800b6f6:	4691      	mov	r9, r2
 800b6f8:	2f78      	cmp	r7, #120	@ 0x78
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	469a      	mov	sl, r3
 800b700:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b706:	d807      	bhi.n	800b718 <_printf_i+0x28>
 800b708:	2f62      	cmp	r7, #98	@ 0x62
 800b70a:	d80a      	bhi.n	800b722 <_printf_i+0x32>
 800b70c:	2f00      	cmp	r7, #0
 800b70e:	f000 80d3 	beq.w	800b8b8 <_printf_i+0x1c8>
 800b712:	2f58      	cmp	r7, #88	@ 0x58
 800b714:	f000 80ba 	beq.w	800b88c <_printf_i+0x19c>
 800b718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b71c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b720:	e03a      	b.n	800b798 <_printf_i+0xa8>
 800b722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b726:	2b15      	cmp	r3, #21
 800b728:	d8f6      	bhi.n	800b718 <_printf_i+0x28>
 800b72a:	a101      	add	r1, pc, #4	@ (adr r1, 800b730 <_printf_i+0x40>)
 800b72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b730:	0800b789 	.word	0x0800b789
 800b734:	0800b79d 	.word	0x0800b79d
 800b738:	0800b719 	.word	0x0800b719
 800b73c:	0800b719 	.word	0x0800b719
 800b740:	0800b719 	.word	0x0800b719
 800b744:	0800b719 	.word	0x0800b719
 800b748:	0800b79d 	.word	0x0800b79d
 800b74c:	0800b719 	.word	0x0800b719
 800b750:	0800b719 	.word	0x0800b719
 800b754:	0800b719 	.word	0x0800b719
 800b758:	0800b719 	.word	0x0800b719
 800b75c:	0800b89f 	.word	0x0800b89f
 800b760:	0800b7c7 	.word	0x0800b7c7
 800b764:	0800b859 	.word	0x0800b859
 800b768:	0800b719 	.word	0x0800b719
 800b76c:	0800b719 	.word	0x0800b719
 800b770:	0800b8c1 	.word	0x0800b8c1
 800b774:	0800b719 	.word	0x0800b719
 800b778:	0800b7c7 	.word	0x0800b7c7
 800b77c:	0800b719 	.word	0x0800b719
 800b780:	0800b719 	.word	0x0800b719
 800b784:	0800b861 	.word	0x0800b861
 800b788:	6833      	ldr	r3, [r6, #0]
 800b78a:	1d1a      	adds	r2, r3, #4
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6032      	str	r2, [r6, #0]
 800b790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b798:	2301      	movs	r3, #1
 800b79a:	e09e      	b.n	800b8da <_printf_i+0x1ea>
 800b79c:	6833      	ldr	r3, [r6, #0]
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	1d19      	adds	r1, r3, #4
 800b7a2:	6031      	str	r1, [r6, #0]
 800b7a4:	0606      	lsls	r6, r0, #24
 800b7a6:	d501      	bpl.n	800b7ac <_printf_i+0xbc>
 800b7a8:	681d      	ldr	r5, [r3, #0]
 800b7aa:	e003      	b.n	800b7b4 <_printf_i+0xc4>
 800b7ac:	0645      	lsls	r5, r0, #25
 800b7ae:	d5fb      	bpl.n	800b7a8 <_printf_i+0xb8>
 800b7b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7b4:	2d00      	cmp	r5, #0
 800b7b6:	da03      	bge.n	800b7c0 <_printf_i+0xd0>
 800b7b8:	232d      	movs	r3, #45	@ 0x2d
 800b7ba:	426d      	negs	r5, r5
 800b7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c0:	230a      	movs	r3, #10
 800b7c2:	4859      	ldr	r0, [pc, #356]	@ (800b928 <_printf_i+0x238>)
 800b7c4:	e011      	b.n	800b7ea <_printf_i+0xfa>
 800b7c6:	6821      	ldr	r1, [r4, #0]
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	0608      	lsls	r0, r1, #24
 800b7cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7d0:	d402      	bmi.n	800b7d8 <_printf_i+0xe8>
 800b7d2:	0649      	lsls	r1, r1, #25
 800b7d4:	bf48      	it	mi
 800b7d6:	b2ad      	uxthmi	r5, r5
 800b7d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7da:	6033      	str	r3, [r6, #0]
 800b7dc:	bf14      	ite	ne
 800b7de:	230a      	movne	r3, #10
 800b7e0:	2308      	moveq	r3, #8
 800b7e2:	4851      	ldr	r0, [pc, #324]	@ (800b928 <_printf_i+0x238>)
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ea:	6866      	ldr	r6, [r4, #4]
 800b7ec:	2e00      	cmp	r6, #0
 800b7ee:	bfa8      	it	ge
 800b7f0:	6821      	ldrge	r1, [r4, #0]
 800b7f2:	60a6      	str	r6, [r4, #8]
 800b7f4:	bfa4      	itt	ge
 800b7f6:	f021 0104 	bicge.w	r1, r1, #4
 800b7fa:	6021      	strge	r1, [r4, #0]
 800b7fc:	b90d      	cbnz	r5, 800b802 <_printf_i+0x112>
 800b7fe:	2e00      	cmp	r6, #0
 800b800:	d04b      	beq.n	800b89a <_printf_i+0x1aa>
 800b802:	4616      	mov	r6, r2
 800b804:	fbb5 f1f3 	udiv	r1, r5, r3
 800b808:	fb03 5711 	mls	r7, r3, r1, r5
 800b80c:	5dc7      	ldrb	r7, [r0, r7]
 800b80e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b812:	462f      	mov	r7, r5
 800b814:	42bb      	cmp	r3, r7
 800b816:	460d      	mov	r5, r1
 800b818:	d9f4      	bls.n	800b804 <_printf_i+0x114>
 800b81a:	2b08      	cmp	r3, #8
 800b81c:	d10b      	bne.n	800b836 <_printf_i+0x146>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	07df      	lsls	r7, r3, #31
 800b822:	d508      	bpl.n	800b836 <_printf_i+0x146>
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	6861      	ldr	r1, [r4, #4]
 800b828:	4299      	cmp	r1, r3
 800b82a:	bfde      	ittt	le
 800b82c:	2330      	movle	r3, #48	@ 0x30
 800b82e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b832:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b836:	1b92      	subs	r2, r2, r6
 800b838:	6122      	str	r2, [r4, #16]
 800b83a:	464b      	mov	r3, r9
 800b83c:	4621      	mov	r1, r4
 800b83e:	4640      	mov	r0, r8
 800b840:	f8cd a000 	str.w	sl, [sp]
 800b844:	aa03      	add	r2, sp, #12
 800b846:	f7ff fee1 	bl	800b60c <_printf_common>
 800b84a:	3001      	adds	r0, #1
 800b84c:	d14a      	bne.n	800b8e4 <_printf_i+0x1f4>
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295
 800b852:	b004      	add	sp, #16
 800b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	f043 0320 	orr.w	r3, r3, #32
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	2778      	movs	r7, #120	@ 0x78
 800b862:	4832      	ldr	r0, [pc, #200]	@ (800b92c <_printf_i+0x23c>)
 800b864:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	6831      	ldr	r1, [r6, #0]
 800b86c:	061f      	lsls	r7, r3, #24
 800b86e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b872:	d402      	bmi.n	800b87a <_printf_i+0x18a>
 800b874:	065f      	lsls	r7, r3, #25
 800b876:	bf48      	it	mi
 800b878:	b2ad      	uxthmi	r5, r5
 800b87a:	6031      	str	r1, [r6, #0]
 800b87c:	07d9      	lsls	r1, r3, #31
 800b87e:	bf44      	itt	mi
 800b880:	f043 0320 	orrmi.w	r3, r3, #32
 800b884:	6023      	strmi	r3, [r4, #0]
 800b886:	b11d      	cbz	r5, 800b890 <_printf_i+0x1a0>
 800b888:	2310      	movs	r3, #16
 800b88a:	e7ab      	b.n	800b7e4 <_printf_i+0xf4>
 800b88c:	4826      	ldr	r0, [pc, #152]	@ (800b928 <_printf_i+0x238>)
 800b88e:	e7e9      	b.n	800b864 <_printf_i+0x174>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	f023 0320 	bic.w	r3, r3, #32
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	e7f6      	b.n	800b888 <_printf_i+0x198>
 800b89a:	4616      	mov	r6, r2
 800b89c:	e7bd      	b.n	800b81a <_printf_i+0x12a>
 800b89e:	6833      	ldr	r3, [r6, #0]
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	1d18      	adds	r0, r3, #4
 800b8a4:	6961      	ldr	r1, [r4, #20]
 800b8a6:	6030      	str	r0, [r6, #0]
 800b8a8:	062e      	lsls	r6, r5, #24
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	d501      	bpl.n	800b8b2 <_printf_i+0x1c2>
 800b8ae:	6019      	str	r1, [r3, #0]
 800b8b0:	e002      	b.n	800b8b8 <_printf_i+0x1c8>
 800b8b2:	0668      	lsls	r0, r5, #25
 800b8b4:	d5fb      	bpl.n	800b8ae <_printf_i+0x1be>
 800b8b6:	8019      	strh	r1, [r3, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4616      	mov	r6, r2
 800b8bc:	6123      	str	r3, [r4, #16]
 800b8be:	e7bc      	b.n	800b83a <_printf_i+0x14a>
 800b8c0:	6833      	ldr	r3, [r6, #0]
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	1d1a      	adds	r2, r3, #4
 800b8c6:	6032      	str	r2, [r6, #0]
 800b8c8:	681e      	ldr	r6, [r3, #0]
 800b8ca:	6862      	ldr	r2, [r4, #4]
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f000 f859 	bl	800b984 <memchr>
 800b8d2:	b108      	cbz	r0, 800b8d8 <_printf_i+0x1e8>
 800b8d4:	1b80      	subs	r0, r0, r6
 800b8d6:	6060      	str	r0, [r4, #4]
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e2:	e7aa      	b.n	800b83a <_printf_i+0x14a>
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	47d0      	blx	sl
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d0ad      	beq.n	800b84e <_printf_i+0x15e>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	079b      	lsls	r3, r3, #30
 800b8f6:	d413      	bmi.n	800b920 <_printf_i+0x230>
 800b8f8:	68e0      	ldr	r0, [r4, #12]
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	bfb8      	it	lt
 800b900:	4618      	movlt	r0, r3
 800b902:	e7a6      	b.n	800b852 <_printf_i+0x162>
 800b904:	2301      	movs	r3, #1
 800b906:	4632      	mov	r2, r6
 800b908:	4649      	mov	r1, r9
 800b90a:	4640      	mov	r0, r8
 800b90c:	47d0      	blx	sl
 800b90e:	3001      	adds	r0, #1
 800b910:	d09d      	beq.n	800b84e <_printf_i+0x15e>
 800b912:	3501      	adds	r5, #1
 800b914:	68e3      	ldr	r3, [r4, #12]
 800b916:	9903      	ldr	r1, [sp, #12]
 800b918:	1a5b      	subs	r3, r3, r1
 800b91a:	42ab      	cmp	r3, r5
 800b91c:	dcf2      	bgt.n	800b904 <_printf_i+0x214>
 800b91e:	e7eb      	b.n	800b8f8 <_printf_i+0x208>
 800b920:	2500      	movs	r5, #0
 800b922:	f104 0619 	add.w	r6, r4, #25
 800b926:	e7f5      	b.n	800b914 <_printf_i+0x224>
 800b928:	0800d514 	.word	0x0800d514
 800b92c:	0800d525 	.word	0x0800d525

0800b930 <memmove>:
 800b930:	4288      	cmp	r0, r1
 800b932:	b510      	push	{r4, lr}
 800b934:	eb01 0402 	add.w	r4, r1, r2
 800b938:	d902      	bls.n	800b940 <memmove+0x10>
 800b93a:	4284      	cmp	r4, r0
 800b93c:	4623      	mov	r3, r4
 800b93e:	d807      	bhi.n	800b950 <memmove+0x20>
 800b940:	1e43      	subs	r3, r0, #1
 800b942:	42a1      	cmp	r1, r4
 800b944:	d008      	beq.n	800b958 <memmove+0x28>
 800b946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b94e:	e7f8      	b.n	800b942 <memmove+0x12>
 800b950:	4601      	mov	r1, r0
 800b952:	4402      	add	r2, r0
 800b954:	428a      	cmp	r2, r1
 800b956:	d100      	bne.n	800b95a <memmove+0x2a>
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b962:	e7f7      	b.n	800b954 <memmove+0x24>

0800b964 <_sbrk_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	2300      	movs	r3, #0
 800b968:	4d05      	ldr	r5, [pc, #20]	@ (800b980 <_sbrk_r+0x1c>)
 800b96a:	4604      	mov	r4, r0
 800b96c:	4608      	mov	r0, r1
 800b96e:	602b      	str	r3, [r5, #0]
 800b970:	f7f8 f880 	bl	8003a74 <_sbrk>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_sbrk_r+0x1a>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_sbrk_r+0x1a>
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20004124 	.word	0x20004124

0800b984 <memchr>:
 800b984:	4603      	mov	r3, r0
 800b986:	b510      	push	{r4, lr}
 800b988:	b2c9      	uxtb	r1, r1
 800b98a:	4402      	add	r2, r0
 800b98c:	4293      	cmp	r3, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	d101      	bne.n	800b996 <memchr+0x12>
 800b992:	2000      	movs	r0, #0
 800b994:	e003      	b.n	800b99e <memchr+0x1a>
 800b996:	7804      	ldrb	r4, [r0, #0]
 800b998:	3301      	adds	r3, #1
 800b99a:	428c      	cmp	r4, r1
 800b99c:	d1f6      	bne.n	800b98c <memchr+0x8>
 800b99e:	bd10      	pop	{r4, pc}

0800b9a0 <_realloc_r>:
 800b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a4:	4680      	mov	r8, r0
 800b9a6:	4615      	mov	r5, r2
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	b921      	cbnz	r1, 800b9b6 <_realloc_r+0x16>
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b2:	f7ff bc47 	b.w	800b244 <_malloc_r>
 800b9b6:	b92a      	cbnz	r2, 800b9c4 <_realloc_r+0x24>
 800b9b8:	f7ff fbda 	bl	800b170 <_free_r>
 800b9bc:	2400      	movs	r4, #0
 800b9be:	4620      	mov	r0, r4
 800b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c4:	f000 f81a 	bl	800b9fc <_malloc_usable_size_r>
 800b9c8:	4285      	cmp	r5, r0
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	d802      	bhi.n	800b9d4 <_realloc_r+0x34>
 800b9ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9d2:	d8f4      	bhi.n	800b9be <_realloc_r+0x1e>
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	f7ff fc34 	bl	800b244 <_malloc_r>
 800b9dc:	4607      	mov	r7, r0
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d0ec      	beq.n	800b9bc <_realloc_r+0x1c>
 800b9e2:	42b5      	cmp	r5, r6
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	bf28      	it	cs
 800b9ea:	4632      	movcs	r2, r6
 800b9ec:	f7ff fbb2 	bl	800b154 <memcpy>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f7ff fbbc 	bl	800b170 <_free_r>
 800b9f8:	463c      	mov	r4, r7
 800b9fa:	e7e0      	b.n	800b9be <_realloc_r+0x1e>

0800b9fc <_malloc_usable_size_r>:
 800b9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba00:	1f18      	subs	r0, r3, #4
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	bfbc      	itt	lt
 800ba06:	580b      	ldrlt	r3, [r1, r0]
 800ba08:	18c0      	addlt	r0, r0, r3
 800ba0a:	4770      	bx	lr

0800ba0c <sqrt>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460f      	mov	r7, r1
 800ba12:	f000 f865 	bl	800bae0 <__ieee754_sqrt>
 800ba16:	4632      	mov	r2, r6
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4639      	mov	r1, r7
 800ba22:	f7f4 fff3 	bl	8000a0c <__aeabi_dcmpun>
 800ba26:	b990      	cbnz	r0, 800ba4e <sqrt+0x42>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f4 ffc4 	bl	80009bc <__aeabi_dcmplt>
 800ba34:	b158      	cbz	r0, 800ba4e <sqrt+0x42>
 800ba36:	f7ff fb61 	bl	800b0fc <__errno>
 800ba3a:	2321      	movs	r3, #33	@ 0x21
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	6003      	str	r3, [r0, #0]
 800ba40:	2300      	movs	r3, #0
 800ba42:	4610      	mov	r0, r2
 800ba44:	4619      	mov	r1, r3
 800ba46:	f7f4 fe71 	bl	800072c <__aeabi_ddiv>
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4629      	mov	r1, r5
 800ba52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba54 <sin>:
 800ba54:	b530      	push	{r4, r5, lr}
 800ba56:	4d20      	ldr	r5, [pc, #128]	@ (800bad8 <sin+0x84>)
 800ba58:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800ba5c:	42ac      	cmp	r4, r5
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	b087      	sub	sp, #28
 800ba64:	d806      	bhi.n	800ba74 <sin+0x20>
 800ba66:	2300      	movs	r3, #0
 800ba68:	2200      	movs	r2, #0
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f000 f9cf 	bl	800be10 <__kernel_sin>
 800ba72:	e004      	b.n	800ba7e <sin+0x2a>
 800ba74:	4d19      	ldr	r5, [pc, #100]	@ (800badc <sin+0x88>)
 800ba76:	42ac      	cmp	r4, r5
 800ba78:	d903      	bls.n	800ba82 <sin+0x2e>
 800ba7a:	f7f4 fb75 	bl	8000168 <__aeabi_dsub>
 800ba7e:	b007      	add	sp, #28
 800ba80:	bd30      	pop	{r4, r5, pc}
 800ba82:	aa02      	add	r2, sp, #8
 800ba84:	f000 fa7c 	bl	800bf80 <__ieee754_rem_pio2>
 800ba88:	f000 0003 	and.w	r0, r0, #3
 800ba8c:	2801      	cmp	r0, #1
 800ba8e:	d009      	beq.n	800baa4 <sin+0x50>
 800ba90:	2802      	cmp	r0, #2
 800ba92:	d00e      	beq.n	800bab2 <sin+0x5e>
 800ba94:	b9c0      	cbnz	r0, 800bac8 <sin+0x74>
 800ba96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa2:	e7e4      	b.n	800ba6e <sin+0x1a>
 800baa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baac:	f000 f8f0 	bl	800bc90 <__kernel_cos>
 800bab0:	e7e5      	b.n	800ba7e <sin+0x2a>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800babe:	f000 f9a7 	bl	800be10 <__kernel_sin>
 800bac2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800bac6:	e7da      	b.n	800ba7e <sin+0x2a>
 800bac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bad0:	f000 f8de 	bl	800bc90 <__kernel_cos>
 800bad4:	e7f5      	b.n	800bac2 <sin+0x6e>
 800bad6:	bf00      	nop
 800bad8:	3fe921fb 	.word	0x3fe921fb
 800badc:	7fefffff 	.word	0x7fefffff

0800bae0 <__ieee754_sqrt>:
 800bae0:	4a67      	ldr	r2, [pc, #412]	@ (800bc80 <__ieee754_sqrt+0x1a0>)
 800bae2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae6:	438a      	bics	r2, r1
 800bae8:	4606      	mov	r6, r0
 800baea:	460f      	mov	r7, r1
 800baec:	460b      	mov	r3, r1
 800baee:	4604      	mov	r4, r0
 800baf0:	d10e      	bne.n	800bb10 <__ieee754_sqrt+0x30>
 800baf2:	4602      	mov	r2, r0
 800baf4:	f7f4 fcf0 	bl	80004d8 <__aeabi_dmul>
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f7f4 fb34 	bl	800016c <__adddf3>
 800bb04:	4606      	mov	r6, r0
 800bb06:	460f      	mov	r7, r1
 800bb08:	4630      	mov	r0, r6
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb10:	2900      	cmp	r1, #0
 800bb12:	dc0c      	bgt.n	800bb2e <__ieee754_sqrt+0x4e>
 800bb14:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800bb18:	4302      	orrs	r2, r0
 800bb1a:	d0f5      	beq.n	800bb08 <__ieee754_sqrt+0x28>
 800bb1c:	b189      	cbz	r1, 800bb42 <__ieee754_sqrt+0x62>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	f7f4 fb22 	bl	8000168 <__aeabi_dsub>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	f7f4 fe00 	bl	800072c <__aeabi_ddiv>
 800bb2c:	e7ea      	b.n	800bb04 <__ieee754_sqrt+0x24>
 800bb2e:	150a      	asrs	r2, r1, #20
 800bb30:	d115      	bne.n	800bb5e <__ieee754_sqrt+0x7e>
 800bb32:	2100      	movs	r1, #0
 800bb34:	e009      	b.n	800bb4a <__ieee754_sqrt+0x6a>
 800bb36:	0ae3      	lsrs	r3, r4, #11
 800bb38:	3a15      	subs	r2, #21
 800bb3a:	0564      	lsls	r4, r4, #21
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d0fa      	beq.n	800bb36 <__ieee754_sqrt+0x56>
 800bb40:	e7f7      	b.n	800bb32 <__ieee754_sqrt+0x52>
 800bb42:	460a      	mov	r2, r1
 800bb44:	e7fa      	b.n	800bb3c <__ieee754_sqrt+0x5c>
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	3101      	adds	r1, #1
 800bb4a:	02d8      	lsls	r0, r3, #11
 800bb4c:	d5fb      	bpl.n	800bb46 <__ieee754_sqrt+0x66>
 800bb4e:	1e48      	subs	r0, r1, #1
 800bb50:	1a12      	subs	r2, r2, r0
 800bb52:	f1c1 0020 	rsb	r0, r1, #32
 800bb56:	fa24 f000 	lsr.w	r0, r4, r0
 800bb5a:	4303      	orrs	r3, r0
 800bb5c:	408c      	lsls	r4, r1
 800bb5e:	2600      	movs	r6, #0
 800bb60:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800bb64:	2116      	movs	r1, #22
 800bb66:	07d2      	lsls	r2, r2, #31
 800bb68:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb76:	bf5c      	itt	pl
 800bb78:	005b      	lslpl	r3, r3, #1
 800bb7a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800bb7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb82:	bf58      	it	pl
 800bb84:	0064      	lslpl	r4, r4, #1
 800bb86:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bb8a:	107f      	asrs	r7, r7, #1
 800bb8c:	0064      	lsls	r4, r4, #1
 800bb8e:	1815      	adds	r5, r2, r0
 800bb90:	429d      	cmp	r5, r3
 800bb92:	bfde      	ittt	le
 800bb94:	182a      	addle	r2, r5, r0
 800bb96:	1b5b      	suble	r3, r3, r5
 800bb98:	1836      	addle	r6, r6, r0
 800bb9a:	0fe5      	lsrs	r5, r4, #31
 800bb9c:	3901      	subs	r1, #1
 800bb9e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bba2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bba6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bbaa:	d1f0      	bne.n	800bb8e <__ieee754_sqrt+0xae>
 800bbac:	460d      	mov	r5, r1
 800bbae:	f04f 0a20 	mov.w	sl, #32
 800bbb2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	eb01 0c00 	add.w	ip, r1, r0
 800bbbc:	db02      	blt.n	800bbc4 <__ieee754_sqrt+0xe4>
 800bbbe:	d113      	bne.n	800bbe8 <__ieee754_sqrt+0x108>
 800bbc0:	45a4      	cmp	ip, r4
 800bbc2:	d811      	bhi.n	800bbe8 <__ieee754_sqrt+0x108>
 800bbc4:	f1bc 0f00 	cmp.w	ip, #0
 800bbc8:	eb0c 0100 	add.w	r1, ip, r0
 800bbcc:	da42      	bge.n	800bc54 <__ieee754_sqrt+0x174>
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	db40      	blt.n	800bc54 <__ieee754_sqrt+0x174>
 800bbd2:	f102 0e01 	add.w	lr, r2, #1
 800bbd6:	1a9b      	subs	r3, r3, r2
 800bbd8:	4672      	mov	r2, lr
 800bbda:	45a4      	cmp	ip, r4
 800bbdc:	bf88      	it	hi
 800bbde:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bbe2:	eba4 040c 	sub.w	r4, r4, ip
 800bbe6:	4405      	add	r5, r0
 800bbe8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800bbec:	f1ba 0a01 	subs.w	sl, sl, #1
 800bbf0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800bbf4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bbf8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bbfc:	d1db      	bne.n	800bbb6 <__ieee754_sqrt+0xd6>
 800bbfe:	431c      	orrs	r4, r3
 800bc00:	d01a      	beq.n	800bc38 <__ieee754_sqrt+0x158>
 800bc02:	4c20      	ldr	r4, [pc, #128]	@ (800bc84 <__ieee754_sqrt+0x1a4>)
 800bc04:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800bc88 <__ieee754_sqrt+0x1a8>
 800bc08:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bc0c:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc10:	f7f4 faaa 	bl	8000168 <__aeabi_dsub>
 800bc14:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	4649      	mov	r1, r9
 800bc20:	f7f4 fed6 	bl	80009d0 <__aeabi_dcmple>
 800bc24:	b140      	cbz	r0, 800bc38 <__ieee754_sqrt+0x158>
 800bc26:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bc2a:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800bc32:	d111      	bne.n	800bc58 <__ieee754_sqrt+0x178>
 800bc34:	4655      	mov	r5, sl
 800bc36:	3601      	adds	r6, #1
 800bc38:	1072      	asrs	r2, r6, #1
 800bc3a:	086b      	lsrs	r3, r5, #1
 800bc3c:	07f1      	lsls	r1, r6, #31
 800bc3e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bc42:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bc46:	bf48      	it	mi
 800bc48:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800bc52:	e757      	b.n	800bb04 <__ieee754_sqrt+0x24>
 800bc54:	4696      	mov	lr, r2
 800bc56:	e7be      	b.n	800bbd6 <__ieee754_sqrt+0xf6>
 800bc58:	f7f4 fa88 	bl	800016c <__adddf3>
 800bc5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	4640      	mov	r0, r8
 800bc66:	4649      	mov	r1, r9
 800bc68:	f7f4 fea8 	bl	80009bc <__aeabi_dcmplt>
 800bc6c:	b120      	cbz	r0, 800bc78 <__ieee754_sqrt+0x198>
 800bc6e:	1ca8      	adds	r0, r5, #2
 800bc70:	bf08      	it	eq
 800bc72:	3601      	addeq	r6, #1
 800bc74:	3502      	adds	r5, #2
 800bc76:	e7df      	b.n	800bc38 <__ieee754_sqrt+0x158>
 800bc78:	1c6b      	adds	r3, r5, #1
 800bc7a:	f023 0501 	bic.w	r5, r3, #1
 800bc7e:	e7db      	b.n	800bc38 <__ieee754_sqrt+0x158>
 800bc80:	7ff00000 	.word	0x7ff00000
 800bc84:	20001078 	.word	0x20001078
 800bc88:	20001070 	.word	0x20001070
 800bc8c:	00000000 	.word	0x00000000

0800bc90 <__kernel_cos>:
 800bc90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800bc98:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	4689      	mov	r9, r1
 800bca0:	e9cd 2300 	strd	r2, r3, [sp]
 800bca4:	d204      	bcs.n	800bcb0 <__kernel_cos+0x20>
 800bca6:	f7f4 fec7 	bl	8000a38 <__aeabi_d2iz>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f000 8086 	beq.w	800bdbc <__kernel_cos+0x12c>
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 fc0e 	bl	80004d8 <__aeabi_dmul>
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4b4e      	ldr	r3, [pc, #312]	@ (800bdf8 <__kernel_cos+0x168>)
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	f7f4 fc08 	bl	80004d8 <__aeabi_dmul>
 800bcc8:	a33f      	add	r3, pc, #252	@ (adr r3, 800bdc8 <__kernel_cos+0x138>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	4682      	mov	sl, r0
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	f7f4 fbff 	bl	80004d8 <__aeabi_dmul>
 800bcda:	a33d      	add	r3, pc, #244	@ (adr r3, 800bdd0 <__kernel_cos+0x140>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 fa44 	bl	800016c <__adddf3>
 800bce4:	4622      	mov	r2, r4
 800bce6:	462b      	mov	r3, r5
 800bce8:	f7f4 fbf6 	bl	80004d8 <__aeabi_dmul>
 800bcec:	a33a      	add	r3, pc, #232	@ (adr r3, 800bdd8 <__kernel_cos+0x148>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 fa39 	bl	8000168 <__aeabi_dsub>
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	f7f4 fbed 	bl	80004d8 <__aeabi_dmul>
 800bcfe:	a338      	add	r3, pc, #224	@ (adr r3, 800bde0 <__kernel_cos+0x150>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fa32 	bl	800016c <__adddf3>
 800bd08:	4622      	mov	r2, r4
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	f7f4 fbe4 	bl	80004d8 <__aeabi_dmul>
 800bd10:	a335      	add	r3, pc, #212	@ (adr r3, 800bde8 <__kernel_cos+0x158>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	f7f4 fa27 	bl	8000168 <__aeabi_dsub>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	462b      	mov	r3, r5
 800bd1e:	f7f4 fbdb 	bl	80004d8 <__aeabi_dmul>
 800bd22:	a333      	add	r3, pc, #204	@ (adr r3, 800bdf0 <__kernel_cos+0x160>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fa20 	bl	800016c <__adddf3>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	462b      	mov	r3, r5
 800bd30:	f7f4 fbd2 	bl	80004d8 <__aeabi_dmul>
 800bd34:	4622      	mov	r2, r4
 800bd36:	462b      	mov	r3, r5
 800bd38:	f7f4 fbce 	bl	80004d8 <__aeabi_dmul>
 800bd3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	4640      	mov	r0, r8
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 fbc6 	bl	80004d8 <__aeabi_dmul>
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4602      	mov	r2, r0
 800bd50:	4629      	mov	r1, r5
 800bd52:	4620      	mov	r0, r4
 800bd54:	f7f4 fa08 	bl	8000168 <__aeabi_dsub>
 800bd58:	4b28      	ldr	r3, [pc, #160]	@ (800bdfc <__kernel_cos+0x16c>)
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	429e      	cmp	r6, r3
 800bd5e:	4689      	mov	r9, r1
 800bd60:	d80e      	bhi.n	800bd80 <__kernel_cos+0xf0>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4650      	mov	r0, sl
 800bd68:	4659      	mov	r1, fp
 800bd6a:	f7f4 f9fd 	bl	8000168 <__aeabi_dsub>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	2000      	movs	r0, #0
 800bd72:	460b      	mov	r3, r1
 800bd74:	4922      	ldr	r1, [pc, #136]	@ (800be00 <__kernel_cos+0x170>)
 800bd76:	f7f4 f9f7 	bl	8000168 <__aeabi_dsub>
 800bd7a:	b003      	add	sp, #12
 800bd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd80:	2400      	movs	r4, #0
 800bd82:	4b20      	ldr	r3, [pc, #128]	@ (800be04 <__kernel_cos+0x174>)
 800bd84:	4622      	mov	r2, r4
 800bd86:	429e      	cmp	r6, r3
 800bd88:	bf8c      	ite	hi
 800bd8a:	4d1f      	ldrhi	r5, [pc, #124]	@ (800be08 <__kernel_cos+0x178>)
 800bd8c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800bd90:	462b      	mov	r3, r5
 800bd92:	2000      	movs	r0, #0
 800bd94:	491a      	ldr	r1, [pc, #104]	@ (800be00 <__kernel_cos+0x170>)
 800bd96:	f7f4 f9e7 	bl	8000168 <__aeabi_dsub>
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	462b      	mov	r3, r5
 800bda2:	4650      	mov	r0, sl
 800bda4:	4659      	mov	r1, fp
 800bda6:	f7f4 f9df 	bl	8000168 <__aeabi_dsub>
 800bdaa:	4642      	mov	r2, r8
 800bdac:	464b      	mov	r3, r9
 800bdae:	f7f4 f9db 	bl	8000168 <__aeabi_dsub>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	e7dc      	b.n	800bd76 <__kernel_cos+0xe6>
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	4910      	ldr	r1, [pc, #64]	@ (800be00 <__kernel_cos+0x170>)
 800bdc0:	e7db      	b.n	800bd7a <__kernel_cos+0xea>
 800bdc2:	bf00      	nop
 800bdc4:	f3af 8000 	nop.w
 800bdc8:	be8838d4 	.word	0xbe8838d4
 800bdcc:	bda8fae9 	.word	0xbda8fae9
 800bdd0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bdd4:	3e21ee9e 	.word	0x3e21ee9e
 800bdd8:	809c52ad 	.word	0x809c52ad
 800bddc:	3e927e4f 	.word	0x3e927e4f
 800bde0:	19cb1590 	.word	0x19cb1590
 800bde4:	3efa01a0 	.word	0x3efa01a0
 800bde8:	16c15177 	.word	0x16c15177
 800bdec:	3f56c16c 	.word	0x3f56c16c
 800bdf0:	5555554c 	.word	0x5555554c
 800bdf4:	3fa55555 	.word	0x3fa55555
 800bdf8:	3fe00000 	.word	0x3fe00000
 800bdfc:	3fd33332 	.word	0x3fd33332
 800be00:	3ff00000 	.word	0x3ff00000
 800be04:	3fe90000 	.word	0x3fe90000
 800be08:	3fd20000 	.word	0x3fd20000
 800be0c:	00000000 	.word	0x00000000

0800be10 <__kernel_sin>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	461f      	mov	r7, r3
 800be16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800be1a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800be1e:	4604      	mov	r4, r0
 800be20:	460d      	mov	r5, r1
 800be22:	4616      	mov	r6, r2
 800be24:	b085      	sub	sp, #20
 800be26:	d203      	bcs.n	800be30 <__kernel_sin+0x20>
 800be28:	f7f4 fe06 	bl	8000a38 <__aeabi_d2iz>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d051      	beq.n	800bed4 <__kernel_sin+0xc4>
 800be30:	4622      	mov	r2, r4
 800be32:	462b      	mov	r3, r5
 800be34:	4620      	mov	r0, r4
 800be36:	4629      	mov	r1, r5
 800be38:	f7f4 fb4e 	bl	80004d8 <__aeabi_dmul>
 800be3c:	4682      	mov	sl, r0
 800be3e:	468b      	mov	fp, r1
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 fb46 	bl	80004d8 <__aeabi_dmul>
 800be4c:	a33e      	add	r3, pc, #248	@ (adr r3, 800bf48 <__kernel_sin+0x138>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	4680      	mov	r8, r0
 800be54:	4689      	mov	r9, r1
 800be56:	4650      	mov	r0, sl
 800be58:	4659      	mov	r1, fp
 800be5a:	f7f4 fb3d 	bl	80004d8 <__aeabi_dmul>
 800be5e:	a33c      	add	r3, pc, #240	@ (adr r3, 800bf50 <__kernel_sin+0x140>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 f980 	bl	8000168 <__aeabi_dsub>
 800be68:	4652      	mov	r2, sl
 800be6a:	465b      	mov	r3, fp
 800be6c:	f7f4 fb34 	bl	80004d8 <__aeabi_dmul>
 800be70:	a339      	add	r3, pc, #228	@ (adr r3, 800bf58 <__kernel_sin+0x148>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 f979 	bl	800016c <__adddf3>
 800be7a:	4652      	mov	r2, sl
 800be7c:	465b      	mov	r3, fp
 800be7e:	f7f4 fb2b 	bl	80004d8 <__aeabi_dmul>
 800be82:	a337      	add	r3, pc, #220	@ (adr r3, 800bf60 <__kernel_sin+0x150>)
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f7f4 f96e 	bl	8000168 <__aeabi_dsub>
 800be8c:	4652      	mov	r2, sl
 800be8e:	465b      	mov	r3, fp
 800be90:	f7f4 fb22 	bl	80004d8 <__aeabi_dmul>
 800be94:	a334      	add	r3, pc, #208	@ (adr r3, 800bf68 <__kernel_sin+0x158>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 f967 	bl	800016c <__adddf3>
 800be9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bea0:	e9cd 0100 	strd	r0, r1, [sp]
 800bea4:	b9db      	cbnz	r3, 800bede <__kernel_sin+0xce>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4650      	mov	r0, sl
 800beac:	4659      	mov	r1, fp
 800beae:	f7f4 fb13 	bl	80004d8 <__aeabi_dmul>
 800beb2:	a32f      	add	r3, pc, #188	@ (adr r3, 800bf70 <__kernel_sin+0x160>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 f956 	bl	8000168 <__aeabi_dsub>
 800bebc:	4642      	mov	r2, r8
 800bebe:	464b      	mov	r3, r9
 800bec0:	f7f4 fb0a 	bl	80004d8 <__aeabi_dmul>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 f94e 	bl	800016c <__adddf3>
 800bed0:	4604      	mov	r4, r0
 800bed2:	460d      	mov	r5, r1
 800bed4:	4620      	mov	r0, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	b005      	add	sp, #20
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bede:	2200      	movs	r2, #0
 800bee0:	4630      	mov	r0, r6
 800bee2:	4639      	mov	r1, r7
 800bee4:	4b24      	ldr	r3, [pc, #144]	@ (800bf78 <__kernel_sin+0x168>)
 800bee6:	f7f4 faf7 	bl	80004d8 <__aeabi_dmul>
 800beea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bef2:	4640      	mov	r0, r8
 800bef4:	4649      	mov	r1, r9
 800bef6:	f7f4 faef 	bl	80004d8 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf02:	f7f4 f931 	bl	8000168 <__aeabi_dsub>
 800bf06:	4652      	mov	r2, sl
 800bf08:	465b      	mov	r3, fp
 800bf0a:	f7f4 fae5 	bl	80004d8 <__aeabi_dmul>
 800bf0e:	4632      	mov	r2, r6
 800bf10:	463b      	mov	r3, r7
 800bf12:	f7f4 f929 	bl	8000168 <__aeabi_dsub>
 800bf16:	a316      	add	r3, pc, #88	@ (adr r3, 800bf70 <__kernel_sin+0x160>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fad8 	bl	80004d8 <__aeabi_dmul>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	4639      	mov	r1, r7
 800bf30:	f7f4 f91c 	bl	800016c <__adddf3>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4620      	mov	r0, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7f4 f914 	bl	8000168 <__aeabi_dsub>
 800bf40:	e7c6      	b.n	800bed0 <__kernel_sin+0xc0>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	5acfd57c 	.word	0x5acfd57c
 800bf4c:	3de5d93a 	.word	0x3de5d93a
 800bf50:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf54:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf58:	57b1fe7d 	.word	0x57b1fe7d
 800bf5c:	3ec71de3 	.word	0x3ec71de3
 800bf60:	19c161d5 	.word	0x19c161d5
 800bf64:	3f2a01a0 	.word	0x3f2a01a0
 800bf68:	1110f8a6 	.word	0x1110f8a6
 800bf6c:	3f811111 	.word	0x3f811111
 800bf70:	55555549 	.word	0x55555549
 800bf74:	3fc55555 	.word	0x3fc55555
 800bf78:	3fe00000 	.word	0x3fe00000
 800bf7c:	00000000 	.word	0x00000000

0800bf80 <__ieee754_rem_pio2>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	4bc4      	ldr	r3, [pc, #784]	@ (800c298 <__ieee754_rem_pio2+0x318>)
 800bf86:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800bf8a:	b08d      	sub	sp, #52	@ 0x34
 800bf8c:	4598      	cmp	r8, r3
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	4614      	mov	r4, r2
 800bf94:	9104      	str	r1, [sp, #16]
 800bf96:	d807      	bhi.n	800bfa8 <__ieee754_rem_pio2+0x28>
 800bf98:	e9c2 6700 	strd	r6, r7, [r2]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bfa4:	2500      	movs	r5, #0
 800bfa6:	e026      	b.n	800bff6 <__ieee754_rem_pio2+0x76>
 800bfa8:	4bbc      	ldr	r3, [pc, #752]	@ (800c29c <__ieee754_rem_pio2+0x31c>)
 800bfaa:	4598      	cmp	r8, r3
 800bfac:	d876      	bhi.n	800c09c <__ieee754_rem_pio2+0x11c>
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	4dbb      	ldr	r5, [pc, #748]	@ (800c2a0 <__ieee754_rem_pio2+0x320>)
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	a3aa      	add	r3, pc, #680	@ (adr r3, 800c260 <__ieee754_rem_pio2+0x2e0>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	dd38      	ble.n	800c02e <__ieee754_rem_pio2+0xae>
 800bfbc:	f7f4 f8d4 	bl	8000168 <__aeabi_dsub>
 800bfc0:	45a8      	cmp	r8, r5
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	460f      	mov	r7, r1
 800bfc6:	d01a      	beq.n	800bffe <__ieee754_rem_pio2+0x7e>
 800bfc8:	a3a7      	add	r3, pc, #668	@ (adr r3, 800c268 <__ieee754_rem_pio2+0x2e8>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 f8cb 	bl	8000168 <__aeabi_dsub>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	4689      	mov	r9, r1
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 f8c3 	bl	8000168 <__aeabi_dsub>
 800bfe2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800c268 <__ieee754_rem_pio2+0x2e8>)
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f7f4 f8be 	bl	8000168 <__aeabi_dsub>
 800bfec:	2501      	movs	r5, #1
 800bfee:	e9c4 8900 	strd	r8, r9, [r4]
 800bff2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bff6:	4628      	mov	r0, r5
 800bff8:	b00d      	add	sp, #52	@ 0x34
 800bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffe:	a39c      	add	r3, pc, #624	@ (adr r3, 800c270 <__ieee754_rem_pio2+0x2f0>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	f7f4 f8b0 	bl	8000168 <__aeabi_dsub>
 800c008:	a39b      	add	r3, pc, #620	@ (adr r3, 800c278 <__ieee754_rem_pio2+0x2f8>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	4606      	mov	r6, r0
 800c010:	460f      	mov	r7, r1
 800c012:	f7f4 f8a9 	bl	8000168 <__aeabi_dsub>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4680      	mov	r8, r0
 800c01c:	4689      	mov	r9, r1
 800c01e:	4630      	mov	r0, r6
 800c020:	4639      	mov	r1, r7
 800c022:	f7f4 f8a1 	bl	8000168 <__aeabi_dsub>
 800c026:	a394      	add	r3, pc, #592	@ (adr r3, 800c278 <__ieee754_rem_pio2+0x2f8>)
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	e7dc      	b.n	800bfe8 <__ieee754_rem_pio2+0x68>
 800c02e:	f7f4 f89d 	bl	800016c <__adddf3>
 800c032:	45a8      	cmp	r8, r5
 800c034:	4606      	mov	r6, r0
 800c036:	460f      	mov	r7, r1
 800c038:	d018      	beq.n	800c06c <__ieee754_rem_pio2+0xec>
 800c03a:	a38b      	add	r3, pc, #556	@ (adr r3, 800c268 <__ieee754_rem_pio2+0x2e8>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	f7f4 f894 	bl	800016c <__adddf3>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	4630      	mov	r0, r6
 800c04e:	4639      	mov	r1, r7
 800c050:	f7f4 f88a 	bl	8000168 <__aeabi_dsub>
 800c054:	a384      	add	r3, pc, #528	@ (adr r3, 800c268 <__ieee754_rem_pio2+0x2e8>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f7f4 f887 	bl	800016c <__adddf3>
 800c05e:	f04f 35ff 	mov.w	r5, #4294967295
 800c062:	e9c4 8900 	strd	r8, r9, [r4]
 800c066:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c06a:	e7c4      	b.n	800bff6 <__ieee754_rem_pio2+0x76>
 800c06c:	a380      	add	r3, pc, #512	@ (adr r3, 800c270 <__ieee754_rem_pio2+0x2f0>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 f87b 	bl	800016c <__adddf3>
 800c076:	a380      	add	r3, pc, #512	@ (adr r3, 800c278 <__ieee754_rem_pio2+0x2f8>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	4606      	mov	r6, r0
 800c07e:	460f      	mov	r7, r1
 800c080:	f7f4 f874 	bl	800016c <__adddf3>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4680      	mov	r8, r0
 800c08a:	4689      	mov	r9, r1
 800c08c:	4630      	mov	r0, r6
 800c08e:	4639      	mov	r1, r7
 800c090:	f7f4 f86a 	bl	8000168 <__aeabi_dsub>
 800c094:	a378      	add	r3, pc, #480	@ (adr r3, 800c278 <__ieee754_rem_pio2+0x2f8>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	e7de      	b.n	800c05a <__ieee754_rem_pio2+0xda>
 800c09c:	4b81      	ldr	r3, [pc, #516]	@ (800c2a4 <__ieee754_rem_pio2+0x324>)
 800c09e:	4598      	cmp	r8, r3
 800c0a0:	f200 80cf 	bhi.w	800c242 <__ieee754_rem_pio2+0x2c2>
 800c0a4:	f000 f962 	bl	800c36c <fabs>
 800c0a8:	a375      	add	r3, pc, #468	@ (adr r3, 800c280 <__ieee754_rem_pio2+0x300>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	f7f4 fa11 	bl	80004d8 <__aeabi_dmul>
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	4b7b      	ldr	r3, [pc, #492]	@ (800c2a8 <__ieee754_rem_pio2+0x328>)
 800c0ba:	f7f4 f857 	bl	800016c <__adddf3>
 800c0be:	f7f4 fcbb 	bl	8000a38 <__aeabi_d2iz>
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	f7f4 f99e 	bl	8000404 <__aeabi_i2d>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0d0:	a363      	add	r3, pc, #396	@ (adr r3, 800c260 <__ieee754_rem_pio2+0x2e0>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 f9ff 	bl	80004d8 <__aeabi_dmul>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	4630      	mov	r0, r6
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f7f4 f841 	bl	8000168 <__aeabi_dsub>
 800c0e6:	a360      	add	r3, pc, #384	@ (adr r3, 800c268 <__ieee754_rem_pio2+0x2e8>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	4682      	mov	sl, r0
 800c0ee:	468b      	mov	fp, r1
 800c0f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f4:	f7f4 f9f0 	bl	80004d8 <__aeabi_dmul>
 800c0f8:	2d1f      	cmp	r5, #31
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	dc0c      	bgt.n	800c11a <__ieee754_rem_pio2+0x19a>
 800c100:	4b6a      	ldr	r3, [pc, #424]	@ (800c2ac <__ieee754_rem_pio2+0x32c>)
 800c102:	1e6a      	subs	r2, r5, #1
 800c104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c108:	4543      	cmp	r3, r8
 800c10a:	d006      	beq.n	800c11a <__ieee754_rem_pio2+0x19a>
 800c10c:	4632      	mov	r2, r6
 800c10e:	463b      	mov	r3, r7
 800c110:	4650      	mov	r0, sl
 800c112:	4659      	mov	r1, fp
 800c114:	f7f4 f828 	bl	8000168 <__aeabi_dsub>
 800c118:	e00e      	b.n	800c138 <__ieee754_rem_pio2+0x1b8>
 800c11a:	463b      	mov	r3, r7
 800c11c:	4632      	mov	r2, r6
 800c11e:	4650      	mov	r0, sl
 800c120:	4659      	mov	r1, fp
 800c122:	f7f4 f821 	bl	8000168 <__aeabi_dsub>
 800c126:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c130:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c134:	2b10      	cmp	r3, #16
 800c136:	dc02      	bgt.n	800c13e <__ieee754_rem_pio2+0x1be>
 800c138:	e9c4 0100 	strd	r0, r1, [r4]
 800c13c:	e039      	b.n	800c1b2 <__ieee754_rem_pio2+0x232>
 800c13e:	a34c      	add	r3, pc, #304	@ (adr r3, 800c270 <__ieee754_rem_pio2+0x2f0>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c148:	f7f4 f9c6 	bl	80004d8 <__aeabi_dmul>
 800c14c:	4606      	mov	r6, r0
 800c14e:	460f      	mov	r7, r1
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4650      	mov	r0, sl
 800c156:	4659      	mov	r1, fp
 800c158:	f7f4 f806 	bl	8000168 <__aeabi_dsub>
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	4680      	mov	r8, r0
 800c162:	4689      	mov	r9, r1
 800c164:	4650      	mov	r0, sl
 800c166:	4659      	mov	r1, fp
 800c168:	f7f3 fffe 	bl	8000168 <__aeabi_dsub>
 800c16c:	4632      	mov	r2, r6
 800c16e:	463b      	mov	r3, r7
 800c170:	f7f3 fffa 	bl	8000168 <__aeabi_dsub>
 800c174:	a340      	add	r3, pc, #256	@ (adr r3, 800c278 <__ieee754_rem_pio2+0x2f8>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	4606      	mov	r6, r0
 800c17c:	460f      	mov	r7, r1
 800c17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c182:	f7f4 f9a9 	bl	80004d8 <__aeabi_dmul>
 800c186:	4632      	mov	r2, r6
 800c188:	463b      	mov	r3, r7
 800c18a:	f7f3 ffed 	bl	8000168 <__aeabi_dsub>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4606      	mov	r6, r0
 800c194:	460f      	mov	r7, r1
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f3 ffe5 	bl	8000168 <__aeabi_dsub>
 800c19e:	9a05      	ldr	r2, [sp, #20]
 800c1a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	2b31      	cmp	r3, #49	@ 0x31
 800c1a8:	dc20      	bgt.n	800c1ec <__ieee754_rem_pio2+0x26c>
 800c1aa:	46c2      	mov	sl, r8
 800c1ac:	46cb      	mov	fp, r9
 800c1ae:	e9c4 0100 	strd	r0, r1, [r4]
 800c1b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c1b6:	4650      	mov	r0, sl
 800c1b8:	4642      	mov	r2, r8
 800c1ba:	464b      	mov	r3, r9
 800c1bc:	4659      	mov	r1, fp
 800c1be:	f7f3 ffd3 	bl	8000168 <__aeabi_dsub>
 800c1c2:	463b      	mov	r3, r7
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	f7f3 ffcf 	bl	8000168 <__aeabi_dsub>
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f6bf af10 	bge.w	800bff6 <__ieee754_rem_pio2+0x76>
 800c1d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c1da:	6063      	str	r3, [r4, #4]
 800c1dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1e0:	f8c4 8000 	str.w	r8, [r4]
 800c1e4:	60a0      	str	r0, [r4, #8]
 800c1e6:	60e3      	str	r3, [r4, #12]
 800c1e8:	426d      	negs	r5, r5
 800c1ea:	e704      	b.n	800bff6 <__ieee754_rem_pio2+0x76>
 800c1ec:	a326      	add	r3, pc, #152	@ (adr r3, 800c288 <__ieee754_rem_pio2+0x308>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f6:	f7f4 f96f 	bl	80004d8 <__aeabi_dmul>
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	4640      	mov	r0, r8
 800c204:	4649      	mov	r1, r9
 800c206:	f7f3 ffaf 	bl	8000168 <__aeabi_dsub>
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	4682      	mov	sl, r0
 800c210:	468b      	mov	fp, r1
 800c212:	4640      	mov	r0, r8
 800c214:	4649      	mov	r1, r9
 800c216:	f7f3 ffa7 	bl	8000168 <__aeabi_dsub>
 800c21a:	4632      	mov	r2, r6
 800c21c:	463b      	mov	r3, r7
 800c21e:	f7f3 ffa3 	bl	8000168 <__aeabi_dsub>
 800c222:	a31b      	add	r3, pc, #108	@ (adr r3, 800c290 <__ieee754_rem_pio2+0x310>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	4606      	mov	r6, r0
 800c22a:	460f      	mov	r7, r1
 800c22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c230:	f7f4 f952 	bl	80004d8 <__aeabi_dmul>
 800c234:	4632      	mov	r2, r6
 800c236:	463b      	mov	r3, r7
 800c238:	f7f3 ff96 	bl	8000168 <__aeabi_dsub>
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	e764      	b.n	800c10c <__ieee754_rem_pio2+0x18c>
 800c242:	4b1b      	ldr	r3, [pc, #108]	@ (800c2b0 <__ieee754_rem_pio2+0x330>)
 800c244:	4598      	cmp	r8, r3
 800c246:	d935      	bls.n	800c2b4 <__ieee754_rem_pio2+0x334>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	f7f3 ff8c 	bl	8000168 <__aeabi_dsub>
 800c250:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c254:	e9c4 0100 	strd	r0, r1, [r4]
 800c258:	e6a4      	b.n	800bfa4 <__ieee754_rem_pio2+0x24>
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w
 800c260:	54400000 	.word	0x54400000
 800c264:	3ff921fb 	.word	0x3ff921fb
 800c268:	1a626331 	.word	0x1a626331
 800c26c:	3dd0b461 	.word	0x3dd0b461
 800c270:	1a600000 	.word	0x1a600000
 800c274:	3dd0b461 	.word	0x3dd0b461
 800c278:	2e037073 	.word	0x2e037073
 800c27c:	3ba3198a 	.word	0x3ba3198a
 800c280:	6dc9c883 	.word	0x6dc9c883
 800c284:	3fe45f30 	.word	0x3fe45f30
 800c288:	2e000000 	.word	0x2e000000
 800c28c:	3ba3198a 	.word	0x3ba3198a
 800c290:	252049c1 	.word	0x252049c1
 800c294:	397b839a 	.word	0x397b839a
 800c298:	3fe921fb 	.word	0x3fe921fb
 800c29c:	4002d97b 	.word	0x4002d97b
 800c2a0:	3ff921fb 	.word	0x3ff921fb
 800c2a4:	413921fb 	.word	0x413921fb
 800c2a8:	3fe00000 	.word	0x3fe00000
 800c2ac:	0800d538 	.word	0x0800d538
 800c2b0:	7fefffff 	.word	0x7fefffff
 800c2b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c2b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c2bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	f7f4 fbb9 	bl	8000a38 <__aeabi_d2iz>
 800c2c6:	f7f4 f89d 	bl	8000404 <__aeabi_i2d>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2d6:	f7f3 ff47 	bl	8000168 <__aeabi_dsub>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	4b21      	ldr	r3, [pc, #132]	@ (800c364 <__ieee754_rem_pio2+0x3e4>)
 800c2de:	f7f4 f8fb 	bl	80004d8 <__aeabi_dmul>
 800c2e2:	460f      	mov	r7, r1
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	f7f4 fba7 	bl	8000a38 <__aeabi_d2iz>
 800c2ea:	f7f4 f88b 	bl	8000404 <__aeabi_i2d>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	4639      	mov	r1, r7
 800c2f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2fa:	f7f3 ff35 	bl	8000168 <__aeabi_dsub>
 800c2fe:	2200      	movs	r2, #0
 800c300:	4b18      	ldr	r3, [pc, #96]	@ (800c364 <__ieee754_rem_pio2+0x3e4>)
 800c302:	f7f4 f8e9 	bl	80004d8 <__aeabi_dmul>
 800c306:	f04f 0803 	mov.w	r8, #3
 800c30a:	2600      	movs	r6, #0
 800c30c:	2700      	movs	r7, #0
 800c30e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c312:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c316:	4632      	mov	r2, r6
 800c318:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c31c:	463b      	mov	r3, r7
 800c31e:	46c2      	mov	sl, r8
 800c320:	f108 38ff 	add.w	r8, r8, #4294967295
 800c324:	f7f4 fb40 	bl	80009a8 <__aeabi_dcmpeq>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d1f4      	bne.n	800c316 <__ieee754_rem_pio2+0x396>
 800c32c:	4b0e      	ldr	r3, [pc, #56]	@ (800c368 <__ieee754_rem_pio2+0x3e8>)
 800c32e:	462a      	mov	r2, r5
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	2302      	movs	r3, #2
 800c334:	4621      	mov	r1, r4
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	a806      	add	r0, sp, #24
 800c33a:	4653      	mov	r3, sl
 800c33c:	f000 f81a 	bl	800c374 <__kernel_rem_pio2>
 800c340:	9b04      	ldr	r3, [sp, #16]
 800c342:	4605      	mov	r5, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	f6bf ae56 	bge.w	800bff6 <__ieee754_rem_pio2+0x76>
 800c34a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c34e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c352:	e9c4 2300 	strd	r2, r3, [r4]
 800c356:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c35a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c35e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c362:	e741      	b.n	800c1e8 <__ieee754_rem_pio2+0x268>
 800c364:	41700000 	.word	0x41700000
 800c368:	0800d5b8 	.word	0x0800d5b8

0800c36c <fabs>:
 800c36c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c370:	4619      	mov	r1, r3
 800c372:	4770      	bx	lr

0800c374 <__kernel_rem_pio2>:
 800c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c37c:	9308      	str	r3, [sp, #32]
 800c37e:	9104      	str	r1, [sp, #16]
 800c380:	4bb6      	ldr	r3, [pc, #728]	@ (800c65c <__kernel_rem_pio2+0x2e8>)
 800c382:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800c384:	f112 0f14 	cmn.w	r2, #20
 800c388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c38c:	bfa8      	it	ge
 800c38e:	1ed4      	subge	r4, r2, #3
 800c390:	9302      	str	r3, [sp, #8]
 800c392:	9b08      	ldr	r3, [sp, #32]
 800c394:	bfb8      	it	lt
 800c396:	2400      	movlt	r4, #0
 800c398:	f103 33ff 	add.w	r3, r3, #4294967295
 800c39c:	9306      	str	r3, [sp, #24]
 800c39e:	bfa4      	itt	ge
 800c3a0:	2318      	movge	r3, #24
 800c3a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c3a6:	f06f 0317 	mvn.w	r3, #23
 800c3aa:	fb04 3303 	mla	r3, r4, r3, r3
 800c3ae:	eb03 0a02 	add.w	sl, r3, r2
 800c3b2:	9a06      	ldr	r2, [sp, #24]
 800c3b4:	9b02      	ldr	r3, [sp, #8]
 800c3b6:	1aa7      	subs	r7, r4, r2
 800c3b8:	eb03 0802 	add.w	r8, r3, r2
 800c3bc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800c3be:	2500      	movs	r5, #0
 800c3c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c3ca:	ae20      	add	r6, sp, #128	@ 0x80
 800c3cc:	4545      	cmp	r5, r8
 800c3ce:	dd14      	ble.n	800c3fa <__kernel_rem_pio2+0x86>
 800c3d0:	f04f 0800 	mov.w	r8, #0
 800c3d4:	9a08      	ldr	r2, [sp, #32]
 800c3d6:	ab20      	add	r3, sp, #128	@ 0x80
 800c3d8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c3dc:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	4598      	cmp	r8, r3
 800c3e4:	dc35      	bgt.n	800c452 <__kernel_rem_pio2+0xde>
 800c3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f1a3 0908 	sub.w	r9, r3, #8
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	462f      	mov	r7, r5
 800c3f2:	2600      	movs	r6, #0
 800c3f4:	e9cd 2300 	strd	r2, r3, [sp]
 800c3f8:	e01f      	b.n	800c43a <__kernel_rem_pio2+0xc6>
 800c3fa:	42ef      	cmn	r7, r5
 800c3fc:	d40b      	bmi.n	800c416 <__kernel_rem_pio2+0xa2>
 800c3fe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c402:	e9cd 2300 	strd	r2, r3, [sp]
 800c406:	f7f3 fffd 	bl	8000404 <__aeabi_i2d>
 800c40a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c40e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c412:	3501      	adds	r5, #1
 800c414:	e7da      	b.n	800c3cc <__kernel_rem_pio2+0x58>
 800c416:	4610      	mov	r0, r2
 800c418:	4619      	mov	r1, r3
 800c41a:	e7f8      	b.n	800c40e <__kernel_rem_pio2+0x9a>
 800c41c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c420:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c424:	f7f4 f858 	bl	80004d8 <__aeabi_dmul>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c430:	f7f3 fe9c 	bl	800016c <__adddf3>
 800c434:	e9cd 0100 	strd	r0, r1, [sp]
 800c438:	3601      	adds	r6, #1
 800c43a:	9b06      	ldr	r3, [sp, #24]
 800c43c:	3f08      	subs	r7, #8
 800c43e:	429e      	cmp	r6, r3
 800c440:	ddec      	ble.n	800c41c <__kernel_rem_pio2+0xa8>
 800c442:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c446:	f108 0801 	add.w	r8, r8, #1
 800c44a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800c44e:	3508      	adds	r5, #8
 800c450:	e7c6      	b.n	800c3e0 <__kernel_rem_pio2+0x6c>
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	aa0c      	add	r2, sp, #48	@ 0x30
 800c456:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c45a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c45c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800c45e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c462:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c466:	930a      	str	r3, [sp, #40]	@ 0x28
 800c468:	ab98      	add	r3, sp, #608	@ 0x260
 800c46a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c46e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800c472:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c474:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c478:	ae0c      	add	r6, sp, #48	@ 0x30
 800c47a:	4698      	mov	r8, r3
 800c47c:	46b1      	mov	r9, r6
 800c47e:	465f      	mov	r7, fp
 800c480:	9307      	str	r3, [sp, #28]
 800c482:	2f00      	cmp	r7, #0
 800c484:	f1a8 0808 	sub.w	r8, r8, #8
 800c488:	dc71      	bgt.n	800c56e <__kernel_rem_pio2+0x1fa>
 800c48a:	4652      	mov	r2, sl
 800c48c:	4620      	mov	r0, r4
 800c48e:	4629      	mov	r1, r5
 800c490:	f000 fa96 	bl	800c9c0 <scalbn>
 800c494:	2200      	movs	r2, #0
 800c496:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c49a:	4604      	mov	r4, r0
 800c49c:	460d      	mov	r5, r1
 800c49e:	f7f4 f81b 	bl	80004d8 <__aeabi_dmul>
 800c4a2:	f000 fb05 	bl	800cab0 <floor>
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4b6d      	ldr	r3, [pc, #436]	@ (800c660 <__kernel_rem_pio2+0x2ec>)
 800c4aa:	f7f4 f815 	bl	80004d8 <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	f7f3 fe57 	bl	8000168 <__aeabi_dsub>
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	4604      	mov	r4, r0
 800c4be:	f7f4 fabb 	bl	8000a38 <__aeabi_d2iz>
 800c4c2:	9005      	str	r0, [sp, #20]
 800c4c4:	f7f3 ff9e 	bl	8000404 <__aeabi_i2d>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f7f3 fe4a 	bl	8000168 <__aeabi_dsub>
 800c4d4:	f1ba 0f00 	cmp.w	sl, #0
 800c4d8:	4680      	mov	r8, r0
 800c4da:	4689      	mov	r9, r1
 800c4dc:	dd6d      	ble.n	800c5ba <__kernel_rem_pio2+0x246>
 800c4de:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c4e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4e8:	9c05      	ldr	r4, [sp, #20]
 800c4ea:	f1ca 0018 	rsb	r0, sl, #24
 800c4ee:	fa43 f200 	asr.w	r2, r3, r0
 800c4f2:	4414      	add	r4, r2
 800c4f4:	4082      	lsls	r2, r0
 800c4f6:	1a9b      	subs	r3, r3, r2
 800c4f8:	aa0c      	add	r2, sp, #48	@ 0x30
 800c4fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c4fe:	f1ca 0217 	rsb	r2, sl, #23
 800c502:	9405      	str	r4, [sp, #20]
 800c504:	4113      	asrs	r3, r2
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	9b00      	ldr	r3, [sp, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	dd64      	ble.n	800c5d8 <__kernel_rem_pio2+0x264>
 800c50e:	2200      	movs	r2, #0
 800c510:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c514:	4614      	mov	r4, r2
 800c516:	9b05      	ldr	r3, [sp, #20]
 800c518:	3301      	adds	r3, #1
 800c51a:	9305      	str	r3, [sp, #20]
 800c51c:	4593      	cmp	fp, r2
 800c51e:	f300 80ab 	bgt.w	800c678 <__kernel_rem_pio2+0x304>
 800c522:	f1ba 0f00 	cmp.w	sl, #0
 800c526:	dd07      	ble.n	800c538 <__kernel_rem_pio2+0x1c4>
 800c528:	f1ba 0f01 	cmp.w	sl, #1
 800c52c:	f000 80b2 	beq.w	800c694 <__kernel_rem_pio2+0x320>
 800c530:	f1ba 0f02 	cmp.w	sl, #2
 800c534:	f000 80b9 	beq.w	800c6aa <__kernel_rem_pio2+0x336>
 800c538:	9b00      	ldr	r3, [sp, #0]
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d14c      	bne.n	800c5d8 <__kernel_rem_pio2+0x264>
 800c53e:	4642      	mov	r2, r8
 800c540:	464b      	mov	r3, r9
 800c542:	2000      	movs	r0, #0
 800c544:	4947      	ldr	r1, [pc, #284]	@ (800c664 <__kernel_rem_pio2+0x2f0>)
 800c546:	f7f3 fe0f 	bl	8000168 <__aeabi_dsub>
 800c54a:	4680      	mov	r8, r0
 800c54c:	4689      	mov	r9, r1
 800c54e:	2c00      	cmp	r4, #0
 800c550:	d042      	beq.n	800c5d8 <__kernel_rem_pio2+0x264>
 800c552:	4652      	mov	r2, sl
 800c554:	2000      	movs	r0, #0
 800c556:	4943      	ldr	r1, [pc, #268]	@ (800c664 <__kernel_rem_pio2+0x2f0>)
 800c558:	f000 fa32 	bl	800c9c0 <scalbn>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4640      	mov	r0, r8
 800c562:	4649      	mov	r1, r9
 800c564:	f7f3 fe00 	bl	8000168 <__aeabi_dsub>
 800c568:	4680      	mov	r8, r0
 800c56a:	4689      	mov	r9, r1
 800c56c:	e034      	b.n	800c5d8 <__kernel_rem_pio2+0x264>
 800c56e:	2200      	movs	r2, #0
 800c570:	4b3d      	ldr	r3, [pc, #244]	@ (800c668 <__kernel_rem_pio2+0x2f4>)
 800c572:	4620      	mov	r0, r4
 800c574:	4629      	mov	r1, r5
 800c576:	f7f3 ffaf 	bl	80004d8 <__aeabi_dmul>
 800c57a:	f7f4 fa5d 	bl	8000a38 <__aeabi_d2iz>
 800c57e:	f7f3 ff41 	bl	8000404 <__aeabi_i2d>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	e9cd 2300 	strd	r2, r3, [sp]
 800c58a:	2200      	movs	r2, #0
 800c58c:	4b37      	ldr	r3, [pc, #220]	@ (800c66c <__kernel_rem_pio2+0x2f8>)
 800c58e:	f7f3 ffa3 	bl	80004d8 <__aeabi_dmul>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	4620      	mov	r0, r4
 800c598:	4629      	mov	r1, r5
 800c59a:	f7f3 fde5 	bl	8000168 <__aeabi_dsub>
 800c59e:	f7f4 fa4b 	bl	8000a38 <__aeabi_d2iz>
 800c5a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5a6:	f849 0b04 	str.w	r0, [r9], #4
 800c5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ae:	f7f3 fddd 	bl	800016c <__adddf3>
 800c5b2:	3f01      	subs	r7, #1
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	e763      	b.n	800c482 <__kernel_rem_pio2+0x10e>
 800c5ba:	d106      	bne.n	800c5ca <__kernel_rem_pio2+0x256>
 800c5bc:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c5c0:	aa0c      	add	r2, sp, #48	@ 0x30
 800c5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c6:	15db      	asrs	r3, r3, #23
 800c5c8:	e79d      	b.n	800c506 <__kernel_rem_pio2+0x192>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	4b28      	ldr	r3, [pc, #160]	@ (800c670 <__kernel_rem_pio2+0x2fc>)
 800c5ce:	f7f4 fa09 	bl	80009e4 <__aeabi_dcmpge>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d13f      	bne.n	800c656 <__kernel_rem_pio2+0x2e2>
 800c5d6:	9000      	str	r0, [sp, #0]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	2300      	movs	r3, #0
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 f9e2 	bl	80009a8 <__aeabi_dcmpeq>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f000 80af 	beq.w	800c748 <__kernel_rem_pio2+0x3d4>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c5f0:	9902      	ldr	r1, [sp, #8]
 800c5f2:	428b      	cmp	r3, r1
 800c5f4:	da61      	bge.n	800c6ba <__kernel_rem_pio2+0x346>
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	d076      	beq.n	800c6e8 <__kernel_rem_pio2+0x374>
 800c5fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5fe:	ab0c      	add	r3, sp, #48	@ 0x30
 800c600:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c604:	f1aa 0a18 	sub.w	sl, sl, #24
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0f6      	beq.n	800c5fa <__kernel_rem_pio2+0x286>
 800c60c:	4652      	mov	r2, sl
 800c60e:	2000      	movs	r0, #0
 800c610:	4914      	ldr	r1, [pc, #80]	@ (800c664 <__kernel_rem_pio2+0x2f0>)
 800c612:	f000 f9d5 	bl	800c9c0 <scalbn>
 800c616:	465d      	mov	r5, fp
 800c618:	4606      	mov	r6, r0
 800c61a:	460f      	mov	r7, r1
 800c61c:	f04f 0900 	mov.w	r9, #0
 800c620:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c622:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800c668 <__kernel_rem_pio2+0x2f4>
 800c626:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800c62a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800c62e:	2d00      	cmp	r5, #0
 800c630:	f280 80c0 	bge.w	800c7b4 <__kernel_rem_pio2+0x440>
 800c634:	465d      	mov	r5, fp
 800c636:	2d00      	cmp	r5, #0
 800c638:	f2c0 80f0 	blt.w	800c81c <__kernel_rem_pio2+0x4a8>
 800c63c:	4b0d      	ldr	r3, [pc, #52]	@ (800c674 <__kernel_rem_pio2+0x300>)
 800c63e:	f04f 0900 	mov.w	r9, #0
 800c642:	9306      	str	r3, [sp, #24]
 800c644:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c646:	f04f 0a00 	mov.w	sl, #0
 800c64a:	2700      	movs	r7, #0
 800c64c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800c650:	ebab 0605 	sub.w	r6, fp, r5
 800c654:	e0d6      	b.n	800c804 <__kernel_rem_pio2+0x490>
 800c656:	2302      	movs	r3, #2
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	e758      	b.n	800c50e <__kernel_rem_pio2+0x19a>
 800c65c:	0800d700 	.word	0x0800d700
 800c660:	40200000 	.word	0x40200000
 800c664:	3ff00000 	.word	0x3ff00000
 800c668:	3e700000 	.word	0x3e700000
 800c66c:	41700000 	.word	0x41700000
 800c670:	3fe00000 	.word	0x3fe00000
 800c674:	0800d6c0 	.word	0x0800d6c0
 800c678:	f856 3b04 	ldr.w	r3, [r6], #4
 800c67c:	b944      	cbnz	r4, 800c690 <__kernel_rem_pio2+0x31c>
 800c67e:	b123      	cbz	r3, 800c68a <__kernel_rem_pio2+0x316>
 800c680:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c684:	f846 3c04 	str.w	r3, [r6, #-4]
 800c688:	2301      	movs	r3, #1
 800c68a:	461c      	mov	r4, r3
 800c68c:	3201      	adds	r2, #1
 800c68e:	e745      	b.n	800c51c <__kernel_rem_pio2+0x1a8>
 800c690:	1acb      	subs	r3, r1, r3
 800c692:	e7f7      	b.n	800c684 <__kernel_rem_pio2+0x310>
 800c694:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c698:	ab0c      	add	r3, sp, #48	@ 0x30
 800c69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c6a2:	a90c      	add	r1, sp, #48	@ 0x30
 800c6a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c6a8:	e746      	b.n	800c538 <__kernel_rem_pio2+0x1c4>
 800c6aa:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c6ae:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c6b8:	e7f3      	b.n	800c6a2 <__kernel_rem_pio2+0x32e>
 800c6ba:	a90c      	add	r1, sp, #48	@ 0x30
 800c6bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	e794      	b.n	800c5f0 <__kernel_rem_pio2+0x27c>
 800c6c6:	3401      	adds	r4, #1
 800c6c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	d0fa      	beq.n	800c6c6 <__kernel_rem_pio2+0x352>
 800c6d0:	9b08      	ldr	r3, [sp, #32]
 800c6d2:	aa20      	add	r2, sp, #128	@ 0x80
 800c6d4:	445b      	add	r3, fp
 800c6d6:	f10b 0801 	add.w	r8, fp, #1
 800c6da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c6de:	445c      	add	r4, fp
 800c6e0:	4544      	cmp	r4, r8
 800c6e2:	da04      	bge.n	800c6ee <__kernel_rem_pio2+0x37a>
 800c6e4:	46a3      	mov	fp, r4
 800c6e6:	e6bf      	b.n	800c468 <__kernel_rem_pio2+0xf4>
 800c6e8:	2401      	movs	r4, #1
 800c6ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6ec:	e7ec      	b.n	800c6c8 <__kernel_rem_pio2+0x354>
 800c6ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6f0:	46ab      	mov	fp, r5
 800c6f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c6f6:	f7f3 fe85 	bl	8000404 <__aeabi_i2d>
 800c6fa:	f04f 0900 	mov.w	r9, #0
 800c6fe:	2600      	movs	r6, #0
 800c700:	2700      	movs	r7, #0
 800c702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c704:	e9c5 0100 	strd	r0, r1, [r5]
 800c708:	3b08      	subs	r3, #8
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	9b06      	ldr	r3, [sp, #24]
 800c70e:	4599      	cmp	r9, r3
 800c710:	dd07      	ble.n	800c722 <__kernel_rem_pio2+0x3ae>
 800c712:	9b07      	ldr	r3, [sp, #28]
 800c714:	f108 0801 	add.w	r8, r8, #1
 800c718:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800c71c:	3508      	adds	r5, #8
 800c71e:	9307      	str	r3, [sp, #28]
 800c720:	e7de      	b.n	800c6e0 <__kernel_rem_pio2+0x36c>
 800c722:	9900      	ldr	r1, [sp, #0]
 800c724:	f109 0901 	add.w	r9, r9, #1
 800c728:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c72c:	9100      	str	r1, [sp, #0]
 800c72e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800c732:	f7f3 fed1 	bl	80004d8 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4630      	mov	r0, r6
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f3 fd15 	bl	800016c <__adddf3>
 800c742:	4606      	mov	r6, r0
 800c744:	460f      	mov	r7, r1
 800c746:	e7e1      	b.n	800c70c <__kernel_rem_pio2+0x398>
 800c748:	f1ca 0200 	rsb	r2, sl, #0
 800c74c:	4640      	mov	r0, r8
 800c74e:	4649      	mov	r1, r9
 800c750:	f000 f936 	bl	800c9c0 <scalbn>
 800c754:	2200      	movs	r2, #0
 800c756:	4b97      	ldr	r3, [pc, #604]	@ (800c9b4 <__kernel_rem_pio2+0x640>)
 800c758:	4604      	mov	r4, r0
 800c75a:	460d      	mov	r5, r1
 800c75c:	f7f4 f942 	bl	80009e4 <__aeabi_dcmpge>
 800c760:	b300      	cbz	r0, 800c7a4 <__kernel_rem_pio2+0x430>
 800c762:	2200      	movs	r2, #0
 800c764:	4b94      	ldr	r3, [pc, #592]	@ (800c9b8 <__kernel_rem_pio2+0x644>)
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	f7f3 feb5 	bl	80004d8 <__aeabi_dmul>
 800c76e:	f7f4 f963 	bl	8000a38 <__aeabi_d2iz>
 800c772:	4606      	mov	r6, r0
 800c774:	f7f3 fe46 	bl	8000404 <__aeabi_i2d>
 800c778:	2200      	movs	r2, #0
 800c77a:	4b8e      	ldr	r3, [pc, #568]	@ (800c9b4 <__kernel_rem_pio2+0x640>)
 800c77c:	f7f3 feac 	bl	80004d8 <__aeabi_dmul>
 800c780:	460b      	mov	r3, r1
 800c782:	4602      	mov	r2, r0
 800c784:	4629      	mov	r1, r5
 800c786:	4620      	mov	r0, r4
 800c788:	f7f3 fcee 	bl	8000168 <__aeabi_dsub>
 800c78c:	f7f4 f954 	bl	8000a38 <__aeabi_d2iz>
 800c790:	ab0c      	add	r3, sp, #48	@ 0x30
 800c792:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800c796:	f10b 0b01 	add.w	fp, fp, #1
 800c79a:	f10a 0a18 	add.w	sl, sl, #24
 800c79e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800c7a2:	e733      	b.n	800c60c <__kernel_rem_pio2+0x298>
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	f7f4 f946 	bl	8000a38 <__aeabi_d2iz>
 800c7ac:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7ae:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800c7b2:	e72b      	b.n	800c60c <__kernel_rem_pio2+0x298>
 800c7b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7ba:	f7f3 fe23 	bl	8000404 <__aeabi_i2d>
 800c7be:	4632      	mov	r2, r6
 800c7c0:	463b      	mov	r3, r7
 800c7c2:	f7f3 fe89 	bl	80004d8 <__aeabi_dmul>
 800c7c6:	464a      	mov	r2, r9
 800c7c8:	e868 0102 	strd	r0, r1, [r8], #-8
 800c7cc:	4653      	mov	r3, sl
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	f7f3 fe81 	bl	80004d8 <__aeabi_dmul>
 800c7d6:	3d01      	subs	r5, #1
 800c7d8:	4606      	mov	r6, r0
 800c7da:	460f      	mov	r7, r1
 800c7dc:	e727      	b.n	800c62e <__kernel_rem_pio2+0x2ba>
 800c7de:	f8dd c018 	ldr.w	ip, [sp, #24]
 800c7e2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c7e6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c7ea:	f8cd c018 	str.w	ip, [sp, #24]
 800c7ee:	f7f3 fe73 	bl	80004d8 <__aeabi_dmul>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4648      	mov	r0, r9
 800c7f8:	4651      	mov	r1, sl
 800c7fa:	f7f3 fcb7 	bl	800016c <__adddf3>
 800c7fe:	4681      	mov	r9, r0
 800c800:	468a      	mov	sl, r1
 800c802:	3701      	adds	r7, #1
 800c804:	9b02      	ldr	r3, [sp, #8]
 800c806:	429f      	cmp	r7, r3
 800c808:	dc01      	bgt.n	800c80e <__kernel_rem_pio2+0x49a>
 800c80a:	42be      	cmp	r6, r7
 800c80c:	dae7      	bge.n	800c7de <__kernel_rem_pio2+0x46a>
 800c80e:	ab48      	add	r3, sp, #288	@ 0x120
 800c810:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c814:	e9c6 9a00 	strd	r9, sl, [r6]
 800c818:	3d01      	subs	r5, #1
 800c81a:	e70c      	b.n	800c636 <__kernel_rem_pio2+0x2c2>
 800c81c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800c81e:	2b02      	cmp	r3, #2
 800c820:	dc09      	bgt.n	800c836 <__kernel_rem_pio2+0x4c2>
 800c822:	2b00      	cmp	r3, #0
 800c824:	dc2c      	bgt.n	800c880 <__kernel_rem_pio2+0x50c>
 800c826:	d04e      	beq.n	800c8c6 <__kernel_rem_pio2+0x552>
 800c828:	9b05      	ldr	r3, [sp, #20]
 800c82a:	f003 0007 	and.w	r0, r3, #7
 800c82e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c836:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d1f5      	bne.n	800c828 <__kernel_rem_pio2+0x4b4>
 800c83c:	ab48      	add	r3, sp, #288	@ 0x120
 800c83e:	441c      	add	r4, r3
 800c840:	4625      	mov	r5, r4
 800c842:	46da      	mov	sl, fp
 800c844:	f1ba 0f00 	cmp.w	sl, #0
 800c848:	dc63      	bgt.n	800c912 <__kernel_rem_pio2+0x59e>
 800c84a:	4625      	mov	r5, r4
 800c84c:	46da      	mov	sl, fp
 800c84e:	f1ba 0f01 	cmp.w	sl, #1
 800c852:	dc7b      	bgt.n	800c94c <__kernel_rem_pio2+0x5d8>
 800c854:	2000      	movs	r0, #0
 800c856:	2100      	movs	r1, #0
 800c858:	f1bb 0f01 	cmp.w	fp, #1
 800c85c:	f300 8093 	bgt.w	800c986 <__kernel_rem_pio2+0x612>
 800c860:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c864:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c868:	9b00      	ldr	r3, [sp, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f040 8092 	bne.w	800c994 <__kernel_rem_pio2+0x620>
 800c870:	9b04      	ldr	r3, [sp, #16]
 800c872:	e9c3 7800 	strd	r7, r8, [r3]
 800c876:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c87a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c87e:	e7d3      	b.n	800c828 <__kernel_rem_pio2+0x4b4>
 800c880:	465d      	mov	r5, fp
 800c882:	2000      	movs	r0, #0
 800c884:	2100      	movs	r1, #0
 800c886:	ab48      	add	r3, sp, #288	@ 0x120
 800c888:	441c      	add	r4, r3
 800c88a:	2d00      	cmp	r5, #0
 800c88c:	da32      	bge.n	800c8f4 <__kernel_rem_pio2+0x580>
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d035      	beq.n	800c900 <__kernel_rem_pio2+0x58c>
 800c894:	4602      	mov	r2, r0
 800c896:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c89a:	9c04      	ldr	r4, [sp, #16]
 800c89c:	2501      	movs	r5, #1
 800c89e:	e9c4 2300 	strd	r2, r3, [r4]
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c8aa:	f7f3 fc5d 	bl	8000168 <__aeabi_dsub>
 800c8ae:	ac48      	add	r4, sp, #288	@ 0x120
 800c8b0:	45ab      	cmp	fp, r5
 800c8b2:	da28      	bge.n	800c906 <__kernel_rem_pio2+0x592>
 800c8b4:	9b00      	ldr	r3, [sp, #0]
 800c8b6:	b113      	cbz	r3, 800c8be <__kernel_rem_pio2+0x54a>
 800c8b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8bc:	4619      	mov	r1, r3
 800c8be:	9b04      	ldr	r3, [sp, #16]
 800c8c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c8c4:	e7b0      	b.n	800c828 <__kernel_rem_pio2+0x4b4>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	ab48      	add	r3, sp, #288	@ 0x120
 800c8cc:	441c      	add	r4, r3
 800c8ce:	f1bb 0f00 	cmp.w	fp, #0
 800c8d2:	da08      	bge.n	800c8e6 <__kernel_rem_pio2+0x572>
 800c8d4:	9b00      	ldr	r3, [sp, #0]
 800c8d6:	b113      	cbz	r3, 800c8de <__kernel_rem_pio2+0x56a>
 800c8d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8dc:	4619      	mov	r1, r3
 800c8de:	9b04      	ldr	r3, [sp, #16]
 800c8e0:	e9c3 0100 	strd	r0, r1, [r3]
 800c8e4:	e7a0      	b.n	800c828 <__kernel_rem_pio2+0x4b4>
 800c8e6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800c8ea:	f7f3 fc3f 	bl	800016c <__adddf3>
 800c8ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8f2:	e7ec      	b.n	800c8ce <__kernel_rem_pio2+0x55a>
 800c8f4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800c8f8:	f7f3 fc38 	bl	800016c <__adddf3>
 800c8fc:	3d01      	subs	r5, #1
 800c8fe:	e7c4      	b.n	800c88a <__kernel_rem_pio2+0x516>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	e7c9      	b.n	800c89a <__kernel_rem_pio2+0x526>
 800c906:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800c90a:	f7f3 fc2f 	bl	800016c <__adddf3>
 800c90e:	3501      	adds	r5, #1
 800c910:	e7ce      	b.n	800c8b0 <__kernel_rem_pio2+0x53c>
 800c912:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c916:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800c91a:	4640      	mov	r0, r8
 800c91c:	4649      	mov	r1, r9
 800c91e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c922:	f7f3 fc23 	bl	800016c <__adddf3>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f3 fc19 	bl	8000168 <__aeabi_dsub>
 800c936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c93a:	f7f3 fc17 	bl	800016c <__adddf3>
 800c93e:	e865 0102 	strd	r0, r1, [r5], #-8
 800c942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c946:	e9c5 6700 	strd	r6, r7, [r5]
 800c94a:	e77b      	b.n	800c844 <__kernel_rem_pio2+0x4d0>
 800c94c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c950:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800c954:	4640      	mov	r0, r8
 800c956:	4649      	mov	r1, r9
 800c958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c95c:	f7f3 fc06 	bl	800016c <__adddf3>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4606      	mov	r6, r0
 800c966:	460f      	mov	r7, r1
 800c968:	4640      	mov	r0, r8
 800c96a:	4649      	mov	r1, r9
 800c96c:	f7f3 fbfc 	bl	8000168 <__aeabi_dsub>
 800c970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c974:	f7f3 fbfa 	bl	800016c <__adddf3>
 800c978:	e865 0102 	strd	r0, r1, [r5], #-8
 800c97c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c980:	e9c5 6700 	strd	r6, r7, [r5]
 800c984:	e763      	b.n	800c84e <__kernel_rem_pio2+0x4da>
 800c986:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800c98a:	f7f3 fbef 	bl	800016c <__adddf3>
 800c98e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c992:	e761      	b.n	800c858 <__kernel_rem_pio2+0x4e4>
 800c994:	9b04      	ldr	r3, [sp, #16]
 800c996:	9a04      	ldr	r2, [sp, #16]
 800c998:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c99c:	601f      	str	r7, [r3, #0]
 800c99e:	605c      	str	r4, [r3, #4]
 800c9a0:	609d      	str	r5, [r3, #8]
 800c9a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c9a6:	60d3      	str	r3, [r2, #12]
 800c9a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c9ac:	6110      	str	r0, [r2, #16]
 800c9ae:	6153      	str	r3, [r2, #20]
 800c9b0:	e73a      	b.n	800c828 <__kernel_rem_pio2+0x4b4>
 800c9b2:	bf00      	nop
 800c9b4:	41700000 	.word	0x41700000
 800c9b8:	3e700000 	.word	0x3e700000
 800c9bc:	00000000 	.word	0x00000000

0800c9c0 <scalbn>:
 800c9c0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c9c4:	4616      	mov	r6, r2
 800c9c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c9ca:	4683      	mov	fp, r0
 800c9cc:	468c      	mov	ip, r1
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	b982      	cbnz	r2, 800c9f4 <scalbn+0x34>
 800c9d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c9d6:	4303      	orrs	r3, r0
 800c9d8:	d039      	beq.n	800ca4e <scalbn+0x8e>
 800c9da:	4b2f      	ldr	r3, [pc, #188]	@ (800ca98 <scalbn+0xd8>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f7f3 fd7b 	bl	80004d8 <__aeabi_dmul>
 800c9e2:	4b2e      	ldr	r3, [pc, #184]	@ (800ca9c <scalbn+0xdc>)
 800c9e4:	4683      	mov	fp, r0
 800c9e6:	429e      	cmp	r6, r3
 800c9e8:	468c      	mov	ip, r1
 800c9ea:	da0d      	bge.n	800ca08 <scalbn+0x48>
 800c9ec:	a326      	add	r3, pc, #152	@ (adr r3, 800ca88 <scalbn+0xc8>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	e01b      	b.n	800ca2c <scalbn+0x6c>
 800c9f4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c9f8:	42ba      	cmp	r2, r7
 800c9fa:	d109      	bne.n	800ca10 <scalbn+0x50>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	f7f3 fbb5 	bl	800016c <__adddf3>
 800ca02:	4683      	mov	fp, r0
 800ca04:	468c      	mov	ip, r1
 800ca06:	e022      	b.n	800ca4e <scalbn+0x8e>
 800ca08:	460b      	mov	r3, r1
 800ca0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca0e:	3a36      	subs	r2, #54	@ 0x36
 800ca10:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ca14:	428e      	cmp	r6, r1
 800ca16:	dd0c      	ble.n	800ca32 <scalbn+0x72>
 800ca18:	a31d      	add	r3, pc, #116	@ (adr r3, 800ca90 <scalbn+0xd0>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	461c      	mov	r4, r3
 800ca20:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800ca24:	f361 74df 	bfi	r4, r1, #31, #1
 800ca28:	4621      	mov	r1, r4
 800ca2a:	481d      	ldr	r0, [pc, #116]	@ (800caa0 <scalbn+0xe0>)
 800ca2c:	f7f3 fd54 	bl	80004d8 <__aeabi_dmul>
 800ca30:	e7e7      	b.n	800ca02 <scalbn+0x42>
 800ca32:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ca36:	4432      	add	r2, r6
 800ca38:	428a      	cmp	r2, r1
 800ca3a:	dced      	bgt.n	800ca18 <scalbn+0x58>
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	dd0a      	ble.n	800ca56 <scalbn+0x96>
 800ca40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ca48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca4c:	46ac      	mov	ip, r5
 800ca4e:	4658      	mov	r0, fp
 800ca50:	4661      	mov	r1, ip
 800ca52:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ca56:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ca5a:	da09      	bge.n	800ca70 <scalbn+0xb0>
 800ca5c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ca60:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ca64:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ca68:	480e      	ldr	r0, [pc, #56]	@ (800caa4 <scalbn+0xe4>)
 800ca6a:	f041 011f 	orr.w	r1, r1, #31
 800ca6e:	e7bd      	b.n	800c9ec <scalbn+0x2c>
 800ca70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca74:	3236      	adds	r2, #54	@ 0x36
 800ca76:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ca7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca7e:	4658      	mov	r0, fp
 800ca80:	4629      	mov	r1, r5
 800ca82:	2200      	movs	r2, #0
 800ca84:	4b08      	ldr	r3, [pc, #32]	@ (800caa8 <scalbn+0xe8>)
 800ca86:	e7d1      	b.n	800ca2c <scalbn+0x6c>
 800ca88:	c2f8f359 	.word	0xc2f8f359
 800ca8c:	01a56e1f 	.word	0x01a56e1f
 800ca90:	8800759c 	.word	0x8800759c
 800ca94:	7e37e43c 	.word	0x7e37e43c
 800ca98:	43500000 	.word	0x43500000
 800ca9c:	ffff3cb0 	.word	0xffff3cb0
 800caa0:	8800759c 	.word	0x8800759c
 800caa4:	c2f8f359 	.word	0xc2f8f359
 800caa8:	3c900000 	.word	0x3c900000
 800caac:	00000000 	.word	0x00000000

0800cab0 <floor>:
 800cab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cab8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800cabc:	2e13      	cmp	r6, #19
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	460c      	mov	r4, r1
 800cac4:	4605      	mov	r5, r0
 800cac6:	4680      	mov	r8, r0
 800cac8:	dc35      	bgt.n	800cb36 <floor+0x86>
 800caca:	2e00      	cmp	r6, #0
 800cacc:	da17      	bge.n	800cafe <floor+0x4e>
 800cace:	a334      	add	r3, pc, #208	@ (adr r3, 800cba0 <floor+0xf0>)
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	f7f3 fb4a 	bl	800016c <__adddf3>
 800cad8:	2200      	movs	r2, #0
 800cada:	2300      	movs	r3, #0
 800cadc:	f7f3 ff8c 	bl	80009f8 <__aeabi_dcmpgt>
 800cae0:	b150      	cbz	r0, 800caf8 <floor+0x48>
 800cae2:	2c00      	cmp	r4, #0
 800cae4:	da57      	bge.n	800cb96 <floor+0xe6>
 800cae6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800caea:	432c      	orrs	r4, r5
 800caec:	2500      	movs	r5, #0
 800caee:	42ac      	cmp	r4, r5
 800caf0:	4c2d      	ldr	r4, [pc, #180]	@ (800cba8 <floor+0xf8>)
 800caf2:	bf08      	it	eq
 800caf4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800caf8:	4623      	mov	r3, r4
 800cafa:	462a      	mov	r2, r5
 800cafc:	e024      	b.n	800cb48 <floor+0x98>
 800cafe:	4f2b      	ldr	r7, [pc, #172]	@ (800cbac <floor+0xfc>)
 800cb00:	4137      	asrs	r7, r6
 800cb02:	ea01 0c07 	and.w	ip, r1, r7
 800cb06:	ea5c 0c00 	orrs.w	ip, ip, r0
 800cb0a:	d01d      	beq.n	800cb48 <floor+0x98>
 800cb0c:	a324      	add	r3, pc, #144	@ (adr r3, 800cba0 <floor+0xf0>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7f3 fb2b 	bl	800016c <__adddf3>
 800cb16:	2200      	movs	r2, #0
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f7f3 ff6d 	bl	80009f8 <__aeabi_dcmpgt>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d0ea      	beq.n	800caf8 <floor+0x48>
 800cb22:	2c00      	cmp	r4, #0
 800cb24:	bfbe      	ittt	lt
 800cb26:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cb2a:	4133      	asrlt	r3, r6
 800cb2c:	18e4      	addlt	r4, r4, r3
 800cb2e:	2500      	movs	r5, #0
 800cb30:	ea24 0407 	bic.w	r4, r4, r7
 800cb34:	e7e0      	b.n	800caf8 <floor+0x48>
 800cb36:	2e33      	cmp	r6, #51	@ 0x33
 800cb38:	dd0a      	ble.n	800cb50 <floor+0xa0>
 800cb3a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cb3e:	d103      	bne.n	800cb48 <floor+0x98>
 800cb40:	f7f3 fb14 	bl	800016c <__adddf3>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4610      	mov	r0, r2
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb50:	f04f 3cff 	mov.w	ip, #4294967295
 800cb54:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800cb58:	fa2c f707 	lsr.w	r7, ip, r7
 800cb5c:	4207      	tst	r7, r0
 800cb5e:	d0f3      	beq.n	800cb48 <floor+0x98>
 800cb60:	a30f      	add	r3, pc, #60	@ (adr r3, 800cba0 <floor+0xf0>)
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	f7f3 fb01 	bl	800016c <__adddf3>
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f7f3 ff43 	bl	80009f8 <__aeabi_dcmpgt>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d0c0      	beq.n	800caf8 <floor+0x48>
 800cb76:	2c00      	cmp	r4, #0
 800cb78:	da0a      	bge.n	800cb90 <floor+0xe0>
 800cb7a:	2e14      	cmp	r6, #20
 800cb7c:	d101      	bne.n	800cb82 <floor+0xd2>
 800cb7e:	3401      	adds	r4, #1
 800cb80:	e006      	b.n	800cb90 <floor+0xe0>
 800cb82:	2301      	movs	r3, #1
 800cb84:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cb88:	40b3      	lsls	r3, r6
 800cb8a:	441d      	add	r5, r3
 800cb8c:	4545      	cmp	r5, r8
 800cb8e:	d3f6      	bcc.n	800cb7e <floor+0xce>
 800cb90:	ea25 0507 	bic.w	r5, r5, r7
 800cb94:	e7b0      	b.n	800caf8 <floor+0x48>
 800cb96:	2500      	movs	r5, #0
 800cb98:	462c      	mov	r4, r5
 800cb9a:	e7ad      	b.n	800caf8 <floor+0x48>
 800cb9c:	f3af 8000 	nop.w
 800cba0:	8800759c 	.word	0x8800759c
 800cba4:	7e37e43c 	.word	0x7e37e43c
 800cba8:	bff00000 	.word	0xbff00000
 800cbac:	000fffff 	.word	0x000fffff

0800cbb0 <_init>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr

0800cbbc <_fini>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr
